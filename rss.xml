<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Evan Pratten</title>
        <link>https://ewpratten.com</link>
        <description>Evan Pratten is a college student, amateur radio operator, software developer, and more. This is his website.</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://ewpratten.com/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Wed, 07 Dec 2022 00:00:00 +0000</lastBuildDate>
        <item>
            <title>I re-implemented ls to query the Steam API</title>
            <pubDate>Wed, 07 Dec 2022 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/gamels/</link>
            <guid>https://ewpratten.com/blog/gamels/</guid>
            <description>&lt;p&gt;Today, I released a new command-line tool called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ewpratten&#x2F;gamels&quot;&gt;&lt;code&gt;gamels&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Linux gamers may be familiar with digging around the &lt;code&gt;copmpatdata&lt;&#x2F;code&gt; and &lt;code&gt;shadercache&lt;&#x2F;code&gt; directories in &lt;code&gt;~&#x2F;.local&#x2F;share&#x2F;Steam&#x2F;steamapps&lt;&#x2F;code&gt;. This is a tedious task that involves lots of googling, since Steam names game-specific directories after the game&#x27;s application id.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;gamels&#x2F;steam_app_ids.png&quot; alt=&quot;A screenshot showing app ids in the shadercache&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;gamels&lt;&#x2F;code&gt; solves this problem by querying the Steam API to see if any directory names match known app ids. If so, the name of the corresponding game is shown in the listing.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ewpratten&#x2F;gamels&#x2F;master&#x2F;steamdeck-screenshot.png&quot; alt=&quot;A screenshot of gamels in action&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Installation instructions and source code are available on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ewpratten&#x2F;gamels&quot;&gt;GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Channels</title>
            <pubDate>Fri, 25 Nov 2022 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/evan-pratten/channels/</link>
            <guid>https://ewpratten.com/music/evan-pratten/channels/</guid>
            <description>&lt;p&gt;I just published a new song!&lt;&#x2F;p&gt;
&lt;iframe style=&quot;border-radius:12px&quot; src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;track&#x2F;4tDNc9IFvj62p7aYHa7vCc?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;&lt;em&gt;Channels&lt;&#x2F;em&gt; is available on most platforms. Notably:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;track&#x2F;4tDNc9IFvj62p7aYHa7vCc?si=a027b5bae9184df7&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;channels-single&#x2F;1656473075&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=fBNgbTAM95o&quot;&gt;YouTube&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>An analysis of personal ASNs in the wild</title>
            <pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/personal-ases/</link>
            <guid>https://ewpratten.com/blog/personal-ases/</guid>
            <description>&lt;p&gt;As a &lt;a href=&quot;&#x2F;network&quot;&gt;network operator&lt;&#x2F;a&gt;, I keep a fairly close eye on what my peers are up to. This is mainly to make sure nobody is doing something &lt;em&gt;too&lt;&#x2F;em&gt; stupid near my network, but also just out of curiosity. Its nice to know what other people are up to, both as a sanity check on my own network, and as a view into new things I could try out.&lt;&#x2F;p&gt;
&lt;p&gt;I was recently inspired by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;he.net&#x2F;&quot;&gt;Hurricane Electric&lt;&#x2F;a&gt;&#x27;s webpage that provides &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bgp.he.net&#x2F;ipv6-progress-report.cgi&quot;&gt;statistics on IPv6 adoption&lt;&#x2F;a&gt; to create a website to display info about personal &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Autonomous_system_(Internet)&quot;&gt;Autonomous System Numbers&lt;&#x2F;a&gt;. This site both caught my interest due to being a pretty raw plain-text website (can you tell, I like simple webpages?), and due to containing a ton of interesting information.&lt;&#x2F;p&gt;
&lt;p&gt;As a little side project, I decided to take my turn at scraping the internet for various bits of data relating to the usages of personal ASNs out in the wild. This post will cover some of my findings. The data that follows &lt;em&gt;will&lt;&#x2F;em&gt; be out of date eventually. All of this was recorded in late september 2022.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;where-are-personal-ases-used&quot;&gt;Where are personal ASes used?&lt;&#x2F;h2&gt;
&lt;p&gt;To get a pretty good sense of personal ASN usage, I looked to the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Regional_Internet_registry&quot;&gt;Regional Internet Registries&lt;&#x2F;a&gt; that are in charge of handing out numbers to new networks.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;personal-ases&#x2F;rirs.png&quot; alt=&quot;Pie chart of personal ASN registration by RIR&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Unsurprisingly, the vast majority (~750) of personal ASNs are registered under &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ripe.net&quot;&gt;RIPE NCC&lt;&#x2F;a&gt;, the (mainly) European RIR.&lt;&#x2F;p&gt;
&lt;p&gt;RIPE has a fairly lax model allowing anyone with presence in their region to request an ASN and IP space through one of their many &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ripe.net&#x2F;participate&#x2F;member-support&#x2F;list-of-members&quot;&gt;Local Internet Registries&lt;&#x2F;a&gt;. I personally hold a RIPE ASN which has become my testing ground for things before I deploy them in production.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to data available from the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;apps.db.ripe.net&#x2F;db-web-ui&#x2F;query&quot;&gt;RIPE Database&lt;&#x2F;a&gt;, I was actually able to break down these ASNs further to get a sense of the most preferred LIRs. The following are the top 10 LIRs that have issued personal ASNs:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Local Registry&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;Count&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.peeringdb.com&#x2F;net&#x2F;18724&quot;&gt;Securebit AG&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;60&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.peeringdb.com&#x2F;net&#x2F;7194&quot;&gt;Openfactory GmbH&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;53&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.peeringdb.com&#x2F;net&#x2F;9285&quot;&gt;SnapServ&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;45&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.peeringdb.com&#x2F;net&#x2F;21009&quot;&gt;Servperso Systems&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;43&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.peeringdb.com&#x2F;net&#x2F;28226&quot;&gt;August Internet&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;29&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.peeringdb.com&#x2F;net&#x2F;21470&quot;&gt;Inferno Communications&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;20&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.peeringdb.com&#x2F;net&#x2F;22819&quot;&gt;iFog GmbH&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;17&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.peeringdb.com&#x2F;net&#x2F;19561&quot;&gt;Kirino Networks&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;17&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.peeringdb.com&#x2F;net&#x2F;15980&quot;&gt;Elektronik Boecker&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;14&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.peeringdb.com&#x2F;net&#x2F;21424&quot;&gt;Bakker IT&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;14&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;what-are-people-announcing&quot;&gt;What are people announcing?&lt;&#x2F;h2&gt;
&lt;p&gt;For starters, there are 185 personal ASNs that announce nothing. These are probably just abandoned and forgotten about. After that, I have measured some basic statistics on the remaining ASNs from global routing table data.&lt;&#x2F;p&gt;
&lt;p&gt;Winning the metal for most IPv4 address space announced, comes &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bgp.tools&#x2F;as&#x2F;15562&quot;&gt;AS15562&lt;&#x2F;a&gt;, which is run by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;sobornost.net&#x2F;%7Ejob&#x2F;&quot;&gt;Job Snijders&lt;&#x2F;a&gt;, announcing 263 &#x2F;24s (67065 addresses). I occasionally see Job posting on the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.nanog.org&#x2F;&quot;&gt;NANOG&lt;&#x2F;a&gt; mailing lists from his work at &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.fastly.com&#x2F;&quot;&gt;Fastly&lt;&#x2F;a&gt;, so it comes as no surprise to me that he&#x27;d also have a pretty solid personal network running too. Job is also announcing the largest continuous block of IPv4 space, being a &#x2F;17.&lt;&#x2F;p&gt;
&lt;p&gt;On the IPv6 side, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bgp.tools&#x2F;as&#x2F;59645&quot;&gt;AS59645&lt;&#x2F;a&gt; (run by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doing-stupid-things.as59645.net&#x2F;&quot;&gt;Tobias Fiebig&lt;&#x2F;a&gt;) is announcing the most &#x2F;48s (1048579). This works out to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.wolframalpha.com&#x2F;input?i=1.2676542e%2B30&quot;&gt;&lt;code&gt;1.2676542e+30&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; IPv6 addresses.&lt;&#x2F;p&gt;
&lt;p&gt;The largest continuous IPv6 block award is tied between 18 people. All of them announcing &#x2F;29s to the DFZ.&lt;&#x2F;p&gt;
&lt;p&gt;The prefix with the most origins is &lt;code&gt;2a07:54c2:b00b::&#x2F;48&lt;&#x2F;code&gt;. I am personally announcing this address space to help build the anycasted chaos that is:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;b00b.eu&quot;&gt;2a07:54c2:b00b:b00b:b00b:b00b:b00b:b00b&lt;&#x2F;a&gt; (IPv6-only website)&lt;&#x2F;p&gt;
&lt;p&gt;Along with myself, there are currently 9 other ASNs announcing their own instances of this website. The version you see in your browser will be different depending on your geographical location or even ISP in the same building.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, I have built the following chart to break down the adoption of IPv6 by personal ASNs:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;personal-ases&#x2F;ip_stack.png&quot; alt=&quot;Chart of IPv6 adoption by personal ASNs&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;want-to-see-more&quot;&gt;Want to see more?&lt;&#x2F;h2&gt;
&lt;p&gt;All of this data comes from a cron job of mine. Check out the live data on my ASN stats website:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;as-stats.ewpratten.com&#x2F;&quot;&gt;as-stats.ewpratten.com&lt;&#x2F;a&gt; (see also: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;as-stats.ewpratten.com&#x2F;&quot;&gt;archived version&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;To read more about my own network, see &lt;a href=&quot;&#x2F;network&quot;&gt;my networking page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Summer Tracks.</title>
            <pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/evan-pratten/summer-tracks/</link>
            <guid>https://ewpratten.com/music/evan-pratten/summer-tracks/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;3bcakhzNwyK40K0TowcT0m?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;200&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;&lt;em&gt;Summer Tracks.&lt;&#x2F;em&gt; is available on most platforms. Notably:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;3bcakhzNwyK40K0TowcT0m&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;summer-tracks-single&#x2F;1644648783&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=4eGT687x_aY&amp;amp;list=OLAK5uy_m9Sqza5nxt3ezFVAM30y418FqGr0w22mo&quot;&gt;YouTube&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Website updates</title>
            <pubDate>Fri, 09 Sep 2022 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/new-domain/</link>
            <guid>https://ewpratten.com/blog/new-domain/</guid>
            <description>&lt;p&gt;Hello! Its been a bit since the last post made it out of the drafts (I promise, there are many in the works). I figure a little public update is needed to talk about some backend changes that have recently been made to this site.&lt;&#x2F;p&gt;
&lt;p&gt;Firstly, there is a new domain name! I should have done this a while ago, but now I actually own the domain for my username. Welcome to &lt;code&gt;ewpratten.com&lt;&#x2F;code&gt;. The past two domains used for this site (&lt;code&gt;retrylife.ca&lt;&#x2F;code&gt; and &lt;code&gt;va3zza.com&lt;&#x2F;code&gt;) still happily redirect here, so no need to worry about updating your bookmarks and hyperlinks yet.&lt;&#x2F;p&gt;
&lt;p&gt;Secondly, this site is now anycasted and edge cached. Hopefully this change will make the browsing experience a little faster for viewers outside of North America. &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;HTTP&#x2F;3&quot;&gt;HTTP&#x2F;3&lt;&#x2F;a&gt; is now supported too. In the future, I might even set up some older protocols (Gopher, FTP, ..telnet..?) for fun. Info on that will come in a later post.&lt;&#x2F;p&gt;
&lt;p&gt;Anyways, thanks for reading. I&#x27;m always amazed to see my analytics data. A surprising number of people read these posts 😄&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Rickrolling the internet</title>
            <pubDate>Sun, 26 Jun 2022 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/rickrolling-the-internet/</link>
            <guid>https://ewpratten.com/blog/rickrolling-the-internet/</guid>
            <description>&lt;p&gt;&lt;strong&gt;NOTICE: The service mentioned in this post is currently unavailable due to ongoing network upgrades.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;mtr&lt;&#x2F;code&gt; (a modern version of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Traceroute&quot;&gt;&lt;code&gt;traceroute&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;) is a network debugging tool commonly used by network engineers to trace the physical (and sometimes virtual) paths their packets take between two computers over a network. Both &lt;code&gt;mtr&lt;&#x2F;code&gt; and &lt;code&gt;traceroute&lt;&#x2F;code&gt; will list the addresses or names of as many routers along the path as they can.&lt;&#x2F;p&gt;
&lt;p&gt;The following is an example output of an &lt;code&gt;mtr&lt;&#x2F;code&gt; trace from this computer to a Hurricane Electric server:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;rickroll-ipv6&#x2F;he-mtr.png&quot; alt=&quot;MTR command output&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;traceroute-toys&quot;&gt;Traceroute toys&lt;&#x2F;h2&gt;
&lt;p&gt;Over time, a few exceptionally bored network engineers have created some fun services that piggyback off of this idea of listing hosts along a path.&lt;&#x2F;p&gt;
&lt;p&gt;For example, there is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mtr cv6.poinsignon.org&lt;&#x2F;code&gt;: Displays a brief version of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.mygb.eu&#x2F;&quot;&gt;Louis Poinsignon&lt;&#x2F;a&gt;&#x27;s resume&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;mtr bad.horse&lt;&#x2F;code&gt;: Displays the lyrics to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=rN2U5wkhRWc&quot;&gt;Bad Horse&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;benjojo.co.uk&quot;&gt;Ben Cox&lt;&#x2F;a&gt;&#x27;s old &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blog.benjojo.co.uk&#x2F;post&#x2F;traceroute-haikus&quot;&gt;Traceroute Haiku&lt;&#x2F;a&gt; service&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;That last one was the inspiration for this project, and I will likely reference Ben&#x27;s post a fair bit in this one. If you are interested in the lower level technical aspects of what I have set up, go read his post, as I am running a nearly identical setup to him.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-game-plan&quot;&gt;The game plan&lt;&#x2F;h2&gt;
&lt;p&gt;My intent for this project was rather simple: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=dQw4w9WgXcQ&quot;&gt;rickroll&lt;&#x2F;a&gt; people when they traceroute my website. Now, I technically failed at most of that, and the result is really: rickroll people when they &lt;code&gt;mtr&lt;&#x2F;code&gt; &lt;em&gt;part of&lt;&#x2F;em&gt; my website. This change of scope was simply due to the fact I&#x27;d rather not introduce unwanted latency into the regular viewing experience of this site.&lt;&#x2F;p&gt;
&lt;p&gt;The steps were as follows:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Allocate an IPv6 address block for the project&lt;&#x2F;li&gt;
&lt;li&gt;Set up &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Reverse_DNS_lookup&quot;&gt;Reverse DNS&lt;&#x2F;a&gt; 
&lt;ol&gt;
&lt;li&gt;Convert the lyrics of &lt;em&gt;Never Gonna Give You Up&lt;&#x2F;em&gt; to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fully_qualified_domain_name&quot;&gt;FQDN&lt;&#x2F;a&gt; format&lt;&#x2F;li&gt;
&lt;li&gt;Register the appropriate &lt;code&gt;PTR&lt;&#x2F;code&gt; records&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;em&gt;Dark magic&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;knowyourmeme.com&#x2F;memes&#x2F;profit&quot;&gt;Profit!&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;ip-addresses-and-rdns&quot;&gt;IP addresses and RDNS&lt;&#x2F;h2&gt;
&lt;p&gt;For this project, I ended up using the public address block &lt;code&gt;2a06:a005:d2b:c011::&#x2F;64&lt;&#x2F;code&gt;, as I already own and control the routing for its &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bgp.tools&#x2F;prefix&#x2F;2a06:a005:d2b::&#x2F;48&quot;&gt;parent block&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I then delegated reverse DNS to the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dns.he.net&#x2F;&quot;&gt;Hurricane Electric DNS service&lt;&#x2F;a&gt; for easy management. I&#x27;ll get back to this in a second.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;converting-lyrics-to-fqdns&quot;&gt;Converting lyrics to FQDNs&lt;&#x2F;h3&gt;
&lt;p&gt;For this process, I ended up building a little Python tool called &lt;code&gt;lyrics2ptr&lt;&#x2F;code&gt; that generates copy-pastable Hurricane Electric settings from a text file full of lyrics.&lt;&#x2F;p&gt;
&lt;div class=&quot;zola-github-card&quot; &gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ewpratten&amp;#x2F;lyrics2ptr&quot;&gt;
        &lt;img src=&quot;https:&#x2F;&#x2F;opengraph.githubassets.com&#x2F;1&#x2F;ewpratten&amp;#x2F;lyrics2ptr&quot; alt=&quot;GitHub: ewpratten&amp;#x2F;lyrics2ptr&quot;&gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;
&lt;br&gt;
&lt;p&gt;The specific command for this was:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;python3&lt;&#x2F;span&gt;&lt;span&gt; lyrics2ptr.py &#x2F;path&#x2F;to&#x2F;rickroll-lyrics.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --addr-prefix&lt;&#x2F;span&gt;&lt;span&gt; c011::
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Thus generating output like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;c011::0008 never.gonna.give.you.up
&lt;&#x2F;span&gt;&lt;span&gt;c011::0009 never.gonna.let.you.down
&lt;&#x2F;span&gt;&lt;span&gt;c011::000a never.gonna.run.around.and.desert.you
&lt;&#x2F;span&gt;&lt;span&gt;c011::000b never.gonna.make.you.cry
&lt;&#x2F;span&gt;&lt;span&gt;c011::000c never.gonna.say.goodbye
&lt;&#x2F;span&gt;&lt;span&gt;c011::000d never.gonna.tell.a.lie.and.hurt.you
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While the output format may look weird, it directly corresponds to the input fields in the DNS control panel.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;rickroll-ipv6&#x2F;he-dns-fields.png&quot; alt=&quot;A screenshot of the HE control panel&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;icmpv6-trickery&quot;&gt;ICMPv6 trickery&lt;&#x2F;h2&gt;
&lt;p&gt;Now, for the &lt;del&gt;fun&lt;&#x2F;del&gt; complicated part of this project.&lt;&#x2F;p&gt;
&lt;p&gt;When you run an &lt;code&gt;mtr&lt;&#x2F;code&gt; or &lt;code&gt;traceroute&lt;&#x2F;code&gt; against a remote host, your computer will send out arbitrary packets to that host, but slowly increment the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Time_to_live&quot;&gt;Time to live&lt;&#x2F;a&gt; (TTL) field in such packets. &lt;&#x2F;p&gt;
&lt;p&gt;As a refresher, the TTL field is a number that is decremented every time a packet is passed through a router. If this number ever hits zero, the packet is discarded and an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Internet_Control_Message_Protocol#Time_exceeded&quot;&gt;ICMPv6 Time Exceeded&lt;&#x2F;a&gt; packet is returned to the sender indicating that their packet spent too long in transit. This mechanism exists to help prevent &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Routing_loop&quot;&gt;routing loops&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Generally, this field is set to a value of &lt;code&gt;64&lt;&#x2F;code&gt;, but tracing programs will make it low numbers to attempt to get otherwise hidden routers to announce their presence via a Time Exceeded packet.&lt;&#x2F;p&gt;
&lt;p&gt;For a router to show up with a &lt;em&gt;name&lt;&#x2F;em&gt; in the &lt;code&gt;mtr&lt;&#x2F;code&gt; output, it must both send a Time Exceeded packet back to your host, and have a reverse DNS record registered (thus, why I did that in the previous section).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;aren-t-you-going-to-need-a-ton-of-hosts&quot;&gt;Aren&#x27;t you going to need a ton of hosts?&lt;&#x2F;h3&gt;
&lt;p&gt;Generally, such a setup would involve daisy-chaining routers physically in your network, and setting each of their hostnames, so clients would physically have their packets routed between each of the routers, and get an ICMP response from each of them. This is a lot of work.&lt;&#x2F;p&gt;
&lt;p&gt;Conveniently for my wallet, Linux machines provide something called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;TUN&#x2F;TAP&quot;&gt;Tun&#x2F;Tap Interfaces&lt;&#x2F;a&gt;. These virtual network interfaces allow programs to pretend to be one of many other computers on the network and act as if they were real hosts. When a program registers one of these interfaces with the kernel, it gets raw access to either the 2&lt;sup&gt;nd&lt;&#x2F;sup&gt; or 3&lt;sup&gt;rd&lt;&#x2F;sup&gt; OSI layer of the network stack in the form of a raw stream.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;upload.wikimedia.org&#x2F;wikipedia&#x2F;commons&#x2F;thumb&#x2F;a&#x2F;af&#x2F;Tun-tap-osilayers-diagram.png&#x2F;400px-Tun-tap-osilayers-diagram.png&quot; alt=&quot;Tun&#x2F;Tap in the OSI stack&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I chose to register a Tun interface, and control things at the Internet Protocol level. This choice was mainly due to simplicity, as I really don&#x27;t care about hardware addresses.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lying-about-routers&quot;&gt;Lying about routers&lt;&#x2F;h3&gt;
&lt;p&gt;At this point, someone can perform &lt;code&gt;mtr&lt;&#x2F;code&gt; on my Tun interface address, and they will get... &lt;em&gt;nothing&lt;&#x2F;em&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;But, importantly, my program sees their request (again, as raw bytes) and has complete control over the response (I could just send &lt;code&gt;DEADBEEFDEADBEEFDEADBEEF&lt;&#x2F;code&gt; if I wanted in place of a real IP packet).&lt;&#x2F;p&gt;
&lt;p&gt;When an ICMPv6 Echo Request packet (the type that &lt;code&gt;mtr&lt;&#x2F;code&gt; sends for queries) comes in, I simply grab two things: the &lt;em&gt;source address&lt;&#x2F;em&gt; and the &lt;em&gt;ttl field&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Quick sidenote: the way I had configured my RDNS records, each line of lyrics works out to the next host in line. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;rickroll-ipv6&#x2F;ptr-records.png&quot; alt=&quot;The PTR record list&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With my RDNS setup, and the fact &lt;code&gt;mtr&lt;&#x2F;code&gt; will increment the TTL field for every router it wants to find, the process for mapping a &amp;quot;next router please&amp;quot; request to a &amp;quot;here is the next line of lyrics instead&amp;quot; response is simply to use the TTL itself as the host part of the IP address I pretend to respond from.&lt;&#x2F;p&gt;
&lt;p&gt;Thus, when &lt;code&gt;mtr&lt;&#x2F;code&gt; looks for the third router in line, it&#x27;ll get the address &lt;code&gt;2a06:a005:d2b:c011::3&lt;&#x2F;code&gt; in response, and resolve it to &lt;code&gt;you.know.the.rules.and.so.do.i&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;profit&quot;&gt;Profit!&lt;&#x2F;h2&gt;
&lt;p&gt;Well, thats about it. I skipped over some implementation details, but if you&#x27;d like to check out the source code for this project, head over to its GitHub page:&lt;&#x2F;p&gt;
&lt;div class=&quot;zola-github-card&quot; &gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ewpratten&amp;#x2F;imaginary-addrs&quot;&gt;
        &lt;img src=&quot;https:&#x2F;&#x2F;opengraph.githubassets.com&#x2F;1&#x2F;ewpratten&amp;#x2F;imaginary-addrs&quot; alt=&quot;GitHub: ewpratten&amp;#x2F;imaginary-addrs&quot;&gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;
&lt;br&gt;
&lt;p&gt;And for the end result:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;rickroll-ipv6&#x2F;result.png&quot; alt=&quot;The result&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Try it yourself!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mtr -rwc&lt;&#x2F;span&gt;&lt;span&gt; 1 rickroll.as204466.va3zza.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For more AS204466 projects, view &lt;a href=&quot;&#x2F;as204466&quot;&gt;my networking page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Using a Steam Controller with the Nintendo Switch</title>
            <pubDate>Thu, 23 Jun 2022 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/steam-controller-switch/</link>
            <guid>https://ewpratten.com/blog/steam-controller-switch/</guid>
            <description>&lt;p&gt;Remember the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;store.steampowered.com&#x2F;app&#x2F;353370&#x2F;Steam_Controller&#x2F;&quot;&gt;Steam Controller&lt;&#x2F;a&gt;?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;steam-switch&#x2F;sc.png&quot; alt=&quot;Image of the Steam Controller&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As it turns out, pretty much nobody does. I picked mine up back in elementary school at a good ol&#x27; &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;EB_Games&quot;&gt;EB Games&lt;&#x2F;a&gt; shop, and remember being blown away by the extensible configurability of the thing. Shooting portals with gyro aim really &lt;em&gt;was&lt;&#x2F;em&gt; a cool thing to experience.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-do-you-do-with-an-old-steam-controller&quot;&gt;What do you do with an old Steam Controller?&lt;&#x2F;h2&gt;
&lt;p&gt;Well, I ended up surrounding myself with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Nintendo_Switch&quot;&gt;Nintendo Switch&lt;&#x2F;a&gt; owners, and instantly disliking the feel of the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Nintendo_Switch#Joy-Con&quot;&gt;Joy-Con&lt;&#x2F;a&gt; controllers (seriously, who makes digital triggers!?). Thus the thought:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I wonder if I can pair third-party controllers to the switch?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It turns out that, yes, with some effort this is possible. Firstly, I tried an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Xbox_Wireless_Controller&quot;&gt;Xbox Wireless Controller&lt;&#x2F;a&gt; which should &lt;em&gt;in theory&lt;&#x2F;em&gt; be compatible with the switch. According to various people on Reddit, later versions of the Nintendo Switch firmware contain a driver for the Xbox dongle, when plugged into the back of the switch dock, but I left my bluetooth dongle at my old highschool in another city, so that plan isn&#x27;t going very far.&lt;&#x2F;p&gt;
&lt;p&gt;Back to the Steam Controller. I thought, surely a completely configurable input device like this could be set up in a way to trick the switch into thinking its a supported controller.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;i-was-almost-wrong&quot;&gt;I was &lt;em&gt;almost&lt;&#x2F;em&gt; wrong&lt;&#x2F;h2&gt;
&lt;p&gt;As it turns out, I was not alone in wanting to Nintendo-ify a Steam Controller, and someone has already done most of the work.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;&#x2F;strong&gt; The following is about to be a guide in doing rather questionable things with a Steam Controller. If you aren&#x27;t 100% sure what you are doing with these types of devices, do not try any of this.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-opensteamcontroller-project&quot;&gt;The OpenSteamController project&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;greggersaurus&#x2F;OpenSteamController&quot;&gt;OpenSteamController&lt;&#x2F;a&gt; is a now-abandoned project that completely re-implements the core functionality of the Steam Controller through reverse-engineered code.&lt;&#x2F;p&gt;
&lt;p&gt;With just a bit of work (and selling your soul to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.nxp.com&#x2F;&quot;&gt;NXP&lt;&#x2F;a&gt;), you can compile the custom firmware, and swap out the existing firmware for your own with patched switch support!&lt;&#x2F;p&gt;
&lt;h4 id=&quot;the-steps&quot;&gt;The steps&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;Clone the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;greggersaurus&#x2F;OpenSteamController&quot;&gt;OpenSteamController&lt;&#x2F;a&gt; repository&lt;&#x2F;li&gt;
&lt;li&gt;Head over to the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.nxp.com&#x2F;design&#x2F;microcontrollers-developer-resources&#x2F;lpcxpresso-ide-v8-2-2:LPCXPRESSO&quot;&gt;LPCXpresso IDE&lt;&#x2F;a&gt; download page, press the download button, create an account, and install the latest IDE version&lt;&#x2F;li&gt;
&lt;li&gt;Open the LPCXpresso IDE&lt;&#x2F;li&gt;
&lt;li&gt;Do &lt;code&gt;File &amp;gt; Import &amp;gt; General &amp;gt; Existing Project into Workspace&lt;&#x2F;code&gt; for both of these directories:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x2F;path&#x2F;to&#x2F;OpenSteamController&#x2F;firmware&#x2F;OpenSteamController&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x2F;path&#x2F;to&#x2F;OpenSteamController&#x2F;firmware&#x2F;lpc_chip_11uxx_lib&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Change &lt;code&gt;FIRMWARE_BEHAVIOR&lt;&#x2F;code&gt; to have the value &lt;code&gt;SWITCH_WIRED_POWERA_FW&lt;&#x2F;code&gt; in &lt;code&gt;OpenSteamController&#x2F;inc&#x2F;fw_cfg.h&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Right click the lpc project and build it, then do the same for the OpenSteamController project&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;For a less terse walkthrough, see &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=VxD9rCuD9Vc&quot;&gt;the tutorial video&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After completing these steps, you will have a new firmware file at&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;OpenSteamController&#x2F;Debug&#x2F;OpenSteamController.bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;flashing-custom-firmware-to-the-steam-controller&quot;&gt;Flashing custom firmware to the Steam Controller;&lt;&#x2F;h3&gt;
&lt;p&gt;Now for the fun part. It turns out the Steam Controller has a sort of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;USB#Device_Firmware_Upgrade_mechanism&quot;&gt;Device Firmware Upgrade&lt;&#x2F;a&gt; (DFU) mechanism that can be triggered by holding the &lt;em&gt;right trigger&lt;&#x2F;em&gt; while plugging the controller in.&lt;&#x2F;p&gt;
&lt;p&gt;After doing so, a new &amp;quot;drive&amp;quot; will appear on your machine called &lt;code&gt;CRP DISABLD&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Make a backup of the firmware file on this drive!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;At this point, the final flashing step is os-dependent. Assume your &lt;code&gt;OpenSteamController.bin&lt;&#x2F;code&gt; file is &lt;code&gt;${FIRMWARE}&lt;&#x2F;code&gt; and the path to your &lt;code&gt;CRP DISABLED&lt;&#x2F;code&gt; drive is &lt;code&gt;${CRP_DRV}&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;linux&quot;&gt;Linux&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dd&lt;&#x2F;span&gt;&lt;span&gt; conv=nocreat,notrunc oflag=direct bs=512 if=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FIRMWARE&lt;&#x2F;span&gt;&lt;span&gt;} of=${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CRP_DRV&lt;&#x2F;span&gt;&lt;span&gt;}&#x2F;firmware.bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;macos&quot;&gt;macOS&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat &lt;&#x2F;span&gt;&lt;span&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FIRMWARE&lt;&#x2F;span&gt;&lt;span&gt;} &amp;gt; ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;CRP_DRV&lt;&#x2F;span&gt;&lt;span&gt;}&#x2F;firmware.bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;windows&quot;&gt;Windows&lt;&#x2F;h4&gt;
&lt;p&gt;Simply copy the &lt;code&gt;OpenSteamController.bin&lt;&#x2F;code&gt; file to the &lt;code&gt;CRP DISABLED&lt;&#x2F;code&gt; drive and rename it to &lt;code&gt;firmware.bin&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;connecting-everything&quot;&gt;Connecting everything&lt;&#x2F;h3&gt;
&lt;p&gt;Finally, with a full-sized USB to USB-C adapter (like the one that comes with most phones), you can plug the controller into the switch. Make sure to enable support for wired switch pro controllers in the settings if you have issues.&lt;&#x2F;p&gt;
&lt;p&gt;A known (and annoying) problem is that the trackpads are &lt;em&gt;wayy&lt;&#x2F;em&gt; too sensitive with this firmware so.. Good luck?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;steam-switch&#x2F;sc-switch.jpg&quot; alt=&quot;My steam controller plugged into a switch&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you want to revert to factory firmware, just copy the saved &lt;code&gt;firmware.bin&lt;&#x2F;code&gt; file back to the controller in the same way you deployed the custom one.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Getting Visual Paradigm to launch on Fedora 36</title>
            <pubDate>Mon, 13 Jun 2022 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/fedora-36-vp/</link>
            <guid>https://ewpratten.com/blog/fedora-36-vp/</guid>
            <description>&lt;p&gt;When installing &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.visual-paradigm.com&#x2F;&quot;&gt;Visual Paradigm&lt;&#x2F;a&gt; on my Fedora workstation today, I kept running into a &lt;code&gt;SIGSEGV&lt;&#x2F;code&gt; error, causing the bundled JVM to crash.&lt;&#x2F;p&gt;
&lt;p&gt;This issue was specifically starting at a function call to &lt;code&gt;hb_font_get_font_v_extents_default&lt;&#x2F;code&gt; in &lt;code&gt;libharfbuzz&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;&#x2F;h2&gt;
&lt;p&gt;To get VP to launch correctly:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Download the &lt;code&gt;InstallFree&lt;&#x2F;code&gt; version of the program from your download source and extract it&lt;&#x2F;li&gt;
&lt;li&gt;Download &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;adoptium&#x2F;temurin11-binaries&#x2F;releases&#x2F;download&#x2F;jdk-11.0.15%2B10&#x2F;OpenJDK11U-jre_x64_linux_hotspot_11.0.15_10.tar.gz&quot;&gt;Temurin JRE 11.0.15&lt;&#x2F;a&gt; and extract it&lt;&#x2F;li&gt;
&lt;li&gt;Delete the &lt;code&gt;Visual_Paradigm_&amp;lt;version&amp;gt;&#x2F;jre&lt;&#x2F;code&gt; directory from the VP installer&lt;&#x2F;li&gt;
&lt;li&gt;Replace that JRE directory with the contents of the Temurin JRE package (renaming the folder to &lt;code&gt;jre&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Launch, and ignore the warnings&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;✨&lt;em&gt;magic&lt;&#x2F;em&gt;✨&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-does-this-post-exist&quot;&gt;Why does this post exist?&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;del&gt;SEO?&lt;&#x2F;del&gt; I will probably run in to this issue again a few more times, so why not write it down instead of digging through a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;forums.visual-paradigm.com&#x2F;t&#x2F;visual-paradigm-crashes-on-fedora-36&#x2F;17562&#x2F;5&quot;&gt;crash report&lt;&#x2F;a&gt; from the second page of google.&lt;&#x2F;p&gt;
&lt;p&gt;..and ya. SEO. Lots of juicy keywords are to be had in this document 😉&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Field Log: First look at the NanoVNA</title>
            <pubDate>Sat, 21 May 2022 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/nanovna/</link>
            <guid>https://ewpratten.com/blog/nanovna/</guid>
            <description>&lt;p&gt;Today I had a rather anticipated package arrive in the mail.. a NanoVNA! For anyone unfamiliar with the NanoVNA, it is a &lt;em&gt;small&lt;&#x2F;em&gt; and cheap &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Network_analyzer_(electrical)&quot;&gt;Vector Network Analyzer&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;nanovna&#x2F;nanovna.jpg&quot; alt=&quot;The NanoVNA&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Network analyzers are tools used commonly by RF engineers to measure reflection and transmission properties of feed-lines and antennas (and a whole ton of other stuff I don&#x27;t entirely care about for now).&lt;&#x2F;p&gt;
&lt;p&gt;When I am out operating a radio somewhere away from the comfort of my bedroom, I tend to do a &lt;em&gt;lot&lt;&#x2F;em&gt; of guesswork to get my antenna designs right, since I simply work with random wire, yet still need to get something with a reasonable &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Standing_wave_ratio&quot;&gt;SWR&lt;&#x2F;a&gt; up in the air.&lt;&#x2F;p&gt;
&lt;p&gt;My logic behind picking up a VNA was to have a little tool to fit in my radio bag, easily allowing me to sanity check my antennas before use.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-outdoor-adventure&quot;&gt;My outdoor adventure&lt;&#x2F;h2&gt;
&lt;p&gt;I am fairly well surrounded by dense trees, and a little patch of these woods are just across the street from me. This makes for a perfect spot to toss some wire up and operate away from the RF noise of the city (and people who want to ask me what I&#x27;m doing).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;nanovna&#x2F;area.jpg&quot; alt=&quot;A photo from across the street&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I headed over there this afternoon to set everything up, this time equipped with my new NanoVNA. Sidenote: &lt;em&gt;longboards are great tables when you get to your destination.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;nanovna&#x2F;area-2.jpg&quot; alt=&quot;A photo from across the street&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;antenna-setup&quot;&gt;Antenna setup&lt;&#x2F;h2&gt;
&lt;p&gt;The setup of the day was comprised of some speaker wire and my &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;elecraft.com&#x2F;products&#x2F;kx2-ssb-cw-data-80-10-m-transceiver&quot;&gt;Elecraft KX2&lt;&#x2F;a&gt;. I planned to only operate on 20 meters, but ended up spending most of my time calling CQ on 7037Khz and barely touched the 20m band at all outside of some quick testing.&lt;&#x2F;p&gt;
&lt;p&gt;Using the NanoVNA, I was able to perform a quick scan of a fair chunk of the amateur spectrum against my impromptu antenna.&lt;&#x2F;p&gt;
&lt;div style=&quot;display:flex;justify-content:space-evenly;flex-wrap:wrap;&quot;&gt;
&lt;img style=&quot;margin:0;margin-top:15px;&quot; src=&quot;&#x2F;images&#x2F;posts&#x2F;nanovna&#x2F;nanovna-capture-full.png&quot; alt=&quot;Band scan from 3-600mhz&quot;&gt;
&lt;img style=&quot;margin:0;margin-top:15px;&quot; src=&quot;&#x2F;images&#x2F;posts&#x2F;nanovna&#x2F;nanovna-capture-20m.png&quot; alt=&quot;Band scan of the 20m band&quot;&gt;
&lt;&#x2F;div&gt;
&lt;br&gt;
&lt;p&gt;The images above were grabbed using the NanoVNA&#x27;s screenshot capabilities, and I have the display configured to show SWR across the bands (yellow) and a Smith chart (green). First is a sweep of the spectrum, followed by a readout of just the 20 meter band. Quite nice!&lt;&#x2F;p&gt;
&lt;p&gt;In conclusion, I quite like this tool, and really enjoy both its ease of use and ability to fit in my gear bag.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;nanovna&#x2F;setup.jpg&quot; alt=&quot;A photo from across the street&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Commit syncing across hosted GIT instances</title>
            <pubDate>Wed, 18 May 2022 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/commit-sync/</link>
            <guid>https://ewpratten.com/blog/commit-sync/</guid>
            <description>&lt;p&gt;Since September of 2018 (3 and a half years ago) I have been roughly holding a streak of going no more than three days without making a commit to some project on GitHub.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;commit-sync&#x2F;commit_graph.png&quot; alt=&quot;A screenshot of my commit history last year&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is not entirely intentional, and I have broken it a few times:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;June 7, 2019&lt;&#x2F;li&gt;
&lt;li&gt;August 8, 2019&lt;&#x2F;li&gt;
&lt;li&gt;September 27, 2019&lt;&#x2F;li&gt;
&lt;li&gt;November 3, 2021&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;..but a streak is a streak. A few of my friends know about this and keep an eye on my commit graph and I do too. Recently, with most of my programming time allocated to work, my graph started looking like weeks of empty cells, implying I broke my streak for good.&lt;&#x2F;p&gt;
&lt;p&gt;In reality, that couldn&#x27;t be farther from the truth. I have been writing quite a lot of code actually, its just all tracked in a company GIT instance with a separate account.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;time-for-some-trickery&quot;&gt;Time for some trickery&lt;&#x2F;h2&gt;
&lt;p&gt;I happened to remember a little trick I used in a CI pipeline for &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;frc5024&#x2F;&quot;&gt;Raider Robotics&lt;&#x2F;a&gt; where you can backdate empty commits with arbitrary authors. I recall using this for some kind of version tagging system at some point.. idk.. the important part being it is possible to make &amp;quot;fake&amp;quot; commits with the right command-line flags.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-game-plan&quot;&gt;The game plan&lt;&#x2F;h3&gt;
&lt;p&gt;My idea was as follows:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Scrape all work repos for commits authored by one of my email addresses&lt;&#x2F;li&gt;
&lt;li&gt;Keep track of the commit timestamps&lt;&#x2F;li&gt;
&lt;li&gt;Make empty commits to a GitHub repo and backdate them to the timestamps from the last step&lt;&#x2F;li&gt;
&lt;li&gt;Enjoy having my GitHub contributor graph synced to my work account&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;em&gt;For anyone concerned with the security issue of leaking commit data, In my real implementation, dates are shuffled a bit. This also all happens in a private repo, so the public can only ever see its affect on my commit graph, and can&#x27;t actually see the commits themselves.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;scraping-commits-from-repos&quot;&gt;Scraping commits from repos&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;git&lt;&#x2F;code&gt; command has a &lt;code&gt;log&lt;&#x2F;code&gt; subcommand for querying info about commits. In its simplest form, you can dump all commits for a repo with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git -C&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;path&#x2F;to&#x2F;repo log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --pretty&lt;&#x2F;span&gt;&lt;span&gt;=format:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%H&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An example output for the repo behind this website:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;62d0c4833766671182ed0aeeb76bb16cc3f35174
&lt;&#x2F;span&gt;&lt;span&gt;420b3cc4a9d61024e0dd6c32deafb57244d09433
&lt;&#x2F;span&gt;&lt;span&gt;fed6fc374d02c2ae8f67bff837c8c8334760b303
&lt;&#x2F;span&gt;&lt;span&gt;5a64788339afd750c3853468f89d275cf8fa49cd
&lt;&#x2F;span&gt;&lt;span&gt;01992912951d80631fa5069fce7d9a3593bbcd39
&lt;&#x2F;span&gt;&lt;span&gt;d894387400158d231ed6559636169f1464bb630d
&lt;&#x2F;span&gt;&lt;span&gt;4a68456c7a5df699bc7620c9250b7a04aac5bd3c
&lt;&#x2F;span&gt;&lt;span&gt;ff87809b9c14c5132ecd5a39921b1cf2118b12cc
&lt;&#x2F;span&gt;&lt;span&gt;2b8797bbdcec61654540d995aaae67bcab8dc1c1
&lt;&#x2F;span&gt;&lt;span&gt;c4d978c5d098846b8a0105c5b6d3f42b389c6ea7
&lt;&#x2F;span&gt;&lt;span&gt;9791cdd979a17f0d5ebf9028d4778152ca07ae1d
&lt;&#x2F;span&gt;&lt;span&gt;dda08261872d3c2301cc02108c0f466dedaacaca
&lt;&#x2F;span&gt;&lt;span&gt;f408c1fa9785a40038e04b0ef017bd8d2897cdd6
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Its just a bunch of hashes.&lt;&#x2F;p&gt;
&lt;p&gt;As a side note, if you are trying to replicate my work and also commit with multiple email addresses, you can chain &lt;code&gt;--author&lt;&#x2F;code&gt; flags together.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git -C&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;path&#x2F;to&#x2F;repo log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --pretty&lt;&#x2F;span&gt;&lt;span&gt;=format:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;%H&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --author&lt;&#x2F;span&gt;&lt;span&gt;=ewpratten@example.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --author&lt;&#x2F;span&gt;&lt;span&gt;=evan@work.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cloning-commits&quot;&gt;Cloning commits&lt;&#x2F;h3&gt;
&lt;p&gt;If we iterate over our list of hashes, we can perform the rest of the steps. The main data point we care about is the timestamp.&lt;&#x2F;p&gt;
&lt;p&gt;To fetch a commit timestamp from a repo, use the following, replacing &lt;code&gt;$COMMIT_HASH&lt;&#x2F;code&gt; with the hash in question:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git -C&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;path&#x2F;to&#x2F;repo show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -s --format&lt;&#x2F;span&gt;&lt;span&gt;=%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ci &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;COMMIT_HASH
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And finally, with our timestamp (stored as &lt;code&gt;$DATE&lt;&#x2F;code&gt;) a new commit can be written to a target repo:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git -C&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;path&#x2F;to&#x2F;public&#x2F;repo commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A message.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --date&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DATE&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --no-edit --allow-empty
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Importantly, the &lt;code&gt;--allow-empty&lt;&#x2F;code&gt; flag removes the requirement for any files to be contained in the commit, essentially allowing you to have a &amp;quot;zero size&amp;quot; repository.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;Uh, ya. Cool. With your scripting language of choice, you can chain these commands together, toss a &lt;code&gt;git push&lt;&#x2F;code&gt; in there, stick this in a cron job, and have yourself a nice, healthy commit graph.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Space &amp; Time, Vol. 1</title>
            <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/evan-pratten/space-time-1/</link>
            <guid>https://ewpratten.com/music/evan-pratten/space-time-1/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;718OAeNsyhO1znebsXVSdf?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;250&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;&lt;em&gt;Space &amp;amp; Time, Vol. 1&lt;&#x2F;em&gt; is available on most platforms. Notably:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;718OAeNsyhO1znebsXVSdf&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;space-time-vol-1-ep&#x2F;1623507117&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=Pyvg2UQW4lg&amp;amp;list=OLAK5uy_lc_rYhBzXiw-4eLMXNdvY7isbNz9pU0ME&quot;&gt;YouTube&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Making my UDM-Pro scream</title>
            <pubDate>Wed, 06 Apr 2022 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/udm-fan/</link>
            <guid>https://ewpratten.com/blog/udm-fan/</guid>
            <description>&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ui.com&#x2F;&quot;&gt;Ubiquiti&lt;&#x2F;a&gt;&#x27;s &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ubnt.com&#x2F;products&#x2F;unifi-dream-machine-pro&quot;&gt;Unifi Dream Machine Pro&lt;&#x2F;a&gt; is a powerful medium-scale business-oriented rack-mount router, capable of handling 10&#x2F;100&#x2F;1000&#x2F;10000 ethernet traffic. Really quite a nice device.&lt;&#x2F;p&gt;
&lt;p&gt;One day, I had the thought: &lt;em&gt;I&#x27;ve never heard the fans ramp up on this&lt;&#x2F;em&gt;. And so, I started looking into the possibilities of manual fan control.&lt;&#x2F;p&gt;
&lt;p&gt;As it turns out, this Linux-based device allows you (like any embedded Linux computer) override its I&#x2F;O with some clever shell commands.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enter-ssh&quot;&gt;Enter: SSH&lt;&#x2F;h2&gt;
&lt;p&gt;If you own a UDM-Pro, you surely know how to log in to it via SSH. If not, look it up 😄.&lt;&#x2F;p&gt;
&lt;p&gt;With an SSH connection open, the following commands let you control the fans on the device!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Override the fans with a speed (0-255)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FAN_SPEED&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;128
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;killall -9&lt;&#x2F;span&gt;&lt;span&gt; S04ubnt-fan-speed ubnt-fan-speed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; 1 &amp;gt; &#x2F;sys&#x2F;class&#x2F;hwmon&#x2F;hwmon0&#x2F;device&#x2F;pwm1_enable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; 1 &amp;gt; &#x2F;sys&#x2F;class&#x2F;hwmon&#x2F;hwmon0&#x2F;device&#x2F;pwm2_enable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FAN_SPEED &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &#x2F;sys&#x2F;class&#x2F;hwmon&#x2F;hwmon0&#x2F;device&#x2F;pwm1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FAN_SPEED &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &#x2F;sys&#x2F;class&#x2F;hwmon&#x2F;hwmon0&#x2F;device&#x2F;pwm2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Return control back to the device
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;etc&#x2F;init.d&#x2F;S04ubnt-fan-speed&lt;&#x2F;span&gt;&lt;span&gt; start
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;exit-stage-left&quot;&gt;Exit stage left&lt;&#x2F;h2&gt;
&lt;p&gt;Who needs SSH anyways? &lt;&#x2F;p&gt;
&lt;p&gt;When I discovered this, I decided to write a little program that wraps the SSH commands with a little bit of error checking, and support for auto-discovery of UDM-Pro devices on your network.&lt;&#x2F;p&gt;
&lt;div class=&quot;zola-github-card&quot; &gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ewpratten&amp;#x2F;udm-fan&quot;&gt;
        &lt;img src=&quot;https:&#x2F;&#x2F;opengraph.githubassets.com&#x2F;1&#x2F;ewpratten&amp;#x2F;udm-fan&quot; alt=&quot;GitHub: ewpratten&amp;#x2F;udm-fan&quot;&gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;
&lt;br&gt;
&lt;p&gt;The following commands can be used to control the fans on a local UDM-Pro:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Set the fans to half speed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;udm-fan&lt;&#x2F;span&gt;&lt;span&gt; set 128
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Set the fans to full speed (with a custom IP address)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;udm-fan&lt;&#x2F;span&gt;&lt;span&gt; set 255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --override-ip&lt;&#x2F;span&gt;&lt;span&gt; 172.16.11.5
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Bring the fans back to automatic control
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;udm-fan&lt;&#x2F;span&gt;&lt;span&gt; auto
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Passwords can be provided through:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;--ssh-password&lt;&#x2F;code&gt; flag&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;UDM_SSH_PASS&lt;&#x2F;code&gt; environment variable&lt;&#x2F;li&gt;
&lt;li&gt;A &lt;code&gt;.netrc&lt;&#x2F;code&gt; entry with the hostname being the UDM&#x27;s IP address&lt;&#x2F;li&gt;
&lt;li&gt;The terminal at runtime&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>A Java development cheatsheet for my classmates</title>
            <pubDate>Tue, 15 Mar 2022 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/java-cheatsheet/</link>
            <guid>https://ewpratten.com/blog/java-cheatsheet/</guid>
            <description>&lt;p&gt;This document is written for my PROG10082 classmates as a quick reference for some Java concepts that were skipped over in the course. This document may be updated as needed.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;vscode-tips&quot;&gt;VSCode Tips&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Remember&lt;&#x2F;em&gt;, you can open &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;docs&#x2F;editor&#x2F;intellisense&quot;&gt;intelisense&lt;&#x2F;a&gt; by pressing &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt; + &lt;kbd&gt;Space&lt;&#x2F;kbd&gt;. This is a super handy tool for auto-complete in your code no matter the language you are working in.&lt;&#x2F;p&gt;
&lt;p&gt;Typing the following then opening intelisense will give you some shorthand options for quickly typing common code. Just select the option you want with arrow keys, and press &lt;kbd&gt;Enter&lt;&#x2F;kbd&gt; to apply it.&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Shortcut&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;syso&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Automatically print &lt;code&gt;System.out.println();&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;syserr&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Automatically print &lt;code&gt;System.err.println();&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;upper-and-lowercase-types&quot;&gt;Upper and lowercase types&lt;&#x2F;h2&gt;
&lt;p&gt;Many types you encounter in Java have an uppercase and lowercase variant, for example &lt;code&gt;int&lt;&#x2F;code&gt; and &lt;code&gt;Integer&lt;&#x2F;code&gt;. The difference is important. Here are the avalible uppercase variants of common types:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Standard type&lt;&#x2F;th&gt;&lt;th&gt;Uppercase type&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;short&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Short&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;char&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Character&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;byte&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Byte&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;int&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Integer&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;double&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Double&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;float&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Float&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;long&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;Long&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;null-and-optional-values&quot;&gt;Null and optional values&lt;&#x2F;h3&gt;
&lt;p&gt;One uses of the uppercase variant of a type is to allow &lt;code&gt;null&lt;&#x2F;code&gt; values. In most languages, &lt;code&gt;null&lt;&#x2F;code&gt; means &amp;quot;Nothing&amp;quot;. In Java, you can use &lt;code&gt;null&lt;&#x2F;code&gt; to indicate that a variable is not yet assigned a value. This can be checked with the &lt;code&gt;==&lt;&#x2F;code&gt; operator.&lt;&#x2F;p&gt;
&lt;p&gt;An example usage of this could be the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We want to ask for a number of records to read
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Scanner&lt;&#x2F;span&gt;&lt;span&gt; input = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Scanner&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.in);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; recordCount = input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nextInt&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Create a value to store the highest record in
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; I have made this `null` so we can know if we didnt get a value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt; highestRecord = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Read the records
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; recordCount; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Read a value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; record = input.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nextInt&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If the value is higher than the current highest record
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; or the highest record is `null`, update the highest record
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(highestRecord == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;|| record &amp;gt; highestRecord) {
&lt;&#x2F;span&gt;&lt;span&gt;        highestRecord = record;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We now have the highest record
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(highestRecord != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The highest record is &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + highestRecord);
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;No records were entered&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;pass-by-reference&quot;&gt;Pass-by-reference&lt;&#x2F;h3&gt;
&lt;p&gt;Another use of uppercase types is pass-by-reference. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This is a function that will try to add `1` to a value
&lt;&#x2F;span&gt;&lt;span&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addOne&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; value) {
&lt;&#x2F;span&gt;&lt;span&gt;    value = value + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;...args) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We can make a value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; myNumber = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; And pass it to a function. You would expect this to work
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addOne&lt;&#x2F;span&gt;&lt;span&gt;(myNumber);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; But at this point, `myNumber` is still `1`
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, we can switch to using uppercase types to make the function edit the value.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This is a function that will try to add `1` to a value
&lt;&#x2F;span&gt;&lt;span&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addOne&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt; value) {
&lt;&#x2F;span&gt;&lt;span&gt;    value = value + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;...args) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We can make a value
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt; myNumber = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; And pass it to a function. This will work, since we have an upprcase type
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addOne&lt;&#x2F;span&gt;&lt;span&gt;(myNumber);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; At this point, `myNumber` is now `2`
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
        <item>
            <title>Monocular depth mapping in Blender</title>
            <pubDate>Wed, 19 Jan 2022 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/monocular-blender/</link>
            <guid>https://ewpratten.com/blog/monocular-blender/</guid>
            <description>&lt;p&gt;A while back, I encountered an interesting trend going on over on TikTok. People were turning their photos into videos with 3D camera movements.&lt;&#x2F;p&gt;
&lt;p&gt;Having created content like this before myself in both Adobe After Effects and Blender, I just assumed I had come across a few people who also knew the process for creating &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;2.5D_(visual_perception)&quot;&gt;2.5D&lt;&#x2F;a&gt; content. For anyone who has not seen 2.5D content before, check out the video below by the amazing artist &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.instagram.com&#x2F;SpencerMiller&#x2F;&quot;&gt;Spencer Miller&lt;&#x2F;a&gt;, who is well know  for his 2.5D and 3D concert videos.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;instagram-media&quot; data-instgrm-permalink=&quot;https:&#x2F;&#x2F;www.instagram.com&#x2F;p&#x2F;CCeBnxmjfuY&#x2F;?utm_source=ig_embed&amp;amp;utm_campaign=loading&quot; data-instgrm-version=&quot;14&quot; style=&quot; background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: auto; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);&quot;&gt;&lt;div style=&quot;padding:16px;&quot;&gt; &lt;a href=&quot;https:&#x2F;&#x2F;www.instagram.com&#x2F;p&#x2F;CCeBnxmjfuY&#x2F;?utm_source=ig_embed&amp;amp;utm_campaign=loading&quot; style=&quot; background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;&quot; target=&quot;_blank&quot;&gt; &lt;div style=&quot; display: flex; flex-direction: row; align-items: center;&quot;&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;&quot;&gt;&lt;&#x2F;div&gt; &lt;div style=&quot;display: flex; flex-direction: column; flex-grow: 1; justify-content: center;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;&quot;&gt;&lt;&#x2F;div&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div style=&quot;padding: 19% 0;&quot;&gt;&lt;&#x2F;div&gt; &lt;div style=&quot;display:block; height:50px; margin:0 auto 12px; width:50px;&quot;&gt;&lt;svg width=&quot;50px&quot; height=&quot;50px&quot; viewBox=&quot;0 0 60 60&quot; version=&quot;1.1&quot; xmlns=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;2000&#x2F;svg&quot; xmlns:xlink=&quot;https:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xlink&quot;&gt;&lt;g stroke=&quot;none&quot; stroke-width=&quot;1&quot; fill=&quot;none&quot; fill-rule=&quot;evenodd&quot;&gt;&lt;g transform=&quot;translate(-511.000000, -20.000000)&quot; fill=&quot;#000000&quot;&gt;&lt;g&gt;&lt;path d=&quot;M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631&quot;&gt;&lt;&#x2F;path&gt;&lt;&#x2F;g&gt;&lt;&#x2F;g&gt;&lt;&#x2F;g&gt;&lt;&#x2F;svg&gt;&lt;&#x2F;div&gt;&lt;div style=&quot;padding-top: 8px;&quot;&gt; &lt;div style=&quot; color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;&quot;&gt;View this post on Instagram&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div style=&quot;padding: 12.5% 0;&quot;&gt;&lt;&#x2F;div&gt; &lt;div style=&quot;display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;&quot;&gt;&lt;div&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);&quot;&gt;&lt;&#x2F;div&gt; &lt;div style=&quot;background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;&quot;&gt;&lt;&#x2F;div&gt; &lt;div style=&quot;background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div style=&quot;margin-left: 8px;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;&quot;&gt;&lt;&#x2F;div&gt; &lt;div style=&quot; width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;div style=&quot;margin-left: auto;&quot;&gt; &lt;div style=&quot; width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);&quot;&gt;&lt;&#x2F;div&gt; &lt;div style=&quot; background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);&quot;&gt;&lt;&#x2F;div&gt; &lt;div style=&quot; width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt; &lt;div style=&quot;display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;&quot;&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;&quot;&gt;&lt;&#x2F;div&gt; &lt;div style=&quot; background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;&quot;&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;a&gt;&lt;p style=&quot; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.instagram.com&#x2F;p&#x2F;CCeBnxmjfuY&#x2F;?utm_source=ig_embed&amp;amp;utm_campaign=loading&quot; style=&quot; color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;&quot; target=&quot;_blank&quot;&gt;A post shared by spencer miller (@spencermiller)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&lt;&#x2F;blockquote&gt; &lt;script async src=&quot;&#x2F;&#x2F;www.instagram.com&#x2F;embed.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;br&gt;
&lt;p&gt;Alright. Back to TikTok, here is an example of one of the trend videos I came across. Notice how there is some graphical artifacting near the top and bottom of this video? This made me realize these videos are not your standard 2.5D content, but something else was going on.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;blockquote class=&quot;tiktok-embed&quot; cite=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;@flash_supercars&#x2F;video&#x2F;7016749321043463430&quot; data-video-id=&quot;7016749321043463430&quot; style=&quot;max-width: 605px;min-width: 325px;&quot; &gt; &lt;section&gt; &lt;a target=&quot;_blank&quot; title=&quot;@flash_supercars&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;@flash_supercars&quot;&gt;@flash_supercars&lt;&#x2F;a&gt; This is a nice Effekt!👍🔥😍&lt;a title=&quot;münchen&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;m%C3%BCnchen&quot;&gt;#münchen&lt;&#x2F;a&gt; &lt;a title=&quot;hypercars&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;hypercars&quot;&gt;#hypercars&lt;&#x2F;a&gt; &lt;a title=&quot;supercars&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;supercars&quot;&gt;#supercars&lt;&#x2F;a&gt; &lt;a title=&quot;carspotting&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;carspotting&quot;&gt;#carspotting&lt;&#x2F;a&gt; &lt;a title=&quot;münchencars&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;m%C3%BCnchencars&quot;&gt;#münchencars&lt;&#x2F;a&gt; &lt;a title=&quot;flashsupercars&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;flashsupercars&quot;&gt;#flashsupercars&lt;&#x2F;a&gt; &lt;a title=&quot;fürdich&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;f%C3%BCrdich&quot;&gt;#fürdich&lt;&#x2F;a&gt; &lt;a title=&quot;fy&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;fy&quot;&gt;#fy&lt;&#x2F;a&gt; &lt;a title=&quot;carlovers&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;carlovers&quot;&gt;#carlovers&lt;&#x2F;a&gt; &lt;a title=&quot;richlifestyle&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;richlifestyle&quot;&gt;#richlifestyle&lt;&#x2F;a&gt; &lt;a title=&quot;bugatti&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;bugatti&quot;&gt;#bugatti&lt;&#x2F;a&gt; &lt;a title=&quot;ferrari&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;ferrari&quot;&gt;#ferrari&lt;&#x2F;a&gt; &lt;a title=&quot;3d&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;3d&quot;&gt;#3d&lt;&#x2F;a&gt; &lt;a title=&quot;3dzoompro&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;3dzoompro&quot;&gt;#3dzoompro&lt;&#x2F;a&gt; &lt;a title=&quot;3dtrend&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;3dtrend&quot;&gt;#3dtrend&lt;&#x2F;a&gt; &lt;a title=&quot;trend&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;trend&quot;&gt;#trend&lt;&#x2F;a&gt; &lt;a title=&quot;3dzoomeffect&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;tag&#x2F;3dzoomeffect&quot;&gt;#3dzoomeffect&lt;&#x2F;a&gt; &lt;a target=&quot;_blank&quot; title=&quot;♬ original sound - 6X Camps 🏆🏆🏆🏆🏆🏆&quot; href=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;music&#x2F;original-sound-7013166802171644677&quot;&gt;♬ original sound - 6X Camps 🏆🏆🏆🏆🏆🏆&lt;&#x2F;a&gt; &lt;&#x2F;section&gt; &lt;&#x2F;blockquote&gt; &lt;script async src=&quot;https:&#x2F;&#x2F;www.tiktok.com&#x2F;embed.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;br&gt;
&lt;p&gt;There was no way so many people could have suddenly learned how to work in 2.5D, all had the required software, and all had the time to painstakingly rotoscope out every depth level of their photo to make it all look good.&lt;&#x2F;p&gt;
&lt;p&gt;Conveniently, it took very little effort to find out that this was all being done by a video editing app called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.capcut.net&#x2F;&quot;&gt;CapCut&lt;&#x2F;a&gt;. I&#x27;ll spare you the details of researching this CapCut effect to find out how it works, and we will skip right to the technology powering it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;playing-with-neural-networks&quot;&gt;Playing with Neural Networks&lt;&#x2F;h2&gt;
&lt;p&gt;From my research, this techololgy (called &lt;em&gt;context-aware inpainting&lt;&#x2F;em&gt;) stems from a paper called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doi.org&#x2F;10.1109&#x2F;CVPR42600.2020.00805&quot;&gt;&lt;em&gt;3D Photography Using Context-Aware Layered Depth Inpainting&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;. I wanted to try replicating this effect in Blender, so I loaded up the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vt-vl-lab&#x2F;3d-photo-inpainting&quot;&gt;demo for this paper&lt;&#x2F;a&gt;, tried it out on some images I had lying around, and immediately ran in to issues with incorrect depth estimation results.&lt;&#x2F;p&gt;
&lt;p&gt;After some experimentation, I decided to take a step back from neural-network-powered inpainting and instead started experimenting with the underlying depth estimation research this paper was build on top of.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.embodiedaifoundation.org&#x2F;&quot;&gt;Embodied AI Foundation&lt;&#x2F;a&gt; has a paper called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doi.org&#x2F;10.1109&#x2F;TPAMI.2020.3019967&quot;&gt;Towards Robust Monocular Depth Estimation: Mixing Datasets for Zero-shot Cross-dataset Transfer&lt;&#x2F;a&gt; (much better known as &lt;strong&gt;MiDaS&lt;&#x2F;strong&gt;). This paper and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;isl-org&#x2F;MiDaS&quot;&gt;accompanying Python library&lt;&#x2F;a&gt; describes an implements a high-accuracy method for estimating depth maps from a monocular (single-lense camera) image.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-goal&quot;&gt;My goal&lt;&#x2F;h2&gt;
&lt;p&gt;My goal for this side-project at this point was to create a &amp;quot;zero-thought, one-click&amp;quot; system for bringing monocular images into Blender as full 3D meshes with projection-mapped textures.&lt;&#x2F;p&gt;
&lt;p&gt;This requires three parts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A simple system for creating depth maps from images&lt;&#x2F;li&gt;
&lt;li&gt;An in-DCC interface for image importing in Blender&lt;&#x2F;li&gt;
&lt;li&gt;Some code to tie everything together and actually create the object&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;using-docker-with-gpu-passthrough-for-fast-depth-computation&quot;&gt;Using Docker with GPU-passthrough for fast depth computation&lt;&#x2F;h3&gt;
&lt;p&gt;I happen to have grabbed myself an NVIDIA graphics card with around 4800 CUDA cores last year with the plan of using it for 3D rendering and machine learning experimentation, so my top priority was to make sure I could actually use it for this project.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily, NVIDIA has a solution for doing just this through their project called the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NVIDIA&#x2F;nvidia-docker&quot;&gt;NVIDIA Container Toolkit&lt;&#x2F;a&gt; (aka &lt;code&gt;nvidia-docker&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The NVIDIA Container Toolkit allows users to build and run GPU accelerated Docker containers. The toolkit includes a container runtime library and utilities to automatically configure containers to leverage NVIDIA GPUs.&lt;br&gt;
[source: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NVIDIA&#x2F;nvidia-docker#introduction&quot;&gt;NVIDIA&lt;&#x2F;a&gt;]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Essentially, this toolkit leverages an existing Docker Engine on a host, and provides a bit of a &amp;quot;side channel&amp;quot; for containers with the appropriate client software to access the Host&#x27;s GPU resources.&lt;&#x2F;p&gt;
&lt;p&gt;Using the toolkit, I threw together a quick project called &lt;code&gt;midas-depth-solve&lt;&#x2F;code&gt; that provides a Docker container to run MiDaS through a little &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;midas-depth-solve&#x2F;blob&#x2F;master&#x2F;solve.py&quot;&gt;batch-processing wrapper script&lt;&#x2F;a&gt; I wrote. Simply provide a directory full of images in whatever format you&#x27;d like along with some configuration flags, and it will spit out each image as a grayscale depth map.&lt;&#x2F;p&gt;
&lt;div class=&quot;zola-github-card&quot; &gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ewpratten&amp;#x2F;midas-depth-solve&quot;&gt;
        &lt;img src=&quot;https:&#x2F;&#x2F;opengraph.githubassets.com&#x2F;1&#x2F;ewpratten&amp;#x2F;midas-depth-solve&quot; alt=&quot;GitHub: ewpratten&amp;#x2F;midas-depth-solve&quot;&gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;
&lt;br&gt;
&lt;p&gt;Information on how to use this container stand-alone yourself can be found in the project README.&lt;&#x2F;p&gt;
&lt;p&gt;An example of an output from MiDaS is shown below. I have boosted the exposure a lot to make it easier to see the depth levels. Generally, depth maps are low-contrast.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;monocular-blender&#x2F;exaggerated-depth.png&quot; alt=&quot;Example Depth Image&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-blender-plugin&quot;&gt;The Blender plugin&lt;&#x2F;h3&gt;
&lt;p&gt;I have a personal project called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;dcc_scripts&quot;&gt;&lt;em&gt;Evan&#x27;s DCC Scripts&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; where I keep personal plugins for 3D software. &lt;&#x2F;p&gt;
&lt;p&gt;I decided to piggy-back off the pipeline infrastructure I have already set up there for this project. Thus, bringing my MiDaS tool into blender was as simple as creating a new QT GUI, and hooking it up to a custom operator. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;For anyone curious, my Blender plugins use QT for maximum interoperability with the rest of my toolset.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;monocular-blender&#x2F;blender-importer-window.png&quot;&gt;
&lt;p&gt;Plugin Dialog: &lt;em&gt;Import Monocular Image&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;actually-creating-textured-3d-meshes&quot;&gt;Actually creating textured 3D meshes&lt;&#x2F;h3&gt;
&lt;p&gt;The process for converting a depth map and texture to a 3D object is quite simple:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Create a plane (this can be done through &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.blender.org&#x2F;manual&#x2F;en&#x2F;latest&#x2F;addons&#x2F;import_export&#x2F;images_as_planes.html&quot;&gt;&lt;em&gt;Images As Planes&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Subdivide the plane (I have been using 128 subdivisions, and it seems to work well)&lt;&#x2F;li&gt;
&lt;li&gt;Apply a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.blender.org&#x2F;manual&#x2F;en&#x2F;latest&#x2F;modeling&#x2F;modifiers&#x2F;deform&#x2F;displace.html&quot;&gt;&lt;em&gt;Displace Modifier&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; to the plane, using the depth map as the source texture, and configuring the modifier to work with UV coordinates&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;The first time I tried this, I encountered a slight issue with depth mapping:&lt;&#x2F;p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;monocular-blender&#x2F;ayo_bro.png&quot;&gt;
&lt;p&gt;A failed attempt&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;But then, I quickly figured out how to set up the displacement modifier, and got my expected result:&lt;&#x2F;p&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;monocular-blender&#x2F;ayo_displaced.png&quot;&gt;
&lt;p&gt;Displaced, untextured&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;td&gt;
&lt;td&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;monocular-blender&#x2F;ayo_textured.png&quot;&gt;
&lt;p&gt;Textured, viewed from the original camera position&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;&#x2F;td&gt;
&lt;&#x2F;tr&gt;
&lt;&#x2F;table&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;This whole project was a fun experiment with some tools that are designed for very different applications. I plan to continue refining the quality of the outputs of my plugin. I&#x27;ll likely look in to reducing un-needed subdivisions using &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;graphics.pixar.com&#x2F;opensubdiv&quot;&gt;OpenSubdiv&lt;&#x2F;a&gt; in the near future.&lt;&#x2F;p&gt;
&lt;p&gt;If you are interested in experimenting with my depth mapping plugin yourself, feel free to send me &lt;a href=&quot;mailto:contact@ewpratten.com&quot;&gt;an email&lt;&#x2F;a&gt; and I&#x27;ll help you set it up. Currently, my tools are Linux-exclusive.&lt;&#x2F;p&gt;
&lt;p&gt;And finally, a demo render:&lt;&#x2F;p&gt;
&lt;video style=&quot;max-width:100%;&quot; controls&gt;
&lt;source src=&quot;&#x2F;images&#x2F;posts&#x2F;monocular-blender&#x2F;demo_render.mp4&quot; type=&quot;video&#x2F;mp4&quot;&gt;
Your browser does not support the video tag.
&lt;&#x2F;video&gt; </description>
        </item>
        <item>
            <title>Unfinished projects and failed ideas</title>
            <pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/unfinished-projects/</link>
            <guid>https://ewpratten.com/blog/unfinished-projects/</guid>
            <description>&lt;p&gt;My &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&quot;&gt;GitHub profile&lt;&#x2F;a&gt; is a bit like an iceberg. At the time of writing, I have made nearly 8 and a half thousand commits to nearly a thousand repositories. Since July 2018, I have made an effort to go no more than 3 consecutive days without writing code, and I have only broken that streak 6 times (each of those being a 4-day break).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;unfinished-projects&#x2F;commit_history.png&quot; alt=&quot;My 2021 commit history&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I remember making myself a GitHub account back in 8th grade (August 16, 2016 to be exact). Ever since then, I have published &lt;em&gt;every single&lt;&#x2F;em&gt; personal project I have made to GitHub.&lt;&#x2F;p&gt;
&lt;p&gt;My goal at the time was simply to use GitHub as a free file storage platform for my little side-projects, but it ended up having two interesting side-effects:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;My profile is an accurate representation of my work, since it &lt;em&gt;is&lt;&#x2F;em&gt; my work. No filler or template projects needed!&lt;&#x2F;li&gt;
&lt;li&gt;You can see my progression as a programmer by looking through my timeline.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Since I send potential employers directly to my GitHub profile, I have a few rules for how I manage the account. The important one for this post is:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Only &lt;em&gt;finished&lt;&#x2F;em&gt; and &lt;em&gt;documented&lt;&#x2F;em&gt; projects are made public. (Some WIP projects may also be public for various reasons)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This means that while I currently have 476 &lt;em&gt;finished&lt;&#x2F;em&gt; personal projects (yes, I write a lot of code), I also have roughly the same number of unfinished projects that&#x27;ll likely never see the light of day.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;showcase&quot;&gt;Showcase&lt;&#x2F;h2&gt;
&lt;p&gt;My goal for this post is to showcase some of the interesting failed ideas I have had in the past. Before I get to the whole list, here are a few recent projects of mine that are worth mentioning in their own section:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-near-success&quot;&gt;A near success&lt;&#x2F;h3&gt;
&lt;p&gt;This is a project that may actually be finished some day, considering how its nearly production ready.&lt;&#x2F;p&gt;
&lt;p&gt;In mid-late 2021, I was building a custom graphics pipeline for some friends. After finishing work on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;ludum-dare-49&quot;&gt;&lt;strong&gt;[data::loss]&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;, a group of us started prototyping various concepts for future games. Continuing off of this, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;demilurii.art&quot;&gt;@demilurii&lt;&#x2F;a&gt; and I began looking at integrating 3D layout and rigging tools into our 2D asset pipeline.&lt;&#x2F;p&gt;
&lt;p&gt;Thus, &lt;code&gt;strangle&lt;&#x2F;code&gt; was born. Strangle is a little tool that allows super easy project and asset management through various tools using Pixar&#x27;s &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;graphics.pixar.com&#x2F;usd&#x2F;release&#x2F;index.html&quot;&gt;USD&lt;&#x2F;a&gt; as a data interchange format.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;strangle&lt;&#x2F;code&gt; can handle the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ephtracy.github.io&#x2F;&quot;&gt;MagicaVoxel&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.blender.org&#x2F;&quot;&gt;Blender&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.autodesk.ca&#x2F;en&#x2F;products&#x2F;maya&#x2F;overview&quot;&gt;Maya 2022&lt;&#x2F;a&gt;, and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.sidefx.com&#x2F;&quot;&gt;Houdini&lt;&#x2F;a&gt; DCCs in a layering approach, where each DCC is used to add their specialty to an asset. This means that magica could be used for modeling, blender for texturing and shading, maya for layout, rigging and animation, and houdini for lighting and FX.&lt;&#x2F;p&gt;
&lt;p&gt;This whole pipeline works flawlessly, but the tooling was never released due to some less-than-ideal design choices in how the tools interface with each other across OSes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-public-failure&quot;&gt;A public failure&lt;&#x2F;h3&gt;
&lt;p&gt;I actually published one of my failed projects as reference material for other developers.&lt;&#x2F;p&gt;
&lt;div class=&quot;zola-github-card&quot; &gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ewpratten&amp;#x2F;animal-loader&quot;&gt;
        &lt;img src=&quot;https:&#x2F;&#x2F;opengraph.githubassets.com&#x2F;1&#x2F;ewpratten&amp;#x2F;animal-loader&quot; alt=&quot;GitHub: ewpratten&amp;#x2F;animal-loader&quot;&gt;
    &lt;&#x2F;a&gt;
&lt;&#x2F;div&gt;
&lt;br&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;animal-loader&lt;&#x2F;code&gt; (A not-so-acronym for &amp;quot;A Native Mod Loader&amp;quot;) is an experimental, unfinished project to allow the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kleientertainment&#x2F;&quot;&gt;@kleientertainment&lt;&#x2F;a&gt; games &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.klei.com&#x2F;games&#x2F;dont-starve&quot;&gt;Don&#x27;t Starve&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.klei.com&#x2F;games&#x2F;dont-starve-together&quot;&gt;Don&#x27;t Starve Together&lt;&#x2F;a&gt; to load native mods written in rust, and support WebAssembly plugins.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;After starting work on this project, I learned that the game I was attempting to mod was never compiled with support for dynamic library loading through its LUA interface, so I was unable to continue without considerable effort.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-little-bit-of-iot-hacking&quot;&gt;A little bit of IOT hacking&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;mitechlib&lt;&#x2F;code&gt;, another unfinished project of mine, is a Rust library that allows me to programmatically interface with the laundry machines in the building I live in.&lt;&#x2F;p&gt;
&lt;p&gt;The only reason it exists is because I thought it would be funny to walk into a laundry room, and wash my clothes with a laptop connected to a washing machine.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-list&quot;&gt;The list&lt;&#x2F;h2&gt;
&lt;p&gt;With the power of APIs, I threw together a little GraphQL query to grab all my private repos:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;graphql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-graphql &quot;&gt;&lt;code class=&quot;language-graphql&quot; data-lang=&quot;graphql&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;query &lt;&#x2F;span&gt;&lt;span&gt;{ 
&lt;&#x2F;span&gt;&lt;span&gt;  viewer { 
&lt;&#x2F;span&gt;&lt;span&gt;    repositories (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;privacy&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;PRIVATE&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;after&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;      edges {
&lt;&#x2F;span&gt;&lt;span&gt;        node {
&lt;&#x2F;span&gt;&lt;span&gt;          name
&lt;&#x2F;span&gt;&lt;span&gt;          description
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;      pageInfo {
&lt;&#x2F;span&gt;&lt;span&gt;        endCursor
&lt;&#x2F;span&gt;&lt;span&gt;      }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I then vetted the list a bit, and converted it to a web-ready format.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the new and improved list of my project ideas that never saw the light of day:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CardStudio&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tool for working with various RFID cards using Proxmark devices&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;proxmark-rs&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A Proxmark3 client library for Rust&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;render-test&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;An experimental game that only uses ASCII art for rendering&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ewpratten-commit-stats&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A private api for querying my GitHub ranking in Canada&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;dst-rpc&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Discord RPC (Rich Presence) support for @kleientertainment&#x27;s Don&#x27;t Starve Together (precursor to animal-loader)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;blink-camera-api&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A partial API client for Amazon&#x2F;Blink cameras&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;blink-client&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A simple client for Blink home security cameras&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;MultiAuth&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A development tool to allow a mix of premium and &amp;quot;offline mode&amp;quot; accounts to join a Minecraft server&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;multirss&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A minimalist RSS aggregator&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;dynmap-viewer&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A high-performance desktop client for Dynmap&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;wtf&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A utility for dumping large amounts of information about a host&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;microfetch&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;An over-simplistic portable command-line system information tool&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;mitechlib&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A library for interacting with Mitech smart connected laundry machines&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rc2d&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A 2D raycasting library for line-of-sight lighting in 2D games&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;MuchPerformance&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A minecraft performance modpack&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tiny-osc&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Morse code practice ocillator built on the Atmel ATtiny85 platform&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;EmmetMob&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A minecraft mod that turns my friend into an entity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;amprdns&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;An alternate DNS service, only avalible to 44net hosts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;betaroute&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A peer-to-peer routing tool (example implementation of &lt;a href=&quot;&#x2F;rfc&#x2F;modern-repeater-linking&quot;&gt;this RFC&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;MiwuStickers&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A custom sticker pack&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;shoot-to-interact&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A game with one option: shoot&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;protocrypt&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;An experimentation in XOR-ing data&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tinylink&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;An alternate repeater linking project&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;repeaterstack&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A full amateur radio simplex node &#x2F; remote repeater&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hamscan&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Frequency monitoring and web visualization based on &lt;code&gt;rtl_power&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;strangle&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Experimental voxel art pipeline&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;vox2usd&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Convert from the Magica Voxel file format to Universal Scene Description&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;usd-tutorial-files&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Scripts from Pixar&#x27;s USD tutorials&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;discolytica&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tool for tracking discord data into an analytics database&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ampr-minecraft&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Minecraft server for stress-testing an edge router&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;darkdns&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A standalone Docker-based DNS server that resolves lesser-recognized domains&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;r3_pipeline&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Video game and animation production pipeline (Used for &lt;strong&gt;[data::loss]&lt;&#x2F;strong&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;egf&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Evan&#x27;s Game Framework: Everything you need to build a 2D game&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tyler&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A custom &lt;code&gt;tiled&lt;&#x2F;code&gt; map loader&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sonr&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A voice chat control library built on Serenity and Songbird&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;discord-map&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Generates a graphviz map of all your Discord servers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ewc&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;C-compatible core library for quick development shortcuts in various languages&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cloth-toy&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;2D cloth simulation toy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;morsencode&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Experimental data encoding algorithm based around morse code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;kobodash&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A simple dashboard application for the Kobo Aura&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;gpu-avg&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Learning experiment for executing headless compute shaders&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rtiod&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Ray-Tracing In One Day: A random project to fill my time&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;spac&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Abstract mathematical types for library interop with easy-to-use interfaces&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;vec-convert&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A translation layer between the many Rust vector types&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;open-echo-proxy&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;An open-source echolink proxy server&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;discord-framework&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Easily build Discord bots by defining them using JSON data&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tinygl-rs&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Rust bindings to tinygl&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;network-monitor&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tool for logging network drops&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fileshare&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Personal file-sharing service&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;disco&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Simple network discoverability service&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;zndfrm&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A procedural audio engine&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;egui-raylib-rs&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Raylib integration for egui&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;error-adaptor&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Utility macros for wrapping external error types in Rust&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;xplre&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;XPLRE: A small 2d game&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;strands&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Basic and experimental physics toys&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;minecraft-wasmtime-experiment&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Experiment in loading plugins into Minecraft with Wasmtime&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;csrpc&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Crazy Simple RPC library&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tiny-analytics&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Small and efficient analytics engine for my personal projects&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ut&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Usage Tracking API&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;zzarl&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;VA3ZZA Amateur Radio Logging software&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;kx2-rs&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Rust library for serial control of the Elecraft KX2&#x2F;KX3 transceivers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;kxsvc&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Local gRPC service for programmatic control of Elecraft KX2 and KX3 transceivers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;nv&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;An environment management tool&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pathwarn&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A library for providing useful feedback about invalid paths passed to Rust applications&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tvdsb-student-api-rs&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Rust API for interacting with Thames Valley District School Board student information&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ludum-dare-48-rework&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A design rework of our Ludum Dare 48 game: Deep Breath&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ewpose&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;ewpratten&#x27;s positioning library&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;vision-types&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Datatypes and utils related to computer vision targets&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ampersand&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A build tool for Rust-based Android apps&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;gnn&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;An experiment in building a generic neural network&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pixyusb2-rs&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Rust bindings for &lt;code&gt;libpixyusb2&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;mdviz&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Multi-dimensional graphing tool&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;lightpanel&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tool for turning my computer monitors into configurable light sources for my room&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;improc&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Image processing and filtering in Rust&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;leapmotion-rs&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Rust bindings for the LeapMotion V2 API&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;wg-dash&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A dashboard for WireGuard servers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;lmvn&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A small tool for managing local maven repositories&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;packtool&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tool for managing Minecraft modpacks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;breaktrack&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A simple crawler for broken URLS on a webpage&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;stratosphere-r6&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tool for estimating Rainbow Six Siege match results&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;autojson&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Automatic JSON serialization and deserialization macros for Rust&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ZZALOG&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;VA3ZZA&#x27;s Amateur Radio logging software&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;repeatermon&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tool for monitoring repeater activity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;lcx&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;LaunchControlX: A custom macro pad&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git-time&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Graph time spent on a Git project&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;spawn-server&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Experimental Minecraft server infrastructure&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;aprtwt&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;APRS &amp;lt;-&amp;gt; Twitter bridge&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;raylib-tessellation&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A bridge between Lyon and Raylib, allowing easy GPU path tessellation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;slyce&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;An experiment in low-complexity game development&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GameTK&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A game development and 3D rendering framework&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;raylib-imgui-rs&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Raylib + Dear ImGui. In Rust&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cone-of-vision-demo&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A small app demonstrating cone-of-vision rendering in 2D&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;raylib-tweaks&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Some small tweaks and extensions on raylib to make it a little more Rust-friendly&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;bdl&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Small and fast HTTPS file downloader&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;burstfetch&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A very simple BitTorrent implementation&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tinyos&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tiny OS&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;nodelink&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Dockerized internet radio nodes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;path3d&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A demonstration of 3D path solving&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;repeater-info&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Web-based amateur radio repeater information&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;avr-rust-utils&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Some utility functions for working with Rust AVR code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;py-aprsfi-api&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;An aprs.fi API client for Python&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hambadges&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Embeddable badges for amatuer radio operators&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ham-status&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;An experimental dashboard for amatuer radio operators&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;logbook&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Clean and simple log-keeping program for amateur radio operators&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;propagation-app&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A simple android app for displaying HF and VHF propagation information&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tws-bs-x-morse&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Platform-agnostic Rust driver for the TWS-BS series high-power wireless transmitter modules. This driver is specifically for sending data encoded as morse code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;wxbcn&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A project to create a local area CW beacon providing temprature and light level informaiton&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;twentytwo&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A Minecraft server plugin that adds a new music disc type&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rayray-demo&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;3D rendering 3D objects, ray-traced in 3D. An experiment&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;maven-edge&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Tools to deploy personal maven edge servers anywhere, any time&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;mathutils-rs&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Rust port of my MathUtils library&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;basic-control&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Basic systems and controllers for Python&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;control-rs&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Rust ports of various basic control loops and systems&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;mathutils-py&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Python port of MathUtils&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;bionic&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A robotics framework&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;glass-engine&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A dead simple 2d game engine build from past experience&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;update-notifier&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A small Java library to provide software update notifications to users&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;plugin-core&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Core API shared across my Spigot &#x2F; PaperMC plugins&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rq&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A scalable rendering pipeline&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;jarcon&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A lot of recon in a little bit of jar (A tool for hiding telemetry services in Java applications)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;SDRInterface&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Web front-end for my WebSDR server&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;MapLink&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;The missing link between Dynmap and your Minecraft client&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;hookback&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Remote monitoring for Java applications&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ChatBridge&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Bridge Minecraft chat to a Discord channel&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;PlayerStats&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A Minecraft server plugin for tracking client-server activities&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sdrexplorer&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A web tool for exploring WebSDR servers globally&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tooltips&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Meta extensions to Java, allowing custom tooltips in source&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;VarStrings&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Non-constant String types for Java&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;LiteIO&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A lightweight HAL for systems I commonly use&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;openbandplan&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A web-viewer for ITU region 2 band plans&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;baremetal-avr&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;C++ tools for working with AVR microprocessors&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;AutoBCN&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Simple CW beacon driver&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;repeaterbook2gqrx&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tool for exporting a list of repeaters from RepeaterBook as a GQRX bookmark file&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;koctl&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tool for interacting with Kobo hardware on-device&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;RayJava&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Raylib bindings to Java using cross-compiled JNI&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rayconsole&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A graphical debug console for use in Java RayLib applications&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;codestyle.css&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;CodeStyle is a small CSS+JS project I built to nicely style Kramdown code blocks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;toy.social&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A personal learning project where I create a simple social platform for sharing text-based posts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;nativetools&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;My personal toolchain for developing code using the Java Native Interface&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rules_teensy&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A collection of Bazel rules for the teensy microcontroller family&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;xlog&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Cross-platform PWA for logging radio contacts, and syncing between devices&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;open-london&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A simple API for querying data about the city of London Ontario&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;repeatermap&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;An interactive map showing VHF and UHF amateur radio repeaters throuought the world&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;robolib&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A Python library containing various tools I developed during my time in highschool robotics&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;no-wurst-logo&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A small fabric mod to completely disable the Wurst client logo&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;quicksds&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A small Python library that extends dataclasses to allow packing and unpacking&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;REGEXResolver&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A small and simple asset resolver for the Pixar USD framework, based on REGEX rules&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;flashbg&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Flash BattleGrounds is a fast-paced multiplayer arena battle game&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;amongus_hooks&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A Python library for interacting with a local instance of Among Us on a Windows host&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;mobile_cv_passthrough&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;An experimental Android app for running basic OpenCV video pipelines on-device&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;dynmap_heatmap&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A GUI tool to generate a real-time heatmap of the positions of Minecraft players via the Dynmap API&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;vscode-poetry&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio Code extension for the Poetry build tool&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;quickxor&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tool and file format for encoding and decoding data with an ASCII key&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fastrender&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Quick, simple, and easy to use graphics&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;launchlib&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Interact with MIDI controllers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;lp2joy&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Convert Novation Launchpad inputs to Joystick buttons&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;smtp-send&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tool for sending email using direct SMTP connection&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;backblaze&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Rendering improvements for Minecraft&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;thirdparty-mod-docs&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Automatic Javadoc generation for other people&#x27;s Minecraft mods&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;voxelmc-pipeline&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Sponge schematic -&amp;gt; VOX data processing pipeline&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;grafana-nt&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A Grafana datasource for NetworkTables servers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;snapfinder&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tool for scraping snapchat accounts out of instagram bios&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;randomart&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Generates SSH randomart from any file&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;mc-analytics&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tool for analyzing Minecraft server logs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;textual&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A web graphics engine based around visual story telling&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;offload&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Multi-host hardware interfaces with RPC-over-serial&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;combat-tracer&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Adds the &amp;quot;Tracing&amp;quot; enchantment to Minecraft, allowing the player to mark entities by hitting them&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;amongus-hacking&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Playing with the Among Us multiplayer protocol&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;remoduino&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A project to turn AVR-based Arduino devices into scriptable devices over UART&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;jekyll-wiki&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A small and lightweight jekyll wiki theme&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;coreserv&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Fast and easy minecraft server hosting inside a docker container&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;icebucket&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A small server-side plugin to allow players to add frost-walker to an iron bucket&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;playergraph&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Graph the vitals of every player on a Minecraft server in real time&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;mapcap&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tool for taking &amp;quot;screenshots&amp;quot; of a minecraft map by hooking into dynmap&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;shift3&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A fast re-implementation of https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;shift&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;dynfolio&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Dynfolio is a web tool for displaying your Instagram profile as a photography portfolio&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tinygc&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A small learning experiment in garbage collection&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;shotpredict&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;ShotPredict is a software library for predicting the trajectory of objects launched through the air&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;backblast&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;The UI&#x2F;UX framework I use for web frontends when I don&#x27;t want to do web work&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;obfuj&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A demonstration of visually obfuscating Java code&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;simple-sensor-fusion&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A small Java library and Android webapp for pose estimation of an FRC robot&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;SnapAbuse&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A script for quickly dealing with spam snapchat accounts to determine what they are trying to do.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fsession&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A simple library for sorting files based on the current session&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;sliding-arm-manipulation&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A project to design a system with a single jointed arm on a slider&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tapatalk-api&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Interact with tapatalk via Python&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;bust_scripts&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Experimental bustabit betting scripts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;celltrackd&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tool for tracking people based on their network connectivity&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;vessl&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;An experiment in isometric game development&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;statix&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Easily configurable and scriptable status bars&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tvdsb-student-life&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;The TVDSB Student Life app&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;rules_avr&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Bazel rules for build code using AVRC &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;roborank&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tool for ranking FRC teams&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;learning-drake&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Source code from my process of learning how to use DRAKE&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;driverstation&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A tool for transmitting X-Input data to robot controllers running FRCNetComm&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ewvector&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Vectors, Quantities, and Sizes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;yubiparse&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A simple library for parsing yubikey OTP strings&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tictacsolve&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A program for deciding the optimal move in tac-tac-toe for any given board state&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Rayzor2&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A faster implementation of the Rayzor rendering engine&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;libJames&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Query @rsninja722&#x27;s life from inside Python&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;PathChaser&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;An experiment in autonomous movement inside an urban environment&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pixypose&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;An experiment in pose estimation with computer vision&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pysnapcode&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Python scripts for working with snapcodes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;swarm&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A virtual experiment in swarm-based robotics&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;homebase&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A webapp for tracking meeting participants&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GhostStat&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Share your Google Fit or Apple HealthKit stats in SnapChat&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;snapterm&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Share your terminal to SnapChat&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;containerFIRST&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;An entire FRC software development toolsuite in a Docker container&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;pastefs&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A filesystem based around hosting your files in someone else&#x27;s cloud&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;guikit&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Build simple GUI programs in Java (an extension of PicoEngine)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;language-statistics&quot;&gt;Language statistics&lt;&#x2F;h2&gt;
&lt;p&gt;Wow! You made it to the end of the list!&lt;&#x2F;p&gt;
&lt;p&gt;As a reward, here are some language statistics for the project list above. This does not include all languages, just the first few I queried from GitHub off the top of my head.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;unfinished-projects&#x2F;lang_stats.svg&quot; alt=&quot;Language stats&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Scale Hop</title>
            <pubDate>Thu, 06 Jan 2022 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/evan-pratten/scale-hop/</link>
            <guid>https://ewpratten.com/music/evan-pratten/scale-hop/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;6tpUJQlZ1I7bWK4X4pwiOj?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;200&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;&lt;em&gt;Scale Hop&lt;&#x2F;em&gt; is available on most platforms. Notably:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;6tpUJQlZ1I7bWK4X4pwiOj&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;ca&#x2F;album&#x2F;scale-hop&#x2F;1611874192&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=EAL72AY7el4&amp;amp;list=OLAK5uy_mILCe3ZBl9c2fYq3gxRidVYW60CCl5ctg&quot;&gt;YouTube&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>A rusty guide to quaternions</title>
            <pubDate>Fri, 03 Dec 2021 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/quaternions/</link>
            <guid>https://ewpratten.com/blog/quaternions/</guid>
            <description>&lt;p&gt;The running joke in the graphics programming world is that nobody understands quaternions. These big scary math-filled types are always &lt;em&gt;someone else&#x27;s problem&lt;&#x2F;em&gt;. While quaternions &lt;del&gt;are&lt;&#x2F;del&gt; may be scary, they serve an important purpose in the world of computing as they&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Don&#x27;t suffer from &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Gimbal_lock&quot;&gt;Gimbal Lock&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Are extremely efficient to work with computationally&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;quaternions&#x2F;quaternion_meme.png&quot; alt=&quot;Quaternion Meme&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Gimbal lock is the loss of one degree of freedom in a three-dimensional, three-gimbal mechanism that occurs when the axes of two of the three gimbals are driven into a parallel configuration, &amp;quot;locking&amp;quot; the system into rotation in a degenerate two-dimensional space.&lt;br&gt;
[&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Gimbal_lock&quot;&gt;Wikipedia&lt;&#x2F;a&gt;]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Over the past few years, I have made it my personal goal to work with quaternions in my code as much as possible whenever applicable. This choice was partly to help me better understand quaternions, and partly to simply set my code apart from others due to the use of &lt;em&gt;&amp;quot;fancy math stuff&amp;quot;&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-this-post-for&quot;&gt;What is this post for?&lt;&#x2F;h2&gt;
&lt;p&gt;My goal here in writing about quaternions is to help explain the concept to other programmers in a fairly approachable way. &lt;&#x2F;p&gt;
&lt;p&gt;This post will prefer code snippets over complicated math, and will leave out some details not relavant to the normal use of quaternions in code. For a more in-depth look at quaternions, there are many complicated papers to be read on the topic, and they are all one easy Google search away. &lt;&#x2F;p&gt;
&lt;p&gt;As a final note before I get started, all code snippets will be centered around the Rust programming language (although easily translatable to anything else). I&#x27;ll also be making heavy use of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;nalgebra.org&#x2F;&quot;&gt;Nalgebra&lt;&#x2F;a&gt; by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dimforge.com&#x2F;&quot;&gt;Dimforge&lt;&#x2F;a&gt; for the actual mathematical implementations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prerequisite-knowledge-vectors&quot;&gt;Prerequisite knowledge: Vectors&lt;&#x2F;h2&gt;
&lt;p&gt;Most programmers already have a good grasp on at least the basics of vectors, but I was learning about quaternions in 10th grade, and had yet to even take a math class that covered them. Due to this, I&#x27;ll briefly cover vectors here as a refresher, and in case anyone else is in a similar situation to younger me.&lt;&#x2F;p&gt;
&lt;p&gt;N-dimensional vectors are expressed as a list of &lt;code&gt;N&lt;&#x2F;code&gt; real numbers. This is simply a point in space, except we tend to visualize vectors as arrows, and points as...well...points. All vectors start at the origin ($\big[\begin{smallmatrix}0 \\ 0\end{smallmatrix}\big]$ in $2$ dimensions for example) and &amp;quot;point to&amp;quot; the coordinate denoted by the vector.&lt;&#x2F;p&gt;
&lt;p&gt;Importantly, vectors cannot start anywhere other than the origin. If you want to do that, you&#x27;d need to express a vector as two seperate vectors (a start, and an end). This definition is a &lt;em&gt;line segment&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;LineSegment2D {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;: Vector2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;: Vector2&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With this data structure, we could define a &amp;quot;vector&amp;quot; (line) starting at $\big[\begin{smallmatrix}1 \\ 2\end{smallmatrix}\big]$ and ending at $\big[\begin{smallmatrix}3 \\ 4\end{smallmatrix}\big]$ as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; line = LineSegment2D {
&lt;&#x2F;span&gt;&lt;span&gt;    start: Vector2::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    end: Vector2::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4.0&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;an-intro-to-quaternions&quot;&gt;An intro to quaternions&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;In mathematics, the quaternion number system extends the complex numbers. Quaternions were first described by Irish mathematician William Rowan Hamilton in 1843 and applied to mechanics in three-dimensional space.&lt;br&gt;
[&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Quaternion&quot;&gt;Wikipedia&lt;&#x2F;a&gt;]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Quaternions are essentially 4-dimensional numbers consisting of one real, and three imaginary components. They are expressed with the components $w$, $i$, $j$, and $k$. So far, this sounds pretty scary, but it is a lot simpler to deal with when you remember mathematicians like overcomplicating their variable names 😉&lt;&#x2F;p&gt;
&lt;p&gt;The following is a slightly modified version of the quaternion expression, made to express the concept in a more computer-oriented manner:&lt;&#x2F;p&gt;
&lt;p&gt;$$
q = w + x \mathbf{i} + y \mathbf{j} + z \mathbf{k}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$i$, $j$, and $k$ can be interpreted as unit-vectors pointing along the three spatial axes.&lt;&#x2F;p&gt;
&lt;p&gt;You may notice the quaternion expression is split into two distinct parts: the &lt;em&gt;real&lt;&#x2F;em&gt; and &lt;em&gt;vector&lt;&#x2F;em&gt; parts:&lt;&#x2F;p&gt;
&lt;p&gt;$$
q = \overbrace{w}^{\text{real}} + \overbrace{x \mathbf{i} + y \mathbf{j} + z \mathbf{k}}^{\text{vector}}
$$&lt;&#x2F;p&gt;
&lt;p&gt;The real part is a single &lt;em&gt;real number&lt;&#x2F;em&gt;, and the vector part is simply a 3-dimensional vector ($x,y,z$) with some pesky imaginary basis vectors attached to the components ($i,j,k$). From a programming standpoint, we can simply ignore the imaginary numbers, and treat a quaternion as a structure similar to the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Don&amp;#39;t actually implement a quaternion this way
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This is just to show how I imagine them when working with them
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;Quaternion {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;real&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;: Vector3&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An important fact to keep in mind is that quaternions can &lt;em&gt;and will&lt;&#x2F;em&gt; be found in their normalized form, where all the coefficients (real and vector) are values between $-1$ and $1$.&lt;&#x2F;p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;quaternions&#x2F;quat_vec3.png&quot; style=&quot;max-width:300px;&quot;&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;quaternions-are-transformations&quot;&gt;Quaternions are transformations&lt;&#x2F;h2&gt;
&lt;p&gt;For the next few sections, there is a single important detail:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Quaternions are transformations&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Like everything else in this post, this statement is not true for all applications of quaternions, but is true for the two core uses in graphics programming: &lt;em&gt;rotations&lt;&#x2F;em&gt; and &lt;em&gt;translations&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;You can essentially treat a quaternion as an action applied to a 3-dimensional vector. For example, a quaternion that rotates $90^{\circ}$ around the $z$ axis, applied to the vector $\big[\begin{smallmatrix}1 \\ 0 \\ 0\end{smallmatrix}\big]$ would produce: $\big[\begin{smallmatrix}0 \\ -1 \\ 0\end{smallmatrix}\big]$. Similairly, a quaternion could move a vector to a new origin (turning it into a line segment). We will get to the second transformation in a bit.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;transforms-expressed-mathematically&quot;&gt;Transforms: expressed mathematically&lt;&#x2F;h3&gt;
&lt;p&gt;To transform any vector by a quaternion ($q$ in this case), you must first turn the vector into a &lt;em&gt;pure quaternion&lt;&#x2F;em&gt; (in this case, $k$):&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned}
v &amp;amp;= \begin{bmatrix} 1 \\ 2 \\ 3 \end{bmatrix} \\
k &amp;amp;= 0 + 1 \mathbf{i} + 2 \mathbf{j} + 3 \mathbf {k}
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;p&gt;As you can see, a pure quaternion is a quaternion with a real part of $0$ and a vector part equal to the vector it is being made of. &lt;&#x2F;p&gt;
&lt;p&gt;Next, you need the conjugate of the quaternion (which is called $q^*$). The following are both the expressions for a quaternion, and a conjugate quaternion:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\begin{aligned}
q &amp;amp;= w + x \mathbf{i} + y \mathbf{j} + z \mathbf{k} \\
q^* &amp;amp;= w - x \mathbf{i} - y \mathbf{j} - z \mathbf{k}
\end{aligned}
$$&lt;&#x2F;p&gt;
&lt;p&gt;With all the required parts, the transformed vector ($p$) is equal to:&lt;&#x2F;p&gt;
&lt;p&gt;$$
p = q^*kq
$$&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;&#x2F;strong&gt; Quaternion multiplicaiton is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Commutative_property&quot;&gt;noncommutative&lt;&#x2F;a&gt;, meaning that the order you multiply things &lt;em&gt;matters&lt;&#x2F;em&gt;. This is not normal multiplication.&lt;&#x2F;p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;quaternions&#x2F;quat_mul.jpg&quot;&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;expressing-a-rotation-with-a-quaternion&quot;&gt;Expressing a rotation with a quaternion&lt;&#x2F;h3&gt;
&lt;p&gt;An extremely intuitive way to work with rotations in general, and especially in the quaternion world, is via something called an &lt;em&gt;axis-angle&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The name is quite self-explanitory, but to describe it better, an axis-angle is made up of a 3-dimensional unit vector pointing in an arbitrary direction, and a single angle (in radians) describing the clockwise twist around that axis.&lt;&#x2F;p&gt;
&lt;p&gt;Conveniently, as I pointed out earlier, quaternions also work in the same way, with a $w$ value (essentially the angle), and a vector part (essentially the axis). In rust, we can construct a quaternion from an axis-angle as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; In this example, we will describe a rotation of
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 90 degrees around the positive Z axis
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; axis = Vector3::z_axis();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; angle = std::f32::consts::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;FRAC_PI_2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; quaternion = UnitQuaternion::from_axis_angle(&amp;amp;axis, angle);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, if we wanted to rotate the vector $\big[\begin{smallmatrix}1 \\ 2 \\ 3\end{smallmatrix}\big]$ by &lt;code&gt;quaternion&lt;&#x2F;code&gt;, we could simply write:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; rotated_vector = quaternion.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;transform_vector&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;Vector3::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3.0&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;expressing-a-translation-and-a-rotation-with-a-quaternion&quot;&gt;Expressing a translation &lt;em&gt;and&lt;&#x2F;em&gt; a rotation with a quaternion&lt;&#x2F;h3&gt;
&lt;h2 id=&quot;further-reading&quot;&gt;Further &amp;quot;reading&amp;quot;&lt;&#x2F;h2&gt;
&lt;p&gt;So, do you know what you are doing when it comes to quaternions now?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;No?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Well, I can&#x27;t say I&#x27;m surprised. Now that you have learned the basics of quaternions, I recommend working through &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.3blue1brown.com&#x2F;&quot;&gt;Grant Sanderson&lt;&#x2F;a&gt;&#x27;s videos on the topic:&lt;&#x2F;p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;426&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;zjMuIxRvygQ&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;
&lt;em&gt;ya, I&#x27;m not sure why I decided to fill this with memes either...&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Adventures in BGP: routing my own public IPv4 address space</title>
            <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/amprnet-bgp/</link>
            <guid>https://ewpratten.com/blog/amprnet-bgp/</guid>
            <description>&lt;p&gt;Your first, and possibly only question is likely: &lt;em&gt;&amp;quot;what?&amp;quot;&lt;&#x2F;em&gt;, and I forgive you for asking such a thing. As probably any reader of my posts knows very well, IPv4 address blocks are practically impossible to get, and more than impossible to get for personal use. To quickly clear things up, my address block is &lt;em&gt;not&lt;&#x2F;em&gt; for personal use, but in comparison to the majority of the internet&#x27;s existing address block owners, I am basically a single person holding on to a &lt;code&gt;&#x2F;24&lt;&#x2F;code&gt; subnet for dear life while the giants of large internet corporations are eating up everything around me.&lt;&#x2F;p&gt;
&lt;p&gt;Ok, ok, I&#x27;m sure you are here for actual technical talk, and not a history lesson, so here we go.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-do-you-even-get-ipv4-space&quot;&gt;How do you even get IPv4 space?&lt;&#x2F;h2&gt;
&lt;p&gt;These days, the minimum &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Border_Gateway_Protocol&quot;&gt;BGP&lt;&#x2F;a&gt;-routable IPv4 block is a &lt;code&gt;&#x2F;24&lt;&#x2F;code&gt; subnet, coming in at 255 addresses. One of these blocks auctions for prices starting around 15 thousand dollars USD. I&#x27;d say that&#x27;s slightly unachievable for a college student like me, but when I come to think about it, that&#x27;s still about the same as a year of tuition and housing, so... 👀&lt;&#x2F;p&gt;
&lt;p&gt;Alright, enough getting side-tracked. I&#x27;d rather pay $0 for some IP space if possible, and luckily for me, it is! I am a licensed &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Amateur_radio&quot;&gt;Amateur Radio operator&lt;&#x2F;a&gt;, and through this, I get to make use of a few cool license-restricted services run by and for other operators. One of such services is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;AMPRNet&quot;&gt;AMPRNet&lt;&#x2F;a&gt;, a &lt;code&gt;&#x2F;8&lt;&#x2F;code&gt; subnet of public IP space specifically assigned for Amateur Radio Digital Communications back in 1981, and self-administered by radio amateurs. The governing body of this subnet is the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ampr.org&#x2F;&quot;&gt;Amateur Radio Digital Communications&lt;&#x2F;a&gt; (ARDC) foundation. Through their web portal, with a manually-verified account, any amateur can request subnets or single addresses under the &lt;code&gt;44.0.0.0&#x2F;8&lt;&#x2F;code&gt; subnet.&lt;&#x2F;p&gt;
&lt;p&gt;There are, of course, restrictions to this which I will not cover in full here. The main restriction to keep in mind is: AMPRNet address space &lt;em&gt;must&lt;&#x2F;em&gt; be used for amateur-radio-related uses only, and generally must better the radio community in some way.&lt;&#x2F;p&gt;
&lt;p&gt;The primary justification for my allocation is that a large chunk of my addresses are being used to provide &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;secure.echolink.org&#x2F;&quot;&gt;Echolink&lt;&#x2F;a&gt; proxies that allow users behind firewalls to interact with the Echolink network. Other uses of my address space involve exposing software-defined radios to the internet, and repeater linking.&lt;&#x2F;p&gt;
&lt;h2&gt;RIP &lt;em class=&quot;gray&quot;&gt;(my free time)&lt;&#x2F;em&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The most common way users of AMPRNet route their allocated IP addresses to and from the public internet is via the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Routing_Information_Protocol&quot;&gt;RIP&lt;&#x2F;a&gt; protocol. RIP is one of the oldest routing protocols, and has the main downside of not being particularly scalable, as well as not being the preferred routing protocol for the internet for a long time.&lt;&#x2F;p&gt;
&lt;p&gt;The choice of RIP (specifically RIPv2) is not exactly surprising for a network as old as AMPRNet, but not exactly what I was looking for. With the conventional RIP setup used by almost all AMPRNet hosts, gateway servers are set up to subscribe to RIP broadcasts sent by the AMPRNet-Internet gateway (&lt;code&gt;amprgw.ucsd.edu&lt;&#x2F;code&gt;), located at the UCSD &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;San_Diego_Supercomputer_Center&quot;&gt;San Diego Supercomputer Center&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I tried setting up RIPv2-based routing on my gateway to start. I was allocated the &lt;code&gt;44.63.7.32&#x2F;29&lt;&#x2F;code&gt; address block to test this out with, and followed the guides on the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.ampr.org&#x2F;wiki&#x2F;Main_Page&quot;&gt;AMPRNet Wiki&lt;&#x2F;a&gt;, along with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.qsl.net&#x2F;kb9mwr&#x2F;wapr&#x2F;tcpip&#x2F;&quot;&gt;KB9MWR&#x27;s documentation&lt;&#x2F;a&gt; on the subject. I ran into &lt;em&gt;many&lt;&#x2F;em&gt; roadblocks through this method that absorbed many weekends of my life. The common issue between all of these roadblocks is lack of, or plain incorrect documentation. The AMPRNet Wiki seems to have an issue of minimal review. Many guides are lacking details and have spelling issues in important places.&lt;&#x2F;p&gt;
&lt;p&gt;Through piecing together broken and incomplete documentation, along with emails from the AMPRNet mailing list, I eventually got my gateway to route between my hosts and other hosts under the &lt;code&gt;44&#x2F;8&lt;&#x2F;code&gt; IP space, but never managed to get the public internet to see my hosts.&lt;&#x2F;p&gt;
&lt;p&gt;As a quick aside, before setting up RIP routing, I had my gateway connected to the highly experimental &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.ampr.org&#x2F;wiki&#x2F;AMPRNet_VPN&quot;&gt;AMPRNet VPN&lt;&#x2F;a&gt; service run by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.qrz.com&#x2F;db&#x2F;OHX&#x2F;OH7LZB&quot;&gt;OH7LZB&lt;&#x2F;a&gt;. This service allows all clients to access both AMPRNet and the internet, but does not route back to clients, and all clients are given dynamic IP addresses. Not optimal for any of the uses I outlined at the end of the last section.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;there-is-a-better-way&quot;&gt;There is a better way&lt;&#x2F;h2&gt;
&lt;p&gt;The AMPRNet documentation rather strongly tells users &lt;strong&gt;not&lt;&#x2F;strong&gt; to try routing their allocated IP space via the ubiquitous Border Gateway Protocol (BGP), and provides many solid reasons why. Of course, I took this as a bit of a challenge, and simply &lt;em&gt;did it anyways&lt;&#x2F;em&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Well, ok, it was not quite as simple as saying &amp;quot;no&amp;quot; and clicking a button, but this big scary piece of dark magic that is BGP was surprisingly easy to work with in the end. I had heard of BGP before from many great blog posts by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;benjojo.co.uk&#x2F;&quot;&gt;&lt;em&gt;Ben Cox&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; but I had never had the reason, time, or resources to even come close to touching it. After all, at the time of first learning about routing protocols, I was just a 9th grader.&lt;&#x2F;p&gt;
&lt;p&gt;I didn&#x27;t want to dive in to BGP blind and on my own, since I had read many horror stories of what can go wrong when you mess up your routes &lt;span class=&quot;gray&quot;&gt;&lt;em&gt;cough Facebook cough&lt;&#x2F;em&gt;&lt;&#x2F;span&gt;, so I began looking for help. I stumbled across &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;lobi.to&#x2F;&quot;&gt;2M0LOB&lt;&#x2F;a&gt;&#x27;s AMPRNet allocation, and sent an email asking for advice before hopping in the project. Thanks to 2M0LOB for some great pointers that got me started, and for teaching me about &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dn42.eu&#x2F;Home&quot;&gt;DN42&lt;&#x2F;a&gt;, a great resource for smoke-checking your BGP routing setups before throwing them into the real world.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-second-attempt&quot;&gt;A second attempt&lt;&#x2F;h2&gt;
&lt;p&gt;In the world of internet routing, you generally need four things:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A block of IP addresses of size &lt;code&gt;&#x2F;24&lt;&#x2F;code&gt; or larger&lt;&#x2F;li&gt;
&lt;li&gt;An &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Autonomous_system_(Internet)&quot;&gt;autonomous system number&lt;&#x2F;a&gt; (ASN)&lt;&#x2F;li&gt;
&lt;li&gt;A gateway server&lt;&#x2F;li&gt;
&lt;li&gt;Peers to announce your routes to&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;requesting-an-ip-allocation&quot;&gt;Requesting an IP allocation&lt;&#x2F;h3&gt;
&lt;p&gt;My existing AMPRNet allocation was a &lt;code&gt;&#x2F;29&lt;&#x2F;code&gt; block which, due to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Classless_Inter-Domain_Routing#CIDR_notation&quot;&gt;CIDR Notation&lt;&#x2F;a&gt; being clever, is &lt;em&gt;smaller&lt;&#x2F;em&gt; than a &lt;code&gt;&#x2F;24&lt;&#x2F;code&gt;. Thus, I had to request a larger IP block for myself. The process for requesting a BGP-routable &lt;code&gt;&#x2F;24&lt;&#x2F;code&gt; from ARDC is a bit different than the standard allocation request process. Firstly, all BGP allocations must be requested under &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;portal.ampr.org&#x2F;networks.php?a=region&amp;amp;id=162&quot;&gt;&lt;code&gt;44.31.0.0&#x2F;16&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, which is the &amp;quot;BGP Allocations&amp;quot; segment of &lt;code&gt;44&#x2F;8&lt;&#x2F;code&gt;. These BGP allocations fall under the &lt;code&gt;Direct&lt;&#x2F;code&gt; allocation type that the AMPRNet Wiki warns you &lt;em&gt;not&lt;&#x2F;em&gt; to use.&lt;&#x2F;p&gt;
&lt;p&gt;After filling out the usual allocation application, I was contacted by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;g1fef.co.uk&#x2F;&quot;&gt;G1FEF&lt;&#x2F;a&gt;, the IT Director of ARDC, with an extra document to fill out, then I was handed an Letter Of Authorization (LOA) and was ready to go!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;not-becoming-an-autonomous-system&quot;&gt;(Not) becoming an Autonomous System&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;An autonomous system (AS) is a collection of connected Internet Protocol (IP) routing prefixes under the control of one or more network operators [&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Autonomous_system_(Internet)&quot;&gt;Wikipedia&lt;&#x2F;a&gt;]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The idea behind becoming an Autonomous System is that you and your IP allocations are registered in a public coordinated database. These &amp;quot;databases&amp;quot; are managed by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Regional_Internet_registry&quot;&gt;Regional Internet Registries&lt;&#x2F;a&gt; (RIRs), and in my case as a Canadian, specifically the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;American_Registry_for_Internet_Numbers&quot;&gt;American Registry for Internet Numbers&lt;&#x2F;a&gt; (ARIN). &lt;&#x2F;p&gt;
&lt;p&gt;This is where I ran into a &lt;em&gt;slight&lt;&#x2F;em&gt; roadblock. Registering an Autonomous System under ARIN requires a membership, costing $250USD annually for a &lt;code&gt;&#x2F;24&lt;&#x2F;code&gt;, along with the requirement that all entities assigned an ASN must be registered organizations. I don&#x27;t have my own company, nor do I want to pay a large yearly fee for a side-project. &lt;&#x2F;p&gt;
&lt;p&gt;I decided &lt;em&gt;not&lt;&#x2F;em&gt; to register myself an Autonomous System.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;killing-three-birds-with-one-stone&quot;&gt;Killing three birds with one stone&lt;&#x2F;h3&gt;
&lt;p&gt;Bailing out on the second of four critical steps isn&#x27;t a great start, but having done my research beforehand, I had a fallback plan. A friendly &amp;quot;little&amp;quot; company called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.vultr.com&#x2F;&quot;&gt;Vultr&lt;&#x2F;a&gt; has a crazy good deal package that covers all three remaining requirements and more! Vultr provides:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Virtual Private Server hosting&lt;&#x2F;li&gt;
&lt;li&gt;The ability for clients to bring their own IP space for free&lt;&#x2F;li&gt;
&lt;li&gt;Private ASNs&lt;&#x2F;li&gt;
&lt;li&gt;Free BGP peering&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This means, for only $5USD per month (yes, $5) I get a gateway server, a private ASN, multiple BGP peers, and the added upside of their Canadian datacenter being literally 40km from where I live. My college is on the same internet exchange as my brand new gateway server, and they have a 10-gig fiber link running between them, so the latency for me to use this thing is insanely tiny.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bringing-it-all-together&quot;&gt;Bringing it all together&lt;&#x2F;h2&gt;
&lt;p&gt;Now equipped with everything I needed to route my &lt;code&gt;&#x2F;24&lt;&#x2F;code&gt; IP space, I was left with one last step: &lt;em&gt;actually doing it&lt;&#x2F;em&gt;. Back on the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;engineering.fb.com&#x2F;2021&#x2F;10&#x2F;05&#x2F;networking-traffic&#x2F;outage-details&#x2F;&quot;&gt;Facebook BGP&lt;&#x2F;a&gt; issues, I really didn&#x27;t want to screw this part up, so I once again went looking for help. Luckily after asking around my college, I was introduced to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.linkedin.com&#x2F;in&#x2F;felixgustavocarapaica&#x2F;&quot;&gt;Felix Carapaica&lt;&#x2F;a&gt;, Sheridan&#x27;s resident BGP expert.&lt;&#x2F;p&gt;
&lt;p&gt;My goal for this new network of mine was to have a single gateway server that exposes a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.wireguard.com&#x2F;&quot;&gt;Wireguard&lt;&#x2F;a&gt; server, where each VPN client is assigned a &lt;em&gt;public&lt;&#x2F;em&gt; static IP address. Felix was very helpful and provided me with instructions on simulating my entire networking setup in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.gns3.com&#x2F;&quot;&gt;GNS3&lt;&#x2F;a&gt;. Once I was satisfied with my test environment, I proceeded to replicate everything in real life on the gateway server, and it worked first try! Seriously. I know that never happens, but 🤷‍♂️&lt;&#x2F;p&gt;
&lt;p&gt;For anyone curious on what BGP routing on a Vultr VPS involves, check out &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.vultr.com&#x2F;docs&#x2F;configuring-bgp-on-vultr&quot;&gt;Vultr&#x27;s Documentation&lt;&#x2F;a&gt; on the matter.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;thanks&quot;&gt;Thanks&lt;&#x2F;h2&gt;
&lt;p&gt;Well, thats it! I am now the proud owner of a &lt;code&gt;&#x2F;24&lt;&#x2F;code&gt; block of public IPv4 address space, and am happily using it for all kinds of radio projects. It is unbelievably convenient to be able to use public addresses even for testing, just because I have them!&lt;&#x2F;p&gt;
&lt;!-- 
Wanting to see a real-life service using this IP space? Good news! If you are reading this article on `va3zza.com`, you are currently being served by `44.31.62.3`, one of my brand new addresses!

I also set up a bunch of monitoring software, so I can generate cool traffic and usage graphs like this:

&lt;img src=&quot;http:&#x2F;&#x2F;mrtg.router.va3zza.com&#x2F;localhost_wg0-day.png&quot; width=&quot;100%&quot; alt=&quot;Subnet Traffic Graph&quot;&gt;

Check out more info about the gateway itself [here](http:&#x2F;&#x2F;router.va3zza.com&#x2F;). --&gt;
&lt;p&gt;Once again, I&#x27;d like to thank Ben, 2M0LOB, G1FEF, and Felix for helping me through this process, and helping me get hands-on experience learning about a piece of critical internet infrastructure technology the very few other college students get to touch beyond a simulator.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>An overview of the tech on a complex FRC robot</title>
            <pubDate>Tue, 28 Sep 2021 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/frc-tech-reference/</link>
            <guid>https://ewpratten.com/blog/frc-tech-reference/</guid>
            <description>&lt;p&gt;This document is aimed at a small handful of people, but published publicly as reference material for anyone that needs it. All contents are highly specific to the FRC robotics electrical and programming environments.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ewpratten.com&#x2F;blog&#x2F;frc-tech-reference&#x2F;#table-of-contents&quot;&gt;Table of Contents&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ewpratten.com&#x2F;blog&#x2F;frc-tech-reference&#x2F;#types-of-devices&quot;&gt;Types of devices&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ewpratten.com&#x2F;blog&#x2F;frc-tech-reference&#x2F;#on-robot-computers&quot;&gt;On-robot computers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ewpratten.com&#x2F;blog&#x2F;frc-tech-reference&#x2F;#microcontrollers&quot;&gt;Microcontrollers&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ewpratten.com&#x2F;blog&#x2F;frc-tech-reference&#x2F;#peripherals&quot;&gt;Peripherals&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ewpratten.com&#x2F;blog&#x2F;frc-tech-reference&#x2F;#the-list-of-blinky-things&quot;&gt;&lt;em&gt;&amp;quot;The list of blinky things&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ewpratten.com&#x2F;blog&#x2F;frc-tech-reference&#x2F;#openmesh-radios&quot;&gt;OpenMesh Radios&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ewpratten.com&#x2F;blog&#x2F;frc-tech-reference&#x2F;#datasheets&quot;&gt;Datasheets&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ewpratten.com&#x2F;blog&#x2F;frc-tech-reference&#x2F;#reference-material&quot;&gt;Reference Material&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;types-of-devices&quot;&gt;Types of devices&lt;&#x2F;h2&gt;
&lt;p&gt;There are three types of devices found on an FRC robot:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Computers&lt;&#x2F;li&gt;
&lt;li&gt;Microcontrollers&lt;&#x2F;li&gt;
&lt;li&gt;Peripherals&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;on-robot-computers&quot;&gt;On-robot computers&lt;&#x2F;h3&gt;
&lt;p&gt;The main computer on-robot is of course the roboRIO. The roboRIO is a standard &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.linuxfoundation.org&#x2F;blog&#x2F;intro-to-real-time-linux-for-embedded-developers&#x2F;&quot;&gt;Real-Time Linux&lt;&#x2F;a&gt; device running a custom Kernel, built on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;BusyBox&quot;&gt;Busybox&lt;&#x2F;a&gt;. The main system users are &lt;code&gt;admin&lt;&#x2F;code&gt; (the administrative user with full system write access), and &lt;code&gt;lvuser&lt;&#x2F;code&gt; (this user is the one that executes the robot program).&lt;&#x2F;p&gt;
&lt;p&gt;If you SSH into the roboRIO (&lt;code&gt;ssh admin@10.TE.AM.2&lt;&#x2F;code&gt;), and navigate to &lt;code&gt;&#x2F;home&#x2F;lvuser&#x2F;&lt;&#x2F;code&gt;, you will find the robot program (probably a &lt;code&gt;.jar&lt;&#x2F;code&gt;), along with the &lt;code&gt;deploy&lt;&#x2F;code&gt; folder, and a script that starts it all. You can stick anything in this script and it will run when the roboRIO boots.&lt;&#x2F;p&gt;
&lt;p&gt;Other on-robot computers include the Limelight (which is just a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.raspberrypi.org&#x2F;products&#x2F;compute-module-3-plus&#x2F;&quot;&gt;Raspberry Pi Compute Module v3&lt;&#x2F;a&gt;), the router (although you can&#x27;t really run custom code on it), and any Raspberry Pis that might be used.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;microcontrollers&quot;&gt;Microcontrollers&lt;&#x2F;h3&gt;
&lt;p&gt;Aside from the obvious, Arduinos, other on-board microcontrollers include any CTRE devices or &amp;quot;smart&amp;quot; REV devices. Each speed controller and control module is running some pre-compiled firmware on its own. Some of these devices (like the Talon SRX and the Spark Max) allow us to push custom code to them at runtime (like an off-board control loop) over the CAN bus. The NavX is also a microcontroller, communicating over Serial-over-MXP.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;peripherals&quot;&gt;Peripherals&lt;&#x2F;h3&gt;
&lt;p&gt;Things like AD Gyroscopes, buttons, rangefinders, color sensors, etc. are all dumb peripherals. These behave exactly like any device you would connect to an Arduino.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-list-of-blinky-things&quot;&gt;&lt;em&gt;&amp;quot;The list of blinky things&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;em&gt;list of blinky things&lt;&#x2F;em&gt; is a list I came up with years ago for quickly answering the question of &amp;quot;what does that blinking light mean?&amp;quot;.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CTR Electronics
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ctr-electronics.com&#x2F;downloads&#x2F;pdf&#x2F;PDP%20User&amp;#x27;s%20Guide.pdf#%5B%7B%22num%22%3A60%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C69%2C696%2C0%5D&quot;&gt;Power Distribution Panel&lt;&#x2F;a&gt; (2015-2022?)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ctr-electronics.com&#x2F;VRM%20User&amp;#x27;s%20Guide.pdf#%5B%7B%22num%22%3A28%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C69%2C696%2C0%5D&quot;&gt;Voltage Regulation Module&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ctr-electronics.com&#x2F;downloads&#x2F;pdf&#x2F;PCM%20User&amp;#x27;s%20Guide.pdf#%5B%7B%22num%22%3A51%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C69%2C720%2C0%5D&quot;&gt;Pneumatic Control Module&lt;&#x2F;a&gt; (multiple pages)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.ctr-electronics.com&#x2F;Talon%20SRX%20User&amp;#x27;s%20Guide.pdf#%5B%7B%22num%22%3A93%2C%22gen%22%3A0%7D%2C%7B%22name%22%3A%22XYZ%22%7D%2C33%2C705%2C0%5D&quot;&gt;Talon SRX&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.ctr-electronics.com&#x2F;downloads&#x2F;pdf&#x2F;Victor%20SPX%20User&amp;#x27;s%20Guide.pdf#page=11&amp;amp;zoom=auto,-207,705&quot;&gt;Victor SPX&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Rev Robotics
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.revrobotics.com&#x2F;sparkmax&#x2F;status-led&quot;&gt;Spark Max&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.revrobotics.com&#x2F;content&#x2F;docs&#x2F;REV-11-1200-UM.pdf#page=14&amp;amp;zoom=auto,2,756&quot;&gt;Spark&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;National Instruments
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ni.com&#x2F;pdf&#x2F;manuals&#x2F;374474a.pdf#G45855&quot;&gt;roboRIO&lt;&#x2F;a&gt; (multiple pages)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;openmesh-radios&quot;&gt;OpenMesh Radios&lt;&#x2F;h2&gt;
&lt;p&gt;The current fleet of robots are using OpenMesh radios for 2.4GHz and 5GHz communication. &lt;&#x2F;p&gt;
&lt;p&gt;These radios come in two models (found on the bottom of the radio). First is the &lt;code&gt;OM5P-AN&lt;&#x2F;code&gt; and the second is the &lt;code&gt;OM5P-AC&lt;&#x2F;code&gt;. The &lt;code&gt;AC&lt;&#x2F;code&gt; variant is the newer (and faster) model. It is also more locked down. You can flash OpenWRT to the &lt;code&gt;AN&lt;&#x2F;code&gt; model and use it as a practice field router (which I have done before).&lt;&#x2F;p&gt;
&lt;p&gt;These are consumer routers designed for home use! They are &lt;strong&gt;not&lt;&#x2F;strong&gt; in any way good at robotics applications. You will want to follow &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.wpilib.org&#x2F;en&#x2F;stable&#x2F;docs&#x2F;networking&#x2F;networking-introduction&#x2F;om5p-ac-radio-modification.html&quot;&gt;this guide&lt;&#x2F;a&gt; to protect your routers before putting them on the field.&lt;&#x2F;p&gt;
&lt;p&gt;For information on flashing routers, see &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.wpilib.org&#x2F;en&#x2F;stable&#x2F;docs&#x2F;zero-to-robot&#x2F;step-3&#x2F;radio-programming.html#programming-your-radio&quot;&gt;here&lt;&#x2F;a&gt;. Routers from Israeli teams will be incompatible with any north american tech, so they need to be reflashed to match our regulations.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;datasheets&quot;&gt;Datasheets&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Manufacturer&lt;&#x2F;th&gt;&lt;th&gt;Model&lt;&#x2F;th&gt;&lt;th&gt;Datasheet&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;OpenMesh&lt;&#x2F;td&gt;&lt;td&gt;OM5P-AC&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.openmesh.com&#x2F;resource-downloads&#x2F;OM-Series-Datasheet.pdf&quot;&gt;PDF&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CTR Electronics&lt;&#x2F;td&gt;&lt;td&gt;Power Distribution Panel&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ctr-electronics.com&#x2F;downloads&#x2F;pdf&#x2F;PDP%20User&amp;#x27;s%20Guide.pdf&quot;&gt;PDF&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CTR Electronics&lt;&#x2F;td&gt;&lt;td&gt;Voltage Regulation Module&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ctr-electronics.com&#x2F;VRM%20User&amp;#x27;s%20Guide.pdf&quot;&gt;PDF&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CTR Electronics&lt;&#x2F;td&gt;&lt;td&gt;Pneumatic Control Module&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ctr-electronics.com&#x2F;downloads&#x2F;pdf&#x2F;PCM%20User&amp;#x27;s%20Guide.pdf&quot;&gt;PDF&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CTR Electronics&lt;&#x2F;td&gt;&lt;td&gt;Talon SRX&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ctr-electronics.com&#x2F;Talon%20SRX%20User&amp;#x27;s%20Guide.pdf&quot;&gt;PDF&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;CTR Electronics&lt;&#x2F;td&gt;&lt;td&gt;Victor SPX&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ctr-electronics.com&#x2F;downloads&#x2F;pdf&#x2F;Victor%20SPX%20User&amp;#x27;s%20Guide.pdf&quot;&gt;PDF&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Rev Robotics&lt;&#x2F;td&gt;&lt;td&gt;Spark Max&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.revrobotics.com&#x2F;sparkmax&#x2F;status-led&quot;&gt;HTML&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Rev Robotics&lt;&#x2F;td&gt;&lt;td&gt;Spark&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.revrobotics.com&#x2F;content&#x2F;docs&#x2F;REV-11-1200-UM.pdf&quot;&gt;PDF&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;National Instruments&lt;&#x2F;td&gt;&lt;td&gt;roboRIO&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ni.com&#x2F;pdf&#x2F;manuals&#x2F;374474a.pdf&quot;&gt;PDF&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Kauai Labs&lt;&#x2F;td&gt;&lt;td&gt;NavX-MXP&lt;&#x2F;td&gt;&lt;td&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pdocs.kauailabs.com&#x2F;navx-mxp&#x2F;wp-content&#x2F;uploads&#x2F;2020&#x2F;09&#x2F;navx2-mxp_robotics_navigation_sensor_user_guide-8.pdf&quot;&gt;PDF&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;More devices can be found in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.wpilib.org&#x2F;en&#x2F;stable&#x2F;docs&#x2F;controls-overviews&#x2F;control-system-hardware.html&quot;&gt;this list&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reference-material&quot;&gt;Reference Material&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;CAN_bus&quot;&gt;The CAN Bus and Protocol&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Serial_Peripheral_Interface&quot;&gt;The SPI Communication Standard&lt;&#x2F;a&gt; used by many peripherals&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pulse-width_modulation&quot;&gt;Pulse Width Modulation&lt;&#x2F;a&gt; (used by some speed controllers and encoders)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Rotary_encoder&quot;&gt;Rotary Encoders&lt;&#x2F;a&gt; (keep in mind, we almost exclusively use &lt;strong&gt;Hall Effect + Quadrature + Incremental&lt;&#x2F;strong&gt; encoders)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Configuring a native SSH server on Windows 10</title>
            <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/windows-ssh/</link>
            <guid>https://ewpratten.com/blog/windows-ssh/</guid>
            <description>&lt;p&gt;Between work, school, and just helping various people out with things, I end up needing to quickly spin up SSH servers on windows machines &lt;em&gt;a lot&lt;&#x2F;em&gt;. Despite what you might think, this functionality is actually built right in to Windows 10, and fairly easy to enable.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;enabling-the-openssh-service&quot;&gt;Enabling the OpenSSH service&lt;&#x2F;h2&gt;
&lt;p&gt;Just like many Linux machines, Windows uses the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.openssh.com&#x2F;&quot;&gt;OpenSSH&lt;&#x2F;a&gt; server internally. This used to be controlled by a feature flag in the &lt;em&gt;&amp;quot;Turn Windows features on or off&amp;quot;&lt;&#x2F;em&gt; dialog, but this can now be done through &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;PowerShell&quot;&gt;PowerShell&lt;&#x2F;a&gt; (as a local administrator).&lt;&#x2F;p&gt;
&lt;p&gt;First, we need to add the OpenSSH capability to Windows, and enable the service:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Add the capability
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Add-WindowsCapability &lt;&#x2F;span&gt;&lt;span&gt;-Online -Name OpenSSH.Server~~~~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Start-Service&lt;&#x2F;span&gt;&lt;span&gt; sshd
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Start on boot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Set-Service &lt;&#x2F;span&gt;&lt;span&gt;-Name sshd -StartupType &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Automatic&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This should also automatically configure the firewall, but you can manually verify this and enable the rules yourself if needed:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Check firewall
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Get-NetFirewallRule &lt;&#x2F;span&gt;&lt;span&gt;-Name *ssh*
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# If needed, add a firewall rule
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;New-NetFirewallRule &lt;&#x2F;span&gt;&lt;span&gt;-Name sshd -DisplayName &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;OpenSSH Server (sshd)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;22
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;setting-up-key-based-authentication&quot;&gt;Setting up key-based authentication&lt;&#x2F;h2&gt;
&lt;p&gt;While we are on the Windows side, it is a good idea to install Git and Git Bash from &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;downloads&quot;&gt;here&lt;&#x2F;a&gt;. Then, inside Git Bash, run the following to generate SSH keys on the Windows server:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Generate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh-keygen.exe
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# View the public key
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.ssh&#x2F;id_rsa.pub
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On your client (for me, a Linux laptop), you must generate SSH keys, and copy the public key over to the Windows server.&lt;&#x2F;p&gt;
&lt;p&gt;The path for the file in Windows depends on your user type. Regular users append their keys to &lt;code&gt;C:\Users\&amp;lt;username&amp;gt;\.ssh\authorized_keys&lt;&#x2F;code&gt; (remembering to change the &lt;code&gt;&amp;lt;username&amp;gt;&lt;&#x2F;code&gt;), whereas local admins must append their keys to &lt;code&gt;C:\ProgramData\ssh\administrators_authorized_keys&lt;&#x2F;code&gt;, then update the permissions on that file with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;icacls.exe &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C:\ProgramData\ssh\administrators_authorized_keys&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;inheritance:r &#x2F;grant &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Administrators:F&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;grant &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SYSTEM:F&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;configuring-ssh-clients-to-automatically-launch-bash&quot;&gt;Configuring SSH clients to automatically launch bash&lt;&#x2F;h2&gt;
&lt;p&gt;By default, incoming SSH connections spawn a &lt;code&gt;cmd.exe&lt;&#x2F;code&gt; shell. I much prefer being dropped straight into &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Bash_(Unix_shell)&quot;&gt;Bash&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To do this, you must modify your client&#x27;s &lt;code&gt;~&#x2F;.ssh&#x2F;config&lt;&#x2F;code&gt; file to add a &lt;code&gt;RemoteCommand&lt;&#x2F;code&gt;. An example for one of my machines looks similar to:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Host hostname
&lt;&#x2F;span&gt;&lt;span&gt;	HostName hostname.example.com
&lt;&#x2F;span&gt;&lt;span&gt;	RequestTTY force
&lt;&#x2F;span&gt;&lt;span&gt;	User ewpratten
&lt;&#x2F;span&gt;&lt;span&gt;	RemoteCommand powershell &amp;quot;&amp;amp; &amp;#39;C:\Program Files\Git\bin\sh.exe&amp;#39; --login&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The last line is the actual command to launch Bash (through PowerShell).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;uninstalling-and-disabling-openssh&quot;&gt;Uninstalling and disabling OpenSSH&lt;&#x2F;h2&gt;
&lt;p&gt;This is a simple one-liner:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Remove-WindowsCapability &lt;&#x2F;span&gt;&lt;span&gt;-Online -Name OpenSSH.Server~~~~&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
        <item>
            <title>Building a cheap APRS digipeater</title>
            <pubDate>Tue, 20 Apr 2021 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/direwolf-aprs/</link>
            <guid>https://ewpratten.com/blog/direwolf-aprs/</guid>
            <description>&lt;p&gt;&lt;em&gt;&lt;strong&gt;WARNING:&lt;&#x2F;strong&gt; To replicate this project, you &lt;strong&gt;must&lt;&#x2F;strong&gt; be the holder of an amateur radio license in your country&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I have an extra &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;baofengtech.com&#x2F;product&#x2F;uv-5r&#x2F;&quot;&gt;Baofeng UV-5R&lt;&#x2F;a&gt; lying around, and had no idea what to use it for. The original plan was to set up a UHF simplex repeater with internet linking capabilities, but that project was set back due to my lack of time to figure out how to set up the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Asterisk_(PBX)&quot;&gt;Asterisk PBX&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After giving up on Asterisk, I was left without ideas once again. That is, until a few days ago when I remembered that the large &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.aprs.org&#x2F;&quot;&gt;APRS&lt;&#x2F;a&gt; network exists, and is fairly easy to experiment with. I have some past experience with APRS, specifically the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.aprs-is.net&#x2F;&quot;&gt;APRS-IS&lt;&#x2F;a&gt; internet bridge. I have cron jobs running on a few of my computers that fetches their positions through &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Internet_geolocation&quot;&gt;geo-ip&lt;&#x2F;a&gt; and beacons this info (plus weather info if I feel like it) to the APRS network through APRS-IS. None of that setup has anything to do with radio though, so it feels like I&#x27;m not a &lt;em&gt;true APRS user&lt;&#x2F;em&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;A solution to both problems: set up a digipeater.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-my-radio-is-doing&quot;&gt;What my radio is doing&lt;&#x2F;h2&gt;
&lt;p&gt;To be specific, I am running much more than just a digipeater. This spare radio is also an APRS-IS &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.aprs-is.net&#x2F;IGating.aspx&quot;&gt;IGate&lt;&#x2F;a&gt;, and an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.aprs.org&#x2F;aprstt.html&quot;&gt;APRStt&lt;&#x2F;a&gt; bridge. The more important of these capabilities is APRStt.&lt;&#x2F;p&gt;
&lt;p&gt;APRStt is a standard originally designed for the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.aprs.org&#x2F;psat2.html&quot;&gt;PSAT2&lt;&#x2F;a&gt; satellite, that allows radio operators with non-APRS-compatible radios to send beacons using DTMF sequences. The encoding standard for doing this is not exactly user friendly in my opinion, but it works.&lt;&#x2F;p&gt;
&lt;p&gt;Combining these radio capabilities with some basic knowledge of the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Maidenhead_Locator_System&quot;&gt;Maidenhead Locator System&lt;&#x2F;a&gt; on my part allows me to go anywhere in the city with my HT and send beacons to the APRS network using DTMF. Pretty cool in my opinion.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setup-guide&quot;&gt;Setup Guide&lt;&#x2F;h2&gt;
&lt;p&gt;The following is a mostly complete guide on replicating my digipeater setup. You will have to do some extra reading to understand the configuration system.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;required-hardware&quot;&gt;Required hardware&lt;&#x2F;h3&gt;
&lt;p&gt;To set up a digipeater, you need a controller, a radio, and some hardware to connect the two. All of the parts I use are found below (I did not choose the most cost-effective listings here):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ebay.com&#x2F;itm&#x2F;193345669838&quot;&gt;Raspberry Pi 3B+&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;baofengtech.com&#x2F;product&#x2F;uv-5r&#x2F;&quot;&gt;Baofeng UB-5R&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ebay.com&#x2F;itm&#x2F;203355827559&quot;&gt;USB sound card&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;2x &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ebay.com&#x2F;itm&#x2F;402032141776&quot;&gt;3.5mm audio cables&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ebay.com&#x2F;itm&#x2F;202853095248&quot;&gt;2.5mm Male to 3.5mm Female adaptor&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ebay.com&#x2F;itm&#x2F;114771147582&quot;&gt;Single-channel relay&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Some female-to-female jumper cables (see &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ebay.com&#x2F;itm&#x2F;203350136236&quot;&gt;here&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;Solder and a soldering iron are also needed for cable modifications&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;compiling-dire-wolf&quot;&gt;Compiling Dire Wolf&lt;&#x2F;h3&gt;
&lt;p&gt;Compiling and setting up the control software, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wb2osz&#x2F;direwolf&quot;&gt;Dire Wolf&lt;&#x2F;a&gt;, is pretty easy. The full guide on this process can be found &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wb2osz&#x2F;direwolf&#x2F;blob&#x2F;master&#x2F;doc&#x2F;Raspberry-Pi-APRS.pdf&quot;&gt;here&lt;&#x2F;a&gt;. I&#x27;ll summarize below:&lt;&#x2F;p&gt;
&lt;p&gt;On a fresh install of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.raspberrypi.org&#x2F;software&#x2F;operating-systems&#x2F;#raspberry-pi-os-32-bit&quot;&gt;Raspbian&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install cmake libasound2-dev libudev-dev git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;wb2osz&#x2F;direwolf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; direwolf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt; build &amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmake&lt;&#x2F;span&gt;&lt;span&gt; ..
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make -j4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; make install
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; install-conf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can now launch Dire Wolf by running &lt;code&gt;direwolf&lt;&#x2F;code&gt;. See the full guide for info on staring on boot.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;building-a-ptt-cable-for-the-baofeng-uv-5r&quot;&gt;Building a PTT cable for the Baofeng UV-5R&lt;&#x2F;h3&gt;
&lt;p&gt;Baofeng sells a proper &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;baofengtech.com&#x2F;product&#x2F;aprs-k1&#x2F;&quot;&gt;audio interface cable&lt;&#x2F;a&gt;, which will make this process easier, but it is not really needed if you have some basic soldering skills.&lt;&#x2F;p&gt;
&lt;p&gt;The push-to-talk system on most Baofeng radios works by shorting the ground of the mic cable to the ground of the speaker cable. Interestingly, the USB audio interface listed above automatically does this (aka. PTT is always enabled when the cables are plugged in). My quick solution is to use some wire strippers to open up the 3.5mm cable used for the microphone input, and snipping the ground line. I then just stick the relay in series with this snipped cable, and can enable and disable ground by triggering the relay.&lt;&#x2F;p&gt;
&lt;p&gt;Plugging the relay into &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.bigmessowires.com&#x2F;wp-content&#x2F;uploads&#x2F;2018&#x2F;05&#x2F;Raspberry-GPIO.jpg&quot;&gt;pin &lt;code&gt;GPIO14&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; of the Raspberry PI will let Dire Wolf have full control over the radio PTT.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;configuration&quot;&gt;Configuration&lt;&#x2F;h3&gt;
&lt;p&gt;The entire configuration process is outlined in the Dire Wolf &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wb2osz&#x2F;direwolf&#x2F;blob&#x2F;master&#x2F;doc&#x2F;User-Guide.pdf&quot;&gt;user manual&lt;&#x2F;a&gt;. Here are some additional notes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Set &lt;code&gt;PTT GPIO 14&lt;&#x2F;code&gt; in the &lt;code&gt;CHANNEL 0&lt;&#x2F;code&gt; section to enable hardware PTT using the relay&lt;&#x2F;li&gt;
&lt;li&gt;Set &lt;code&gt;DTMF&lt;&#x2F;code&gt; in the &lt;code&gt;CHANNEL 0&lt;&#x2F;code&gt; section to enable APRStt&lt;&#x2F;li&gt;
&lt;li&gt;Uncomment the &lt;code&gt;DIGIPEAT&lt;&#x2F;code&gt; configuration to enable digipeating&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;need-help&quot;&gt;Need help?&lt;&#x2F;h2&gt;
&lt;p&gt;If you happened to follow this guide and need more configuration help, &lt;a href=&quot;&#x2F;about&quot;&gt;send me a message&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>How I flashed QMK to my Vortex Core</title>
            <pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/qmk-vortex-core/</link>
            <guid>https://ewpratten.com/blog/qmk-vortex-core/</guid>
            <description>&lt;p&gt;Last fall, I &lt;a href=&quot;&#x2F;blog&#x2F;2020&#x2F;11&#x2F;06&#x2F;vortex-core&quot;&gt;purchased my first mechanical keyboard&lt;&#x2F;a&gt;, the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mechanicalkeyboards.com&#x2F;shop&#x2F;index.php?l=product_detail&amp;amp;p=3550&quot;&gt;Vortex Core&lt;&#x2F;a&gt;, and have been loving it ever since. Well, almost loving it. There are a few &amp;quot;quirks&amp;quot; of the keyboard that I wasn&#x27;t super fond of, like: occasionally not sending &lt;code&gt;KEY_UP&lt;&#x2F;code&gt; commands back to the computer, or the badly documented and maintained system for building custom layouts.&lt;&#x2F;p&gt;
&lt;p&gt;In my previous post on this keyboard, I had mentioned @ChaoticEnigma&#x27;s fork of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;qmk&#x2F;qmk_firmware&quot;&gt;QMK&lt;&#x2F;a&gt; for the core. This custom firmware had been sitting on my mind for a while, and I finally decided to try it out on my keyboard. This post will cover the process of loading QMK on to a non-supported Vortex Core keyboard.&lt;&#x2F;p&gt;
&lt;p&gt;The following are all the steps required to complete this process. Make sure to &lt;strong&gt;read them all before getting started&lt;&#x2F;strong&gt;. As per usual when I am outlining ways to modify hardware, you might brick your keyboard doing this so: &lt;em&gt;be careful&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ewpratten.com&#x2F;blog&#x2F;qmk-vortex-core&#x2F;#compiling-the-toolchain&quot;&gt;Compiling the toolchain&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ewpratten.com&#x2F;blog&#x2F;qmk-vortex-core&#x2F;#compiling-the-firmware&quot;&gt;Compiling the firmware&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ewpratten.com&#x2F;blog&#x2F;qmk-vortex-core&#x2F;#finding-debugging-hardware&quot;&gt;Finding debugging hardware&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ewpratten.com&#x2F;blog&#x2F;qmk-vortex-core&#x2F;#connecting-to-the-core-s-jtag-interface&quot;&gt;Connecting to the core&#x27;s JTAG interface&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ewpratten.com&#x2F;blog&#x2F;qmk-vortex-core&#x2F;#unlocking-the-keyboard&quot;&gt;Unlocking the keyboard&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ewpratten.com&#x2F;blog&#x2F;qmk-vortex-core&#x2F;#flashing-qmk&quot;&gt;Flashing QMK&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;compiling-the-toolchain&quot;&gt;Compiling the toolchain&lt;&#x2F;h2&gt;
&lt;p&gt;Firstly, you&#x27;ll need all the software tools required to interface with the keyboard. The following list contains GitHub links to everything needed (this is all for Linux of course):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ChaoticConundrum&#x2F;openocd-ht32&quot;&gt;OpenOCD patched with HT32 support&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pok3r-custom&#x2F;pok3rtool&quot;&gt;Commandline interface tool&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pok3r-custom&#x2F;pok3r_re_firmware&quot;&gt;Unlocked core firmware&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;openocd&quot;&gt;OpenOCD&lt;&#x2F;h3&gt;
&lt;p&gt;What is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;openocd.org&#x2F;&quot;&gt;OpenOCD&lt;&#x2F;a&gt;?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;OpenOCD is a free-software tool mainly used for on-chip debugging, in-system. programming and boundary-scan testing. OpenOCD supports flashing and. debugging a wide variety of platforms such as: ARMv5 through latest ARMv8. [source: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.debian.org&#x2F;OpenOCD&quot;&gt;Debian WIKI&lt;&#x2F;a&gt;]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;OpenOCD is a standard tool &#x2F; interface that allows you to use many different types of hardware debuggers interchangeably. It is a very useful project for tasks like this, where we will need to connect directly into an embedded chip via its debugging ports.&lt;&#x2F;p&gt;
&lt;p&gt;The link provided above for OpenOCD is actually a fork of the main project that specifically adds support for the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.keil.com&#x2F;dd2&#x2F;holtek&#x2F;ht32f1655&#x2F;&quot;&gt;Holtek HT32F165x&lt;&#x2F;a&gt; MCU (the chip that powers the keyboard).&lt;&#x2F;p&gt;
&lt;p&gt;After cloning the GitHub repo, the build process is fairly simple:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; openocd-ht32
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Install the build dependencies
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install build-essential pkg-config libtool
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Configure the build system
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;bootstrap
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# These arguments may change depending on the hardware debugger you are using. I use the ST-LinkV2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Check the official OpenOCD documentation for more information on this
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;configure --enable-stlink --disable-werror
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; make install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;pok3rtool&quot;&gt;Pok3rtool&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;pok3rtool&lt;&#x2F;code&gt; is the commandline interface tool designed specifically for interacting with the firmware on Vortex keyboards. It is fairly unstable, but I can confirm that all the commands used in this guide work just fine.&lt;&#x2F;p&gt;
&lt;p&gt;The build process for &lt;code&gt;pok3rtool&lt;&#x2F;code&gt; is a little different as it requires you to clone the GitHub repo, then create a new directly called &lt;code&gt;pok3rtool-build&lt;&#x2F;code&gt; &lt;strong&gt;beside&lt;&#x2F;strong&gt; the cloned repo. Aside from that quirk, the process for building &lt;code&gt;pok3rtool&lt;&#x2F;code&gt; is as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; pok3rtool
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Pull the git submodules
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; submodule update&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --init --recursive
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; ..&#x2F;pok3rtool-build
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Build the tool
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cmake&lt;&#x2F;span&gt;&lt;span&gt; ..&#x2F;pok3rtool
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;intermediary-firmware&quot;&gt;Intermediary firmware&lt;&#x2F;h3&gt;
&lt;p&gt;Part of the firmware upgrade process involves loading some intermediary firmware on to the keyboard. This is simply the stock Vortex Core firmware, but with the security bit disabled on the chip. This allows us to perform all further firmware upgrades over the keyboard&#x27;s USB port instead of through JTAG.&lt;&#x2F;p&gt;
&lt;p&gt;Building this is as simple as cloning the repo, then running &lt;code&gt;make&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;compiling-the-firmware&quot;&gt;Compiling the firmware&lt;&#x2F;h2&gt;
&lt;p&gt;When it comes to the final firmware, I have &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;qmk_core&#x2F;&quot;&gt;my own fork&lt;&#x2F;a&gt; of @ChaoticEnigma&#x27;s fork of QMK. You could use @ChaoticEnigma&#x27;s fork, but I would recommend my own, since I am specifically maintaining it for the Vortex Core, and my fork has a few more features (like a proper layout for the core).&lt;&#x2F;p&gt;
&lt;p&gt;You have the option between four QMK keyboard layouts for the Vortex Core:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;@ChaoticEnigma&#x27;s &lt;code&gt;default&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;A remake of the factory layout (missing a few function keys)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;@ChaoticEnigma&#x27;s &lt;code&gt;chaotic&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;Presumably @ChaoticEnigma&#x27;s personal layout. No idea what it does&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ewpratten&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;My personal layout&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;better_default&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;My full remake of the factory layout&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;To build my QMK fork, run the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; qmk_core
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Fetch everything needed to build QMK
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; git-submodule
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Build the layout of your choosing
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# For example, I use: make vortex&#x2F;core:ewpratten
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; vortex&#x2F;core:&amp;lt;layout_name&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;finding-debugging-hardware&quot;&gt;Finding debugging hardware&lt;&#x2F;h2&gt;
&lt;p&gt;As mentioned in the &lt;a href=&quot;https:&#x2F;&#x2F;ewpratten.com&#x2F;blog&#x2F;qmk-vortex-core&#x2F;#openocd&quot;&gt;OpenOCD&lt;&#x2F;a&gt; section, I am using a clone of the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.st.com&#x2F;en&#x2F;development-tools&#x2F;st-link-v2.html&quot;&gt;ST-Link&#x2F;V2&lt;&#x2F;a&gt;, which I picked up for a few dollars &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ebay.com&#x2F;itm&#x2F;ST-Link-V2-OpenOCD-On-Chip-Debugger-STM8-STM32-JTAG-SWIM-Linux-OSX-Arduino&#x2F;254315946241?hash=item3b36696101:g:Uq0AAOSwYRJdQWxj&quot;&gt;from ebay&lt;&#x2F;a&gt;. You can use any OpenOCD-supported debugger though.&lt;&#x2F;p&gt;
&lt;p&gt;The next section will assume you have an ST-Link when I talk about I&#x2F;O pin names.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;connecting-to-the-core-s-jtag-interface&quot;&gt;Connecting to the core&#x27;s JTAG interface&lt;&#x2F;h2&gt;
&lt;p&gt;Its finally time to open up the keyboard. This is pretty simple, there are five screws hidden under the keycaps. Just remove the caps, and the screws.&lt;&#x2F;p&gt;
&lt;p&gt;On the bottom of the keyboard, you&#x27;ll see a serial number. If this is &lt;strong&gt;not&lt;&#x2F;strong&gt; &lt;code&gt;CYKB175_V03 20160511&lt;&#x2F;code&gt;, stop right now, and do not proceed with this guide. This is the only model supported.&lt;&#x2F;p&gt;
&lt;p&gt;In between the &lt;code&gt;LED80&lt;&#x2F;code&gt; and &lt;code&gt;LED66&lt;&#x2F;code&gt; markings on the PCB (just below the serial number), you&#x27;ll find an empty 5-pin header. For the sake of simplicity, I&#x27;ll number them 1 to 5, where 1 is the pin closest to the serial number. Connect them to your hardware debugger as follows (this will require soldering, or small clips):&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Keyboard Pin&lt;&#x2F;th&gt;&lt;th&gt;Debugger Pin&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;1&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;N&#x2F;A&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;2&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;SWDIO&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;3&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;SWCLK&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;4&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;RST&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;5&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;GND&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;unlocking-the-keyboard&quot;&gt;Unlocking the keyboard&lt;&#x2F;h2&gt;
&lt;p&gt;With the keyboard JTAG interface wired up, plug in the keyboard&#x27;s USB (to provide power), then after the keyboard has connected, plug in the hardware debugger.&lt;&#x2F;p&gt;
&lt;p&gt;Move to the directory you built OpenOCD in, then run the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; tcl
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Connect to the keyboard
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# The first -f flag of this command will vary depending on the hardware debugger you chose to use
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;..&#x2F;src&#x2F;openocd -c &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;set HT32_SRAM_SIZE 0x4000&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -c &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;set HT32_FLASH_SIZE 0x10000&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;interface&#x2F;stlink-v2-1.cfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;target&#x2F;ht32f165x.cfg
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will spawn a telnet server on &lt;code&gt;localhost:4444&lt;&#x2F;code&gt;. Connect to that with &lt;code&gt;telnet 172.0.0.1 4444&lt;&#x2F;code&gt;, then run the following commands over telnet:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# REMINDER: We are now going to be modifying firmware on the keyboard. If you mess up, you may have just created an expensive brick
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# We need to erase the existing firmware
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ht32f165x&lt;&#x2F;span&gt;&lt;span&gt; mass_erase 0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Now, we write the new firmware
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# The &amp;#39;0&amp;#39; at the end of this command is very important
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This must be an absolute path to where ever you cloned the intermediary firmware
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flash&lt;&#x2F;span&gt;&lt;span&gt; write_image &#x2F;path&#x2F;to&#x2F;pok3r_re_firmware&#x2F;disassemble&#x2F;core&#x2F;builtin_core&#x2F;firmware_builtin_core.bin 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The last command will take a solid five minutes, so go grab a snack and &lt;em&gt;don&#x27;t bump anything&lt;&#x2F;em&gt;. There is no progress bar or anything, so enjoy the suspense.&lt;&#x2F;p&gt;
&lt;p&gt;Assuming all went well, you can run &lt;code&gt;exit&lt;&#x2F;code&gt; over telnet, then close OpenOCD. Unplug the hardware debugger and keyboard, then just plug the keyboard back in. It should function like it just came from the factory. If you forgot to unplug the debugger, the keyboard will not function.&lt;&#x2F;p&gt;
&lt;p&gt;You now have a firmware-unlocked Vortex Core.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;flashing-qmk&quot;&gt;Flashing QMK&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;Its time for the last step 🎉&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With the keyboard unlocked, you can technically load anything you want on to it, but lets stick with QMK. The following commands will do all the hard work for you:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Go back to where you built pok3rtool
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; pok3rtool-build
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Make sure you can see the keyboard from pok3rtool
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;pok3rtool list
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Flash the firmware
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# &amp;quot;QMK_CORE_EW&amp;quot; can be whatever you want the version of your keyboard to display
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# vortex_core_xxxx.bin will be different depending on the keyboard layout you chose to compile
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;pok3rtool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; vortex-core flash QMK_CORE_EW &#x2F;path&#x2F;to&#x2F;qmk_core&#x2F;vortex_core_xxxx.bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Any time you want to update QMK or change layouts, the above commands will be how to do it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;&#x2F;strong&gt; sometimes, &lt;code&gt;pok3rtool&lt;&#x2F;code&gt; fails to put the keyboard in bootloader mode before flashing new firmware. If this happens, just run the following command before flashing (and you may need to repeat this process a few times to get &lt;code&gt;pok3rtool&lt;&#x2F;code&gt; to behave)&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;pok3rtool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; vortex-core bootloader
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
        </item>
        <item>
            <title>Using KBFS as a makeshift maven server</title>
            <pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/kbfs-maven/</link>
            <guid>https://ewpratten.com/blog/kbfs-maven/</guid>
            <description>&lt;p&gt;As I continue to write more and more Java libraries for personal and public use, I keep finding myself limited by my library hosting solutions. Maven servers are currently my go-to way of storing and organizing all things Java. I have gone through a solid handful of servers over the past few years, here are my comments on each:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub Releases
&lt;ul&gt;
&lt;li&gt;No &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;dependabot.com&#x2F;&quot;&gt;dependabot&lt;&#x2F;a&gt; integration&lt;&#x2F;li&gt;
&lt;li&gt;No easy way to get Gradle to load files directly from GitHub&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;jitpack.io&#x2F;&quot;&gt;JitPack&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Slow builds&lt;&#x2F;li&gt;
&lt;li&gt;No easy way to publish custom artifacts or use custom groups&lt;&#x2F;li&gt;
&lt;li&gt;Sometimes unusably long cache policy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;&#x2F;blog&#x2F;2020&#x2F;09&#x2F;17&#x2F;ultralight-writeup&quot;&gt;Ultralight&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Has a file transfer limit&lt;&#x2F;li&gt;
&lt;li&gt;Uses my personal API keys to interact with GitHub&lt;&#x2F;li&gt;
&lt;li&gt;No way to automate package updates&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;features&#x2F;packages&quot;&gt;GitHub Packages&lt;&#x2F;a&gt;
&lt;ul&gt;
&lt;li&gt;Requires users to authenticate even for public assets&lt;&#x2F;li&gt;
&lt;li&gt;Has a file transfer limit&lt;&#x2F;li&gt;
&lt;li&gt;Uses a separate maven url per project&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;As a student, I prefer not to do the sensible solution--&lt;em&gt;spin up an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;jfrog.com&#x2F;artifactory&#x2F;&quot;&gt;Artifactory&lt;&#x2F;a&gt; server&lt;&#x2F;em&gt;--as that costs money I could be spending on coffee.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-makes-a-maven-server-special&quot;&gt;What makes a maven server special?&lt;&#x2F;h2&gt;
&lt;p&gt;Really, not much. As outlined in my &lt;a href=&quot;&#x2F;blog&#x2F;2020&#x2F;09&#x2F;17&#x2F;ultralight-writeup&quot;&gt;previous maven-related post&lt;&#x2F;a&gt;, a maven server is just a simple webserver with a specific directory structure, and some metadata files placed in specific locations.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s say we wanted to publish a package with the following attributes:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Attribute&lt;&#x2F;th&gt;&lt;th&gt;Value&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;GroupID&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;ca.retrylife.example&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ArtifactID&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;example-artifact&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Version&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;1.0.4&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The resulting directory structure would end up looking like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;└── ca
&lt;&#x2F;span&gt;&lt;span&gt;    └── retrylife
&lt;&#x2F;span&gt;&lt;span&gt;        └── example
&lt;&#x2F;span&gt;&lt;span&gt;            └── example-artifact
&lt;&#x2F;span&gt;&lt;span&gt;                ├── maven-metadata.xml
&lt;&#x2F;span&gt;&lt;span&gt;                ├── maven-metadata.xml.sha1
&lt;&#x2F;span&gt;&lt;span&gt;                └── 1.0.4
&lt;&#x2F;span&gt;&lt;span&gt;                    ├── example-artifact-1.0.4.jar
&lt;&#x2F;span&gt;&lt;span&gt;                    ├── example-artifact-1.0.4.jar.sha1
&lt;&#x2F;span&gt;&lt;span&gt;                    ├── example-artifact-1.0.4.pom
&lt;&#x2F;span&gt;&lt;span&gt;                    └── example-artifact-1.0.4.pom.sha1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div class=&quot;center&quot; markdown=&quot;1&quot;&gt;
&lt;p&gt;&lt;em&gt;Generated with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tree.nathanfriend.io&quot;&gt;tree.nathanfriend.io&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In this example. I chose to use the &lt;code&gt;sha1&lt;&#x2F;code&gt; hashing algorithm, but maven clients support pretty much any algorithm I can think of. &lt;&#x2F;p&gt;
&lt;p&gt;As you can see, the files are layed out very logically. Packages are organized similarly to how you organize your source code; each artifact is accompanied by a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;guides&#x2F;introduction&#x2F;introduction-to-the-pom.html&quot;&gt;Project Object Model&lt;&#x2F;a&gt; describing it, &lt;code&gt;maven-metadata&lt;&#x2F;code&gt; files keep track of versioning, and every file also has a hash alongside it.&lt;&#x2F;p&gt;
&lt;p&gt;For reference, the &lt;code&gt;maven-metadata.xml&lt;&#x2F;code&gt; in this example would look something like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;?&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;ca.retrylife.example&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;example-artifact&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;versioning&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;release&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;1.0.4&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;release&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;latest&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;1.0.4&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;latest&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;versions&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;1.0.4&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;versions&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lastUpdated&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;20210216203206&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lastUpdated&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;versioning&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As far as I know, &lt;code&gt;maven-metadata&lt;&#x2F;code&gt; is not actually required, but I always include them so that I can make use of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.gradle.org&#x2F;current&#x2F;userguide&#x2F;dynamic_versions.html&quot;&gt;dynamic versions&lt;&#x2F;a&gt; in Gradle.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-a-static-cdn-as-a-maven-server&quot;&gt;Using a static CDN as a maven server&lt;&#x2F;h2&gt;
&lt;p&gt;Since there is nothing special about a maven server aside from its directory structure, anywhere that can host files can become a server. My choice for now is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;keybase.io&#x2F;&quot;&gt;Keybase&lt;&#x2F;a&gt;&#x27;s &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;book.keybase.io&#x2F;docs&#x2F;files&quot;&gt;KBFS&lt;&#x2F;a&gt;. KBFS is a pgp-signed file store that allows every user 250GB of free storage. This web filesystem is mounted to the user&#x27;s device using &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.kernel.org&#x2F;doc&#x2F;html&#x2F;latest&#x2F;filesystems&#x2F;fuse.html&quot;&gt;FUSE&lt;&#x2F;a&gt; in a similar way to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;rclone.org&#x2F;&quot;&gt;rclone&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This local mount &amp;amp; sync setup allows me to interact with my &lt;code&gt;&#x2F;keybase&lt;&#x2F;code&gt; mountpoint like any other directory, while having all its contents automatically backed up and published.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;taking-advantage-of-this&quot;&gt;Taking advantage of this&lt;&#x2F;h3&gt;
&lt;p&gt;Gradle&#x27;s &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.gradle.org&#x2F;current&#x2F;userguide&#x2F;publishing_maven.html&quot;&gt;&lt;code&gt;maven-publish&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; plugin is designed to publish packages to remote servers, but will also work with local URIs. Simply pointing a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.gradle.org&#x2F;current&#x2F;dsl&#x2F;org.gradle.api.publish.maven.MavenPublication.html&quot;&gt;&lt;code&gt;MavenPublication&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to &lt;code&gt;&#x2F;keybase&#x2F;public&#x2F;ewpratten&#x2F;maven&#x2F;release&lt;&#x2F;code&gt; (my directory of choice for now) will automatically generate everything mentioned in the section about file structure above.&lt;&#x2F;p&gt;
&lt;p&gt;My exact configuration for doing this in gradle is as follows (&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;gradle_scripts&#x2F;blob&#x2F;master&#x2F;keybase_publishing.gradle&quot;&gt;source&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;groovy&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-groovy &quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span&gt;apply &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;maven-publish&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Determine SNAPSHOT vs release
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span&gt; isRelease = !project.findProperty(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).contains(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-SNAPSHOT&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (!isRelease) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;println &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Detected SNAPSHOT&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;publishing {
&lt;&#x2F;span&gt;&lt;span&gt;    repositories {
&lt;&#x2F;span&gt;&lt;span&gt;        maven {
&lt;&#x2F;span&gt;&lt;span&gt;            name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;KBFS&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; (isRelease) {
&lt;&#x2F;span&gt;&lt;span&gt;                url = uri(
&lt;&#x2F;span&gt;&lt;span&gt;                    project.findProperty(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kbfs.maven.release&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) ?: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;keybase&#x2F;public&#x2F;ewpratten&#x2F;maven&#x2F;release&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                )
&lt;&#x2F;span&gt;&lt;span&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                url = uri(
&lt;&#x2F;span&gt;&lt;span&gt;                    project.findProperty(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;kbfs.maven.snapshot&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) ?: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;keybase&#x2F;public&#x2F;ewpratten&#x2F;maven&#x2F;snapshot&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                )
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This configuration is a bit fancy as it will separate snapshots from releases, and allow me to completely override the endpoint(s) in my &lt;code&gt;settings.gradle&lt;&#x2F;code&gt; file if I choose. A minimal approach would be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;groovy&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-groovy &quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span&gt;apply &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;maven-publish&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;publishing {
&lt;&#x2F;span&gt;&lt;span&gt;    repositories {
&lt;&#x2F;span&gt;&lt;span&gt;        maven {
&lt;&#x2F;span&gt;&lt;span&gt;            name = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;KBFS&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            url = uri(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;keybase&#x2F;public&#x2F;&amp;lt;your username&amp;gt;&#x2F;maven&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;pretty-urls&quot;&gt;Pretty URLs&lt;&#x2F;h3&gt;
&lt;p&gt;With the solution outlined in this post, the end user would end up specifying one of the following URLs in their maven client:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https:&#x2F;&#x2F;&amp;lt;username&amp;gt;.keybase.pub&#x2F;maven&#x2F;release&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;https:&#x2F;&#x2F;&amp;lt;username&amp;gt;.keybase.pub&#x2F;maven&#x2F;snapshot&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;While that is perfectly fine, I prefer to keep all of my projects &#x2F; services &#x2F; etc under my personal domain (&lt;code&gt;retrylife.ca&lt;&#x2F;code&gt;). Unlike the rest of this post, this step does cost some money.&lt;&#x2F;p&gt;
&lt;p&gt;I already rent two servers for various other projects, and one of them is running the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;caddyserver.com&#x2F;&quot;&gt;Caddy&lt;&#x2F;a&gt; webserver and acting as a reverse proxy. I have pointed two domains (&lt;code&gt;release.maven.retrylife.ca&lt;&#x2F;code&gt; and &lt;code&gt;snapshot.maven.retrylife.ca&lt;&#x2F;code&gt;) at this server and am using the following rules to route them:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;release.maven.retrylife.ca {
&lt;&#x2F;span&gt;&lt;span&gt;    route &#x2F;* {
&lt;&#x2F;span&gt;&lt;span&gt;        rewrite * &#x2F;maven&#x2F;release&#x2F;{path}
&lt;&#x2F;span&gt;&lt;span&gt;        reverse_proxy https:&#x2F;&#x2F;ewpratten.keybase.pub {
&lt;&#x2F;span&gt;&lt;span&gt;            header_up Host ewpratten.keybase.pub
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;snapshot.maven.retrylife.ca {
&lt;&#x2F;span&gt;&lt;span&gt;    route &#x2F;* {
&lt;&#x2F;span&gt;&lt;span&gt;        rewrite * &#x2F;maven&#x2F;snapshot&#x2F;{path}
&lt;&#x2F;span&gt;&lt;span&gt;        reverse_proxy https:&#x2F;&#x2F;ewpratten.keybase.pub {
&lt;&#x2F;span&gt;&lt;span&gt;            header_up Host ewpratten.keybase.pub
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This means that I can point users at one of the following domains, and they will get the packages they are looking for:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;https:&#x2F;&#x2F;release.maven.retrylife.ca&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;https:&#x2F;&#x2F;snapshot.maven.retrylife.ca&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I am also now able to switch out backend servers &#x2F; services whenever I want, and users will see no difference.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;future-improvements&quot;&gt;Future improvements&lt;&#x2F;h2&gt;
&lt;p&gt;Some time in the future, I plan to move from KBFS to the S3-based &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.digitalocean.com&#x2F;products&#x2F;spaces&#x2F;&quot;&gt;DigitalOcean Spaces&lt;&#x2F;a&gt; so I can speed up the download time for packages, and have better global distribution of files.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Tunneling a printer from a home network to a VPN</title>
            <pubDate>Sat, 16 Jan 2021 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/printer-tunneling/</link>
            <guid>https://ewpratten.com/blog/printer-tunneling/</guid>
            <description>&lt;p&gt;For the past few years, I have been using a self-hosted VPN to bring all my personal devices into the same &amp;quot;network&amp;quot; even though many of them are spread across various locations and physical networks. This system never gives me problems, but there was one thing I wished I could do: access non-VPN devices on other networks using one of my VPN devices as a gateway.&lt;&#x2F;p&gt;
&lt;p&gt;Of course, I could actually grab a RaspberryPI and turn it into a real network gateway for the VPN, allowing me to access anything I want as long as it was attached to that PI&#x27;s network interface. This setup was not entirely practical though, as I wanted the ability to pull multiple devices from multiple networks into my VPN.&lt;&#x2F;p&gt;
&lt;p&gt;Doing a quick search for solutions around the internet lead me to find a bunch of long and visually complex &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;linux.die.net&#x2F;man&#x2F;8&#x2F;iptables&quot;&gt;&lt;code&gt;iptables&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; commands I could run, but I wanted something much simpler. Further searching lead me to find &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;linux.die.net&#x2F;man&#x2F;1&#x2F;socat&quot;&gt;&lt;code&gt;socat&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Socat&lt;&#x2F;strong&gt; is a command line based utility that establishes two bidirectional byte streams and transfers data between them. Because the streams can be constructed from a large set of different types of data sinks and sources (see address types), and because lots of address options may be applied to the streams, socat can be used for many different purposes. [manpages socat(1)]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;As stated in the Linux manpages, socat is essentially a port-forwarding utility. Using this, I am able to expose my local printer to my VPN through a RaspberryPI using this short command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;socat&lt;&#x2F;span&gt;&lt;span&gt; tcp-listen:9100,reuseaddr,fork tcp:&amp;lt;printer_ip&amp;gt;:9100
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I have also published a small tool called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;localexpose&quot;&gt;&lt;code&gt;localexpose&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; that does the same thing with a bit of a nicer argument syntax.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>2020 Wrap-Up</title>
            <pubDate>Thu, 31 Dec 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/year-wrapup/</link>
            <guid>https://ewpratten.com/blog/year-wrapup/</guid>
            <description>&lt;p&gt;&lt;em&gt;So, whats up with 2020?&lt;&#x2F;em&gt; For readers who do not know me personally, here is a quick overview:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;I made over 6000 commits to over 300 open source projects&lt;&#x2F;li&gt;
&lt;li&gt;I passed both 300 and 400 GitHub repositories on my account (and am on track to pass 500 any second)&lt;&#x2F;li&gt;
&lt;li&gt;I lead software development at &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;frc5024&quot;&gt;Raider Robotics&lt;&#x2F;a&gt; for my third year&lt;&#x2F;li&gt;
&lt;li&gt;I published my largest open source project&lt;&#x2F;li&gt;
&lt;li&gt;I got to do a summer internship at Toronto-based animation studio &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.industrialbrothers.com&#x2F;&quot;&gt;Industrial Brothers&lt;&#x2F;a&gt;, working on pipeline software&lt;&#x2F;li&gt;
&lt;li&gt;This website now gets over 300 readers per month (wow!)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;robotics&quot;&gt;Robotics&lt;&#x2F;h2&gt;
&lt;p&gt;This year, I packed a lot of robotics work into a small amount of time. Starting in the first week of January, through the beginning of March, I worked with close to 100 other highschool students at &lt;em&gt;Raider Robotics&lt;&#x2F;em&gt; to develop our most successful robot of recent time: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.thebluealliance.com&#x2F;team&#x2F;5024&#x2F;2020&quot;&gt;Darth Raider&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;div class=&quot;center&quot; markdown=&quot;1&quot;&gt;
&lt;iframe width=&quot;443&quot; height=&quot;249&quot; 
src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;iF-p-rTo8Xk&quot; frameborder=&quot;0&quot; 
allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;
&lt;&#x2F;iframe&gt;
&lt;p&gt;&lt;em&gt;The full source code and tooling for this robot is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;frc5024&#x2F;InfiniteRecharge&quot;&gt;public&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;This robot brought us all the way to the finals of our only competition this year (before the world got shut down). It was only in the finals that we finally lost our winning streak (and strong #1 place) due to some questionable scoring and a broken component on one of our teammate&#x27;s robots.&lt;&#x2F;p&gt;
&lt;p&gt;On the software side of this machine, &lt;a href=&quot;&#x2F;blog&#x2F;2019&#x2F;06&#x2F;24&#x2F;languagehunt2&quot;&gt;I pushed to switch the core development language over to Java&lt;&#x2F;a&gt;, which went very well, and the team seems to be on track to stay with this new language and toolset for the forseeable future. This year, we pushed very hard towards our goal of letting software handle as much of the &amp;quot;hard work&amp;quot; of operation as possible. In previous years, our robots mainly acted as stupidly expensive RC cars with custom controls, but this year, we wanted to offload tasks prone to human error to computers. &lt;&#x2F;p&gt;
&lt;p&gt;We were able to design a fully autonomous shooting system using high-speed computer vision, real-time path planning, and ball trajectory models to allow our operators to make the robot score game pieces by pressing and holding a single button. On top of this scoring system, &lt;em&gt;Darth Raider&lt;&#x2F;em&gt; featured fully autonomous and real-time-error-correcting spatial navigation, allowing us to input a list of goal coordinates for the robot to navigate to efficiently. The final large autonomously controlled system of this robot was known as the &amp;quot;hopper&amp;quot;; a long tunnel for storing and stacking balls. This system was 100% software controlled, and made use of an amazing predictive sorting system developed by @rsninja722 that would perfectly align balls as they were fed in to the robot. Below is a clip taken from semi-finals where we wrote an experimental system that allowed us to essentially use two completely separate robots as one, effectively doubling our gamepiece storage capacity from our max 4 balls to 7. (Big thanks to the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.thebluealliance.com&#x2F;team&#x2F;5032&quot;&gt;Falcons&lt;&#x2F;a&gt; for letting us subject them to this experiment.)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;2020-wrapup&#x2F;buddy-auto.gif&quot; alt=&quot;Two-robot autonomous scoring system&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For a few months after we finished competing, I went on to publish my largest open source project to date: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;frc5024&#x2F;Lib5k&quot;&gt;Lib5K&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lib5K is the software library that powers the Raider Robotics control system. It originally started as a summer project by @ewpratten back in the 2018 offseason. [...] Lib5K development really picked up during summer 2019, where the library (and all of Raider Robotics development) switched from C++ to Java Native. This switch also brought a lot of the core features to Lib5K, and the whole team got involved in development during the 2020 season. [source: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;cs.5024.ca&#x2F;lib5k&#x2F;&quot;&gt;Lib5K Wiki&lt;&#x2F;a&gt;]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;My goal with Lib5K was to design a way for myself to pass along my knowledge and learnings to future team members in an easy-to-digest way. According to internal team productivity metrics, I have made around 650,000 edits to this library, making it my most contributed-to project ever.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;personal-projects&quot;&gt;Personal projects&lt;&#x2F;h2&gt;
&lt;p&gt;During a rewrite of this website I did earlier this year, I implemented a new section on the homepage, where I list all of my major projects. This list is ever-growing, and generally a good place to see what I am working on.&lt;&#x2F;p&gt;
&lt;!-- This year, I have spent my time in the following development categories:

 - Libraries
 - CLI
 - Web
 - Pipeline --&gt;
&lt;p&gt;All the code I have written this year has lead to the need to build a plethora of common software libraries in my three main languages: Python, Java, and C&#x2F;C++. Through the process of building these, I have picked up many new skills like: properly unit-testing software, &lt;a href=&quot;&#x2F;blog&#x2F;2020&#x2F;09&#x2F;17&#x2F;ultralight-writeup&quot;&gt;building reliable library distribution systems&lt;&#x2F;a&gt;, and extensively documenting code.&lt;&#x2F;p&gt;
&lt;p&gt;In the web world, I have learned to work with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;jamstack.org&#x2F;&quot;&gt;JamStack&lt;&#x2F;a&gt;, and have deployed many serverless &#x2F; lambda-powered web applications, mostly based on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pallets&#x2F;flask&quot;&gt;Flask&lt;&#x2F;a&gt; or &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;jekyllrb.com&#x2F;&quot;&gt;Jekyll&lt;&#x2F;a&gt;. A list of my repositories that use these technologies can be found &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;search?l=&amp;amp;q=user%3AEwpratten+filename%3Anow.json&amp;amp;type=code&quot;&gt;here&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;I have also picked up low-level programming for systems running on the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;AVR_microcontrollers&quot;&gt;AVR Microprocessor architecture&lt;&#x2F;a&gt;. I have found AVR programming to be a fun and generally easy way to learn about very low-level computing: interrupts, timers, I&#x2F;O, serial busses, memory management, etc. I also used this as an opportunity to learn how to use a powerful new build system developed by Google, called &lt;a href=&quot;&#x2F;categories?c=bazel&quot;&gt;&lt;em&gt;Bazel&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;. Many of my projects this year have been shifting over to build with &lt;em&gt;Bazel&lt;&#x2F;em&gt; as I really enjoy the build environment and tooling available. I have also used &lt;em&gt;Bazel&lt;&#x2F;em&gt; to build &lt;a href=&quot;&#x2F;blog&#x2F;2020&#x2F;08&#x2F;23&#x2F;notetaking-with-latex&quot;&gt;my popular school note-taking system&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;A list of the over 200 personal projects I have worked on this year (including unfinished projects) can be found with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;search?l=&amp;amp;q=user%3AEwpratten+created%3A%22%3E+2020-01-01+%3C+2021-01-01%22&amp;amp;type=repositories&quot;&gt;this query&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;finishing-up&quot;&gt;Finishing up&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;ll end this post with a few things that did not get to be their own major section:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;my-programming-challenge&quot;&gt;My programming challenge&lt;&#x2F;h3&gt;
&lt;p&gt;People who know me in real life know of a bit of a challenge I set for myself a while ago (although I don&#x27;t actually try very hard to keep up). I have now gone a year without a break from programming any longer than three days (completely accidental), and two years without a break any longer than five days. (yes, this is the secret to how I have so many projects, I never stop writing code).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;this-website&quot;&gt;This website&lt;&#x2F;h3&gt;
&lt;p&gt;I have now experimented with three posting schedules for this website: monthly, bi-weekly, and weekly. Monthly posts were too spread-apart, and left this site feeling a little empty. I switched to weekly posting through the summer, which worked out great. Since school started again, I have moved to bi-weekly posts, writing each post a few weeks before publishing it (hover over the date of any post to see the date I wrote it). The bi-weekly system seems to be working very well, and I will likely stick to it until summer 2021, so enjoy more content fairly regularly (and remember to subscribe to my &lt;a href=&quot;&#x2F;feed.xml&quot;&gt;RSS Feed&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>How I have tweaked my Minecraft client to be &#x27;just right&#x27;</title>
            <pubDate>Sat, 19 Dec 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/vanilla-plus-mods/</link>
            <guid>https://ewpratten.com/blog/vanilla-plus-mods/</guid>
            <description>&lt;h2 id=&quot;the-base-game&quot;&gt;The base game&lt;&#x2F;h2&gt;
&lt;p&gt;Starting out at the base game. I like to keep this fairly up-to-date. Right now, my base game is version &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;minecraft.gamepedia.com&#x2F;Java_Edition_1.16.4&quot;&gt;&lt;code&gt;1.16.4&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Along with the base game, my game launcher of choice, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;multimc.org&#x2F;&quot;&gt;MultiMC&lt;&#x2F;a&gt;, allows using a custom &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.lwjgl.org&#x2F;&quot;&gt;LWJGL&lt;&#x2F;a&gt; version. I choose to use version &lt;code&gt;3.2.2&lt;&#x2F;code&gt;, as it is the most stable for me.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mod-loading&quot;&gt;Mod loading&lt;&#x2F;h2&gt;
&lt;p&gt;Anyone who has played Minecraft for long enough will remember back when installing a mod involved opening up the game JAR, and dropping new class files into it. Mod loaders essentially still do this, but they provide a much cleaner system for you, the user. For years, I used the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;files.minecraftforge.net&#x2F;&quot;&gt;Forge Mod Loader&lt;&#x2F;a&gt;, but recently switched to the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;fabricmc.net&#x2F;&quot;&gt;Fabric Mod Loader&lt;&#x2F;a&gt;, as, in my opinion, the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;fabricmc.net&#x2F;wiki&#x2F;doku.php&quot;&gt;FabricMC documentation&lt;&#x2F;a&gt; is much nicer to deal with.&lt;&#x2F;p&gt;
&lt;p&gt;Unlike Forge, Fabric generally requires a helper mod to be installed called the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;fabric-api&quot;&gt;Fabric API&lt;&#x2F;a&gt;. This exists to provide user-friendly mappings to Minecraft code for mod developers.&lt;&#x2F;p&gt;
&lt;p&gt;In terms of versions, I am running Fabric Loader version &lt;code&gt;0.10.6+build.214&lt;&#x2F;code&gt;, and API version &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;FabricMC&#x2F;fabric&#x2F;releases&#x2F;tag&#x2F;0.22.1%2Bbuild.409-1.16&quot;&gt;&lt;code&gt;0.22.1+build.409-1.16&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;network-protocol-translation&quot;&gt;Network Protocol Translation&lt;&#x2F;h2&gt;
&lt;p&gt;One of my least favorite parts of playing on multiple multiplayer servers is the need to constantly switch Minecraft versions to accommodate every server version I am playing on. For example, the server I talk about in my post about &lt;a href=&quot;&#x2F;blog&#x2F;2020&#x2F;11&#x2F;21&#x2F;minecraft-irc&quot;&gt;Minecraft chat over IRC&lt;&#x2F;a&gt; is running version &lt;code&gt;1.16.3&lt;&#x2F;code&gt;. You may have played on some high-end servers like &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hypixel.net&#x2F;&quot;&gt;Hypixel&lt;&#x2F;a&gt; or &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.brawl.com&#x2F;front&#x2F;&quot;&gt;MCCTF&lt;&#x2F;a&gt;, where you can connect with any client version you want. These servers are both running &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Protocol_converter&quot;&gt;Network Protocol Translation&lt;&#x2F;a&gt; plugins that will convert between Minecraft server protocol versions as packets are sent and received.&lt;&#x2F;p&gt;
&lt;p&gt;This can also be set up on the client instead of the server, allowing a single client to connect to multiple server versions. I run both the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ViaVersion&#x2F;ViaVersion&quot;&gt;Viaversion&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Earthcomputer&#x2F;multiconnect&quot;&gt;Multiconnect&lt;&#x2F;a&gt; mods, which together allow my &lt;code&gt;1.16.4&lt;&#x2F;code&gt; client to play on servers all the way down to &lt;code&gt;1.8.0&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rendering&quot;&gt;Rendering&lt;&#x2F;h2&gt;
&lt;p&gt;On the rendering side of the game, I run a few specialized mods to improve or replace various functions of Minectaft&#x27;s built-in game renderer. Starting with the largest change, I use the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jellysquid3&#x2F;sodium-fabric&quot;&gt;Sodium&lt;&#x2F;a&gt; renderer, which includes a large number of rendering improvements, and opens up some extra customizability to the user.&lt;&#x2F;p&gt;
&lt;div class=&quot;center&quot; markdown=&quot;1&quot;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;vanilla-plus&#x2F;sodium_settings.jpeg&quot; alt=&quot;Screenshot of Sodium settings&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;The developer of Sodium, @jellysquid3, has a few other rendering or rendering-related projects I use. Mainly: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jellysquid3&#x2F;phosphor-fabric&quot;&gt;Phosphor&lt;&#x2F;a&gt;, which makes large improvements to the game lighting engine, and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jellysquid3&#x2F;lithium-fabric&quot;&gt;Lithium&lt;&#x2F;a&gt; which makes all-around improvements to the game.&lt;&#x2F;p&gt;
&lt;p&gt;Speaking of lighting, I also run &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;LambdAurora&#x2F;LambDynamicLights&quot;&gt;Lamb Dynamic Lights&lt;&#x2F;a&gt;, which allows you to illuminate the area around you when holding a torch (very helpful for mining). Anyone who remembers the old &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tekkitclassic.fandom.com&#x2F;wiki&#x2F;Not_Enough_Items&quot;&gt;Not Enough Items&lt;&#x2F;a&gt; mod, will remember that pressing &lt;kbd&gt;F7&lt;&#x2F;kbd&gt; would bring up an overlay for viewing the light level of any block. I now use the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;light-overlay&quot;&gt;Light Overlay&lt;&#x2F;a&gt; mod to do the same thing.&lt;&#x2F;p&gt;
&lt;p&gt;In terms of &amp;quot;nice to have&amp;quot; rendering features, I have &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;joaoh1&#x2F;OkZoomer&quot;&gt;OKZoomer&lt;&#x2F;a&gt; to give me Optifine-style camera zoom. I don&#x27;t use Optifine anymore, but am a donator, so, to get my donator cape back on my client, I have the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;minecraftcapes-mod&quot;&gt;Minecraft Capes&lt;&#x2F;a&gt; mod installed. Continuing to add small features to the game from Optifine, I use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;connected-glass&quot;&gt;Connected Glass&lt;&#x2F;a&gt; to add connected textures, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;diagonal-panes&quot;&gt;Diagonal Panes&lt;&#x2F;a&gt; to render glass panes and iron bars on diagonal angles, and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;lambdabettergrass&quot;&gt;Lambda Better Grass&lt;&#x2F;a&gt; to connect grass textures together. For no particular reason, I also use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;better-dropped-items&quot;&gt;Better Dropped Items&lt;&#x2F;a&gt; to render dropped items &lt;em&gt;better&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, a nice rendering mod to have is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;juliand665&#x2F;Dynamic-FPS&quot;&gt;Dynamic FPS&lt;&#x2F;a&gt;, which essentially stops game rendering when window focus is lost. This just improves your computer&#x27;s performance when running Minecraft in the background.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;audio-engine&quot;&gt;Audio engine&lt;&#x2F;h2&gt;
&lt;p&gt;Not many people know that mods exist to replace or improve Minecraft&#x27;s audio engine. I quite enjoy using these mods, as the game becomes significantly more immersive. I use the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;dynamic-sound-filters&quot;&gt;Dynamic Sound Filters&lt;&#x2F;a&gt; mod to add reverb to caves and the nether (the nether becomes quite scary when game sounds are turned up). Along with Dynamic Sound Filters, I also use a fairly ridiculous mod called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;presence-footsteps&quot;&gt;Presence Footsteps&lt;&#x2F;a&gt;. Presence Footsteps is a mod that detects the block each of your feet is standing on, and plays the appropriate sound. This means that walking on the line between two different blocks will play the block steps sounds alternating with each other. This mod also works with 4 legged mobs like horses, and even 8 legged mods.&lt;&#x2F;p&gt;
&lt;p&gt;Not mods, but audio-related resource packs: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;texture-packs&#x2F;bettersounds&quot;&gt;Better Sounds&lt;&#x2F;a&gt; improves upon many of Minecraft&#x27;s sound resources and notably &amp;quot;makes spiders sound creepy&amp;quot;. Also, the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;texture-packs&#x2F;orchestra-soundpack&quot;&gt;Orchestra Soundpack&lt;&#x2F;a&gt; replaces many of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;C418&quot;&gt;Daniel Rosenfeld&lt;&#x2F;a&gt;&#x27;s great game soundtracks with even better orchestral soundtracks composed by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;user&#x2F;andreaszoellermusic&quot;&gt;Andreas Zoeller&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ui-tweaks&quot;&gt;UI tweaks&lt;&#x2F;h2&gt;
&lt;p&gt;I have a lot of UI tweak mods installed to provide me with the &amp;quot;perfect&amp;quot; game HUD.&lt;&#x2F;p&gt;
&lt;p&gt;Starting with hotbar modifications, I use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;appleskin&quot;&gt;AppleSkin&lt;&#x2F;a&gt; to show the nutritional value of whatever food item I am holding, and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;giselbaers-durability-viewer&quot;&gt;Giselbaer&#x27;s Durability Viewer&lt;&#x2F;a&gt; to show me the durability percentage of my armor, and handheld items.&lt;&#x2F;p&gt;
&lt;p&gt;In my inventory, I use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;shedaniel&#x2F;RoughlyEnoughItems&quot;&gt;Roughly Enough Items&lt;&#x2F;a&gt; to provide crafting recipe lookup, a list of every item in the game, usages for items, and more. I also use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;roughly-enough-resources&quot;&gt;Roughly Enough Resources&lt;&#x2F;a&gt; as a plugin for Roughly Enough Items to provide extra information about mob loot and item &#x2F; ore rarity in the world. When dealing with shulker boxes, it is annoying to constantly be placing them down to check their contents. For this, I use the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;shulkerboxtooltip&quot;&gt;Shulker Box Tooltip&lt;&#x2F;a&gt; mod to show a box&#x27;s contents when I hover over it, and the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;texture-packs&#x2F;shulker-box-guis&quot;&gt;Shulker Box GUIs&lt;&#x2F;a&gt; resource pack to color-code the shulker box GUI. Despite &amp;quot;requiring Optifine&amp;quot;, this pack does not actually require Optifine to work.&lt;&#x2F;p&gt;
&lt;div class=&quot;center&quot; markdown=&quot;1&quot;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;vanilla-plus&#x2F;rei.png&quot; alt=&quot;Screenshot of Roughly Enough Items&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;In terms of HUD &amp;quot;extras&amp;quot;, I use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;hwyla&quot;&gt;Here&#x27;s What You&#x27;re Looking At&lt;&#x2F;a&gt; to show basic information about the block I am looking at. This is very helpful for me, as I am still learning what all the new &lt;code&gt;1.9+&lt;&#x2F;code&gt; blocks are. I also extend HWYLA with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;hwyla-addon-horse-info&quot;&gt;Hwyla Addon Horse Info&lt;&#x2F;a&gt; to show me the stats of any horse I look at, and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;can-i-mine-this-block&quot;&gt;cAn i MiNe thIS bLOCk?&lt;&#x2F;a&gt; to tell me the needed tool to harvest a specific block. I also use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;gameinfo&quot;&gt;Game Info&lt;&#x2F;a&gt; to tell me the world time in the upper left of my screen.&lt;&#x2F;p&gt;
&lt;p&gt;In the world, I use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;orderly&#x2F;&quot;&gt;Orderly&lt;&#x2F;a&gt; to show the health of mobs above their heads, and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;name-pain&quot;&gt;Name Pain&lt;&#x2F;a&gt;, which will give player&#x27;s names a red tint when they are low on health.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;utility&quot;&gt;Utility&lt;&#x2F;h2&gt;
&lt;p&gt;There are a few small mods that I have installed to provide some nice-to-have information in game, like &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;chat-heads&quot;&gt;Chat Heads&lt;&#x2F;a&gt;, which shows a player&#x27;s face beside their chat messages, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;auth-me&quot;&gt;AuthMe&lt;&#x2F;a&gt;, which allows you to switch accounts without restarting the game, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;antighost&quot;&gt;Anti-Ghost&lt;&#x2F;a&gt;, which fixes Minecraft&#x27;s ghost block problem, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;betterf3&quot;&gt;BetterF3&lt;&#x2F;a&gt;, which improves the game&#x27;s &lt;kbd&gt;F3&lt;&#x2F;kbd&gt; screen, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;controlling-for-fabric&quot;&gt;Controlling&lt;&#x2F;a&gt;, which allows you to search through the game&#x27;s keybinds in an easier way, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;craftpresence&quot;&gt;Craft Presence&lt;&#x2F;a&gt;, which provides highly-customizable &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;discord.com&#x2F;rich-presence&quot;&gt;Discord Rich Presence&lt;&#x2F;a&gt; data, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;custom-selection-box-port&quot;&gt;Custom Selection Box&lt;&#x2F;a&gt;, which makes the block you are looking at more distinct, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;modmenu&quot;&gt;Mod Menu&lt;&#x2F;a&gt;, which is used by many mods to provide settings screens, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;not-enough-crashes&quot;&gt;Not Enough Crashes&lt;&#x2F;a&gt;, which just brings you back to the title screen if something stops working, instead of closing the game, and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;pathsuggestion&quot;&gt;Path Suggestion&lt;&#x2F;a&gt;, which improves Minecraft command auto-complete.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;world-map&quot;&gt;World map&lt;&#x2F;h2&gt;
&lt;p&gt;I hate writing down coordinates of various things, so I use Xaero&#x27;s &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;xaeros-minimap&quot;&gt;Minimap&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;xaeros-world-map&quot;&gt;World Map&lt;&#x2F;a&gt; mods. These both provide in-world waypoints, and generate a map of everywhere you travel in the world.&lt;&#x2F;p&gt;
&lt;div class=&quot;center&quot; markdown=&quot;1&quot;&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;vanilla-plus&#x2F;minimap_2020.png&quot; alt=&quot;Xaero&#x27;s Minimap&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;building-utilities&quot;&gt;Building utilities&lt;&#x2F;h2&gt;
&lt;p&gt;I spend a lot of time programmatically editing and copying builds around between worlds and servers. I do this to make redstone templates, generate build platforms, and create Minecraft-based voxel art over on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.instagram.com&#x2F;evanpratten&#x2F;&quot;&gt;my Instagram&lt;&#x2F;a&gt; page.&lt;&#x2F;p&gt;
&lt;p&gt;To do this, I use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;worldedit&quot;&gt;WorldEdit&lt;&#x2F;a&gt; for most of the heavy lifting, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;euclid&quot;&gt;Euclid&lt;&#x2F;a&gt; to show me my WorldEdit selections as I create them, and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;litematica&#x2F;&quot;&gt;Litematica&lt;&#x2F;a&gt; to copy builds from servers to singleplayer worlds (since WorldEdit only works in singleplayer).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;world-generation&quot;&gt;World generation&lt;&#x2F;h2&gt;
&lt;p&gt;Finally, I use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;terrestria&quot;&gt;Terrestria&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;traverse&quot;&gt;Traverse&lt;&#x2F;a&gt;, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;cinderscapes&quot;&gt;Cinderscapes&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;overworld-two&#x2F;&quot;&gt;Overworld Two&lt;&#x2F;a&gt; to improve terrain generation, and &amp;quot;spice up&amp;quot; my worlds. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;NOTE: The first three of these mods introduce new blocks to the game, but do not cause issues in vanilla multiplayer games.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Upgrading my chromebook</title>
            <pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/2020-12-4-galliumos/</link>
            <guid>https://ewpratten.com/blog/2020-12-4-galliumos/</guid>
            <description>&lt;p&gt;My previous development laptop was an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.acer.com&#x2F;ac&#x2F;en&#x2F;CA&#x2F;content&#x2F;series&#x2F;acerchromebookr11&quot;&gt;Acer R11&lt;&#x2F;a&gt; chromebook. I always ran it in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;chromiumos&#x2F;docs&#x2F;+&#x2F;master&#x2F;developer_mode.md&quot;&gt;developer mode&lt;&#x2F;a&gt; with all the Linux packages I needed installed via &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;skycocker&#x2F;chromebrew&quot;&gt;chromebrew&lt;&#x2F;a&gt;. This setup worked great except for GUI programs, as (at the time), the built-in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Wayland_(display_server_protocol)&quot;&gt;Wayland&lt;&#x2F;a&gt; server on the chromebook was not exposed to the user in a meaningful way. I relied on an internal tool from Google called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;chromiumos&#x2F;platform2&#x2F;+&#x2F;HEAD&#x2F;vm_tools&#x2F;sommelier&#x2F;&quot;&gt;sommelier&lt;&#x2F;a&gt; to translate X11 calls to the internal Wayland server. None of this was ideal, but with a lot of scripts and aliases, I made it work.&lt;&#x2F;p&gt;
&lt;p&gt;Recently, I decided to remove the locked-down ChromeOS all together, and set the laptop up with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;galliumos.org&quot;&gt;GalliumOS&lt;&#x2F;a&gt; so it can be used as a lightweight code-review machine with access to some useful tools like &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;&quot;&gt;VSCode&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.gitkraken.com&#x2F;&quot;&gt;GitKraken&lt;&#x2F;a&gt;. This whole process is actually fairly easy, and a good way to breathe new life in to an old chromebook. This guide will be R11-specific, but the process doesn&#x27;t vary too wildly between models.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;developer-mode&quot;&gt;Developer mode&lt;&#x2F;h2&gt;
&lt;p&gt;A standard feature on chromebooks is &amp;quot;developer mode&amp;quot;. This is a hidden boot mode that is designed to give &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.chromium.org&#x2F;chromium-os&quot;&gt;ChromiumOS&lt;&#x2F;a&gt; contributors and Google developers access to debug tools when testing new OS builds. Along with debug tools, this mode also exposes a Linux terminal with root access to the user via &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt; + &lt;kbd&gt;Alt&lt;&#x2F;kbd&gt; + &lt;kbd&gt;-&amp;gt;&lt;&#x2F;kbd&gt;. On an extremely locked down system like a chromebook, this terminal access exposes a lot of new capability. For this use case, we will only use it to modify the system bootloader.&lt;&#x2F;p&gt;
&lt;p&gt;To enable developer mode, simply press &lt;kbd&gt;Esc&lt;&#x2F;kbd&gt; + &lt;kbd&gt;Refresh&lt;&#x2F;kbd&gt; + &lt;kbd&gt;Power&lt;&#x2F;kbd&gt;, and let the chromebook reboot. Once the recovery screen pops up, press &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt; + &lt;kbd&gt;D&lt;&#x2F;kbd&gt;, and the device is now in developer mode.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;write-protection&quot;&gt;Write protection&lt;&#x2F;h2&gt;
&lt;p&gt;This step will void your device&#x27;s warranty. Chromebooks are able to handle anything you throw at them. Even if you were to delete important system files to the point the device can no longer boot, hopping in to recovery mode can reset the device to a working state. This works via ChromeOS&#x27;s write protect mechanism. All important files are protected by hardware-enforced write protection. Since the process of loading a new operating system onto the device involves overwriting important system files (like the BIOS), we must physically disable write protection.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily, on the Acer R11, this process is very simple. Firstly, unscrew the laptop&#x27;s bottom plate to expose the motherboard (some screws are hidden under rubber feet). With the backplate off, you will find a screw that looks like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;galliumos&#x2F;arcer_r11_screw.jpg&quot; alt=&quot;R11 write protect screw&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The screw is hard to miss, it is beside the WIFI card, an has an arrow pointing to it. Simply remove it, and put the laptop back together. You now have a fully unlocked device.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;flashing-a-custom-bootloader&quot;&gt;Flashing a custom bootloader&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mrchromebox.tech&quot;&gt;Mr Chromebox&lt;&#x2F;a&gt;, a well known person in the world of Chromebook modification, provides and maintains a very easy to use shell script that handles bootloader modifications automatically. To use this tool, open up the ChromeOS terminal (&lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt; + &lt;kbd&gt;Alt&lt;&#x2F;kbd&gt; + &lt;kbd&gt;-&amp;gt;&lt;&#x2F;kbd&gt;), log in with the username &lt;code&gt;chronos&lt;&#x2F;code&gt; (you must already be logged in to your personal Google account. This will not work from the login screen), and run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;crossystem&lt;&#x2F;span&gt;&lt;span&gt; dev_boot_usb=1 dev_boot_legacy=1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -LO&lt;&#x2F;span&gt;&lt;span&gt; mrchromebox.tech&#x2F;firmware-util.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -Dt&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;bin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; 755 firmware-util.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; firmware-util.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will open up the &lt;code&gt;firmware-util&lt;&#x2F;code&gt; settings screen.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;galliumos&#x2F;fwutil_cros_wp-on.png&quot; alt=&quot;firmware-util screen&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You will want to select the &lt;code&gt;RW_LEGACY&lt;&#x2F;code&gt; option to load the &lt;code&gt;RW_LEGACY&lt;&#x2F;code&gt; &#x2F; SEABIOS payload. The &lt;code&gt;UEFI&lt;&#x2F;code&gt; option is technically the better choice, but it will completely remove the device&#x27;s ability to run ChromeOS again in the future.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;setting-fuses&quot;&gt;Setting fuses&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;code&gt;RW_LEGACY&lt;&#x2F;code&gt; payload only works if the laptop always has power. Once the device completely runs out of power, the boot settings are wiped from the device (not something we want). The solution is to modify the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;chromiumos&#x2F;platform&#x2F;vboot&#x2F;+&#x2F;master&#x2F;_vboot_reference&#x2F;firmware&#x2F;include&#x2F;gbb_header.h&quot;&gt;system &lt;code&gt;gbb&lt;&#x2F;code&gt; fuses&lt;&#x2F;a&gt;. This sounds complicated (and it is), but Mr Chromebox comes to the rescue again with the &lt;code&gt;GBB Flags&lt;&#x2F;code&gt; option in his script. &lt;em&gt;After&lt;&#x2F;em&gt; the &lt;code&gt;RW_LEGACY&lt;&#x2F;code&gt; payload has been configured, run his script again, and select &lt;code&gt;GBB Flags&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;installing-galliumos&quot;&gt;Installing GalliumOS&lt;&#x2F;h2&gt;
&lt;p&gt;On another computer, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;galliumos.org&#x2F;download&quot;&gt;download GalliumOS&lt;&#x2F;a&gt; (make sure to select the &lt;code&gt;Braswell&lt;&#x2F;code&gt; option), and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.galliumos.org&#x2F;Installing&#x2F;Creating_Bootable_USB&quot;&gt;create a bootable USB&lt;&#x2F;a&gt;. Plug this USB into the Chromebook, reboot, and press &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt; + &lt;kbd&gt;L&lt;&#x2F;kbd&gt; as the warning screen pops up. This will begin the GalliumOS setup process (which is identical to that of Ubuntu).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;enabling-verbose-boot&quot;&gt;Enabling verbose boot&lt;&#x2F;h3&gt;
&lt;p&gt;It is nice to know what is happening when the device is booting. To disable the boot animation and replace it with the boot log, edit &lt;code&gt;&#x2F;etc&#x2F;default&#x2F;grub&lt;&#x2F;code&gt;, and replace both the &lt;code&gt;quiet&lt;&#x2F;code&gt; and &lt;code&gt;splash&lt;&#x2F;code&gt; arguments with &lt;code&gt;noplymouth&lt;&#x2F;code&gt; in the &lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;&#x2F;code&gt; options. Next, run the following, then reboot:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; update-grub
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;!--
https:&#x2F;&#x2F;imgur.com&#x2F;a&#x2F;GuyYz

https:&#x2F;&#x2F;medium.com&#x2F;@simstems&#x2F;how-i-got-the-acer-chromebook-r11-cb5-132t-to-run-parrot-security-os-without-crouton-d282a110060a

https:&#x2F;&#x2F;wiki.galliumos.org&#x2F;Hardware_Compatibility

https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;chromiumos&#x2F;platform&#x2F;vboot&#x2F;+&#x2F;master&#x2F;_vboot_reference&#x2F;firmware&#x2F;include&#x2F;gbb_header.h
--&gt;</description>
        </item>
        <item>
            <title>Connecting to a Minecraft server over IRC</title>
            <pubDate>Sat, 21 Nov 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/minecraft-irc/</link>
            <guid>https://ewpratten.com/blog/minecraft-irc/</guid>
            <description>&lt;p&gt;As I talked about in my post &lt;a href=&quot;&#x2F;blog&#x2F;2020&#x2F;10&#x2F;24&#x2F;corepack-development&quot;&gt;about Minecraft modpack development&lt;&#x2F;a&gt;, I got back in to playing Minecraft earlier this year. I primairly play on a server full of friends, where the server owner has &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;webbukkit&#x2F;dynmap&quot;&gt;dynmap&lt;&#x2F;a&gt; installed. Dynmap is a handy tool that provides a near-real-time overview of the minecraft world in the form of a webapp. I always keep Dynmap open on my laptop so I can chat with whoever is online, and see whats being worked on.&lt;&#x2F;p&gt;
&lt;p&gt;While dynmap has a built-in chat log, and the ability to send chats, the incoming chat messages do not persist, and the outgoing chat messages don&#x27;t always show your in-game username (but instead, your public IP address). Since I always have an IRC client open, I figured that making use of my IRC client to generate a persistent chat log in the background would be a good solution. Unfortunately, I could not find anyone who has ever built a &lt;code&gt;Minecraft &amp;lt;-&amp;gt; IRC&lt;&#x2F;code&gt; bridge. Thus my project, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;chatster&quot;&gt;chatster&lt;&#x2F;a&gt;, was born. &lt;&#x2F;p&gt;
&lt;p&gt;The most basic IRC server consists of a TCP socket, and only 7 message handlers:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Message Type&lt;&#x2F;th&gt;&lt;th&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;NICK&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Handles a user setting their nickname&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;USER&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Handles a user setting their identity &#x2F; username&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;PASS&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Handles a user authenticating with the server&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;PING&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;A simple ping-pong system&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;JOIN&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Handles a user joining a channel&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;QUIT&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Handles a user leaving a channel&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;PRIVMSG&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;Handles a user sending a message&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;On the Minecraft side, the following subset of the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.vg&#x2F;Protocol&quot;&gt;in-game protocol&lt;&#x2F;a&gt; must be implemented (I just used the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ammaraskar&#x2F;pyCraft&quot;&gt;&lt;code&gt;pyCraft&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; library for this):&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;User authentication&lt;&#x2F;li&gt;
&lt;li&gt;Receiving &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.vg&#x2F;Protocol#Chat_Message_.28clientbound.29&quot;&gt;&lt;code&gt;clientbound.play.ChatMessage&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; packets&lt;&#x2F;li&gt;
&lt;li&gt;Sending &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.vg&#x2F;Protocol#Chat_Message_.28serverbound.29&quot;&gt;&lt;code&gt;serverbound.play.ChatMessage&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; packets&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The whole idea of chatster is that a user connects to the IRC server using their &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;account.mojang.com&#x2F;&quot;&gt;Mojang account&lt;&#x2F;a&gt; email and password at their IRC nickname, and server password. The server temporarily stores these values in memory.&lt;&#x2F;p&gt;
&lt;p&gt;Connecting to a server is done via specific IRC channel names. If you wanted to connect to &lt;code&gt;mc.example.com&lt;&#x2F;code&gt; on port &lt;code&gt;12345&lt;&#x2F;code&gt;, you would issue the following IRC command:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;JOIN #mc.example.com:12345
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Upon channel join, the server opens a socket to the specified Minecraft server, and relays chat messages (along with their sender) to both Minecraft and IRC. This means that ingame users show up in your IRC user list, and you can send commands and chats to the game.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>My first mechanical keyboard: The Vortex Core</title>
            <pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/2020-11-6-vortex-core/</link>
            <guid>https://ewpratten.com/blog/2020-11-6-vortex-core/</guid>
            <description>&lt;p&gt;About a month ago, I decided to buy myself a mechanical keyboard. I have always been a huge fan of membrane &#x2F; laptop keyboards. My current laptop (the Lenovo T480) has a very nice feel to its keyboard, and my previous laptop (the Acer R11) had the best keyboard I have ever used. The switch to mechanical wasn&#x27;t my first choice, although I was open to trying something new, so didn&#x27;t see it as a negative. Ever since adding another monitor to my setup, I haven&#x27;t had enough room on my desk to fit a keyboard. This generally is not a problem since I mainly use my laptop, but I occasionally need to use my desktop for rendering work, which requires a separate keyboard.&lt;&#x2F;p&gt;
&lt;p&gt;I began to look for keyboards that could fit in the little space in front of my laptop, and stumbled across &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=ofXOu7zK9IY&quot;&gt;a video&lt;&#x2F;a&gt; from one of my favorite YouTube creators, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;c&#x2F;WolfgangsChannel&#x2F;featured&quot;&gt;Wolfgang&lt;&#x2F;a&gt; on the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;kbdfans.com&#x2F;products&#x2F;niu-mini-40-diy-kit&quot;&gt;Niu Mini&lt;&#x2F;a&gt;, which is a 40% keyboard (meaning it has 40% of the keys of a full size layout). The heavy use of keybindings to get work done on such a small keyboard interested me a lot, and I almost picked up a Niu Mini for myself, although ended up not getting it because I decided I wasn&#x27;t quite ready to learn how to type on an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;blog.roastpotatoes.co&#x2F;review&#x2F;2015&#x2F;09&#x2F;20&#x2F;ortholinear-experience-atomic&#x2F;&quot;&gt;ortholinear&lt;&#x2F;a&gt; layout, while needing to learn keybindings at the same time.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of the Niu Mini, I ended up getting myself the cheaper &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mechanicalkeyboards.com&#x2F;shop&#x2F;index.php?l=product_detail&amp;amp;p=3550&quot;&gt;Vortex Core&lt;&#x2F;a&gt;. The core, made by the same company that produces the well-known &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mechanicalkeyboards.com&#x2F;shop&#x2F;index.php?l=product_detail&amp;amp;p=3527&quot;&gt;POK3R&lt;&#x2F;a&gt;, is a programmable 40% with a staggered layout.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;overall-build&quot;&gt;Overall build&lt;&#x2F;h2&gt;
&lt;p&gt;The Vortex Core is built very nicely, I chose mine with the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.cherrymx.de&#x2F;en&#x2F;mx-original&#x2F;mx-brown.html&quot;&gt;Cherry MX Brown&lt;&#x2F;a&gt; switches, since I dislike overly clicky keyboards, and I have had no problems with noise. The keys also feel very nice, and are effortless to type with. Interestingly, my keyboard shipped with an extra &amp;quot;Windows&amp;quot; key in place of a function key, which on a keyboard that makes heavy use of function keys, was a bit annoying. Not a huge deal though, since I just know what the key does, and I don&#x27;t spend much time looking at the keycaps anyways.&lt;&#x2F;p&gt;
&lt;p&gt;That being said, since the keyboard has so many shortcuts and combinations to get things done, I really like the fact that the core comes with color-coded keycaps that tell you what they do.&lt;&#x2F;p&gt;
&lt;p&gt;The keyboard&#x27;s baseplate is made of aluminum, and is CNC-cut, so it both looks and feels very nice. For a keyboard that I can wrap my (admittedly large) hand around, it is fairly heavy too (I seem to remember the FedEx shipment coming in at around 3lbs). In this case, heavy is not at all a bad thing. The weight of this keyboard makes it feel... expensive. Also, it never feels like the board is sliding away when I&#x27;m typing.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;vortex-core&#x2F;core.jpg&quot; alt=&quot;The keyboard&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;One downside though, in terms of connectivity, the keyboard unfortunately uses USB micro connector instead of the newer (and nicer) USB type C connector. As someone who connects his life with USB-C, I am not the biggest fan of this choice, but at least I had a right-angle USB-micro cable lying around that I can use with it. Alongside the USB-micro connection, removing the backplate will reveal a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;JTAG&quot;&gt;JTAG&lt;&#x2F;a&gt; connector that allows you to flash custom firmware to the keyboard if you want. @ChaoticEnigma has forked the popular &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;qmk&#x2F;qmk_firmware&quot;&gt;QMK&lt;&#x2F;a&gt; keyboard firmware as &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pok3r-custom&#x2F;qmk_pok3r&quot;&gt;&lt;code&gt;qmk_pok3r&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, and added support for many Vortex boards including the Core, if you are looking to load something more custom.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;keybindings&quot;&gt;Keybindings&lt;&#x2F;h2&gt;
&lt;p&gt;I have been talking non-stop about this keyboard&#x27;s keybindings. So, &lt;em&gt;what&#x27;s up with that?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Keybindings are very common on 40% keyboards, since many keys you have probably grown to love simply are not on the keyboard anymore. No &lt;kbd&gt;F&lt;&#x2F;kbd&gt; keys, no number keys, no arrow keys, no symbols, and no quotations either. For this quick overview, I will explain this for a Vortex Core keyboard &lt;em&gt;without&lt;&#x2F;em&gt; any custom programming.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s say you wanted to type the number &lt;code&gt;5&lt;&#x2F;code&gt;. On the core, this is done by pressing &lt;kbd&gt;fn1&lt;&#x2F;kbd&gt;+&lt;kbd&gt;F&lt;&#x2F;kbd&gt; (there are three function keys on the core. &lt;kbd&gt;fn&lt;&#x2F;kbd&gt;, &lt;kbd&gt;fn1&lt;&#x2F;kbd&gt;, and &lt;kbd&gt;pn&lt;&#x2F;kbd&gt;). While this might be a bit confusing at first, it is a fairly simple system to learn, and the color-coded keycap markings make the learning process super easy.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;programming&quot;&gt;Programming&lt;&#x2F;h2&gt;
&lt;p&gt;There are three main things I wanted to do immediately after getting my core:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Remap &lt;kbd&gt;Caps Lock&lt;&#x2F;kbd&gt; to &lt;kbd&gt;Tab&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Switch the &lt;kbd&gt;Win&lt;&#x2F;kbd&gt; and &lt;kbd&gt;Alt&lt;&#x2F;kbd&gt; keys to match the layout of my Thinkpad&lt;&#x2F;li&gt;
&lt;li&gt;Remap the arrow keys to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hea-www.harvard.edu&#x2F;%7Efine&#x2F;Tech&#x2F;vi.html&quot;&gt;vim keys&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The first could be done simply by performing a firmware upgrade to the latest version for the core. Setting custom keybindings on the other hand, requires switching the core&#x27;s firmware to the &lt;code&gt;MPC&lt;&#x2F;code&gt; version. &lt;&#x2F;p&gt;
&lt;p&gt;This process unfortunately requires access to a computer that runs Windows (or VirtualBox). On windows, the setup process is really quite easy. You go to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.vortexgear.tw&#x2F;db&#x2F;upload&#x2F;webdata4&#x2F;6vortex_201861271445393.exe&quot;&gt;this link&lt;&#x2F;a&gt;, which will download the firmware upgrade tool. Running the tool, and plugging in the keyboard will provide you with some options.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;vortex-core&#x2F;core-mpc-tool.png&quot; alt=&quot;Vortex Core firmware upgrade tool&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &amp;quot;bin group&amp;quot; selection provides two options. Selecting &lt;code&gt;Core by MPC&lt;&#x2F;code&gt; will flash the re-programmable firmware to the keyboard, and the other option will restore the keyboard to factory firmware.&lt;&#x2F;p&gt;
&lt;p&gt;Vortex provides a programming tool, but I am not a huge fan of it. I plan to write a Java app that can program the keyboard (and load saved profiles from it), but for now, I am using a great tool made by @tsfreddie called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;tsfreddie.github.io&#x2F;much-programming-core&#x2F;&quot;&gt;Much Programming Core&lt;&#x2F;a&gt;. This tool allows you to configure keybindings and remap keys through his website, and there are easy-to-follow instructions on how to download the correct file, and flash your keyboard.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;vortex-core&#x2F;core-mpc-webapp.png&quot; alt=&quot;Much Programming Core website&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Speaking of flashing the board, with the MPC firmware, the process for loading custom keybindings (which works on any OS) is really easy and simple. Just unplug the keyboard, then plug it back in while holding &lt;kbd&gt;fn&lt;&#x2F;kbd&gt;+&lt;kbd&gt;D&lt;&#x2F;kbd&gt;. This will cause the keyboard to mount as a USB drive, and you can drop configuration files on to it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;do-i-recommend-it&quot;&gt;Do I recommend it?&lt;&#x2F;h2&gt;
&lt;p&gt;Well, that depends. If you are the type of person to customize everything for maximum efficiency, go for it! The Vortex Core is a very nice keyboard with more configurability than I can wrap my head around (even if you need a third party tool to do so). If you just want something simple, stick to a 60% keyboard. The lack of numbers on the core drives many people crazy.&lt;&#x2F;p&gt;
&lt;p&gt;For programmers: you basically need to remap your keys. Most common keys (brackets, quotes, operators, ...) are hidden behind one or two function keys, and the learning curve might hurt for the first week or so.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Using Bazel to create Minecraft modpacks</title>
            <pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/corepack-development/</link>
            <guid>https://ewpratten.com/blog/corepack-development/</guid>
            <description>&lt;p&gt;&lt;em&gt;All content of this post is based around the work I did &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;corepack&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Back in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;minecraft.gamepedia.com&#x2F;Java_Edition_1.2.5&quot;&gt;2012&lt;&#x2F;a&gt;, I got in to Minecraft mod development, and soon after, put together an almost-vanilla client-side modpack for myself that mainly contained rendering, UI, and quality-of-life tweaks. While this modpack never got published, or was even given a name, I kept maintaining it for years until I eventually stopped playing Minecraft just before the release of Minecraft &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;minecraft.gamepedia.com&#x2F;Java_Edition_1.9&quot;&gt;&lt;code&gt;1.9&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; (in 2016). I had gotten so used to the features of this modpack, that playing truly vanilla Minecraft didn&#x27;t feel correct.&lt;&#x2F;p&gt;
&lt;p&gt;Recently, a few friends invited me to join their private Minecraft server, and despite having not touched the game for around four years, I decided to join. This was a bit of a mistake on their part, as they now get the pleasure of someone who used to main &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;minecraft.gamepedia.com&#x2F;Java_Edition_1.6.4&quot;&gt;&lt;code&gt;1.6.4&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; constantly walking up to things and asking &lt;em&gt;&amp;quot;What is this and how does it work?&amp;quot;&lt;&#x2F;em&gt;. I have started to get used to the very weird new collection of blocks, completely reworked command system, over-complicated combat system, and a new rendering system that makes everything &amp;quot;look wrong&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;One major thing was still missing though, &lt;em&gt;where was my modpack?&lt;&#x2F;em&gt; I set out to rebuild my good old modpack (and finally give it a name, &lt;em&gt;CorePack&lt;&#x2F;em&gt;). Not much has changed, most of the same rendering and UI mods are back, along with the same &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;OpenGL_Shading_Language&quot;&gt;GLSL&lt;&#x2F;a&gt; shaders, and similar textures. Although, I did decide to take a &lt;em&gt;&amp;quot;major step&amp;quot;&lt;&#x2F;em&gt; and switch from the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;files.minecraftforge.net&#x2F;&quot;&gt;Forge Mod Loader&lt;&#x2F;a&gt; to the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;fabricmc.net&#x2F;&quot;&gt;Fabric Loader&lt;&#x2F;a&gt;, since I prefer Fabric&#x27;s API. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;curseforge-bazel&quot;&gt;Curseforge &amp;amp; Bazel&lt;&#x2F;h2&gt;
&lt;p&gt;I don&#x27;t remember &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;curseforge.com&#x2F;&quot;&gt;Curseforge&lt;&#x2F;a&gt; existing back when I used to play regularly. It is a huge improvement over the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.planetminecraft.com&#x2F;&quot;&gt;PlanetMinecraft&lt;&#x2F;a&gt; forums, as curse provides a clean way to access data about published Minecraft mods, and even has an API! Luckily, since I switched the modpack to Fabric, every mod I was looking for was available through curse (although, it seems &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;notenoughitems&quot;&gt;NEI&lt;&#x2F;a&gt; is a thing of the past).&lt;&#x2F;p&gt;
&lt;p&gt;My main goal for the updated version of CorePack was to design it in such a way I could make a CI pipeline generate new releases for me when mods are updated. This requires programmatically pulling information about mods, and their JAR files using a buildsystem script. Since this project involves working with a large amount of data from various external sources, I once-again chose to use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bazel.build&quot;&gt;Bazel&lt;&#x2F;a&gt;, a buildsystem that excels at these kinds of projects.&lt;&#x2F;p&gt;
&lt;p&gt;While Curseforge provides a very easy to use API for working with mod data, @Wyn-Price (a fellow mod developer) has put together an amazing project called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.cursemaven.com&#x2F;&quot;&gt;Curse Maven&lt;&#x2F;a&gt; that I decided to use instead. Curse Maven is a serverless API that acts much like my &lt;a href=&quot;&#x2F;blog&#x2F;2020&#x2F;09&#x2F;17&#x2F;ultralight-writeup&quot;&gt;Ultralight project&lt;&#x2F;a&gt;. Any request for an artifact to Curse Maven will be redirected, and served from the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;authors.curseforge.com&#x2F;knowledge-base&#x2F;projects&#x2F;529-api#Maven&quot;&gt;Curseforge Maven server&lt;&#x2F;a&gt; without the need for me to figure out the long-form artifact identifiers used internally by curse.&lt;&#x2F;p&gt;
&lt;p&gt;Curse Maven makes loading a mod (in this case, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.curseforge.com&#x2F;minecraft&#x2F;mc-mods&#x2F;fabric-api&quot;&gt;&lt;code&gt;fabric-api&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;) into Bazel as easy as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# WORKSPACE
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Load bazel_maven_repository
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;http_archive&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;maven_repository_rules&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip_prefix &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bazel_maven_repository-1.2.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;urls &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;square&#x2F;bazel_maven_repository&#x2F;archive&#x2F;1.2.0.zip&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@maven_repository_rules&#x2F;&#x2F;maven:maven.bzl&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;maven_repository_specification&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@maven_repository_rules&#x2F;&#x2F;maven:jetifier.bzl&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;jetifier_init&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;jetifier_init&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Declare any mods as maven artifacts
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;maven_repository_specification&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;maven&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifacts &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;curse.maven:fabric-api:3049174&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;insecure&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;repository_urls &lt;&#x2F;span&gt;&lt;span&gt;= [
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.cursemaven.com&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    ],
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The above snippet uses a Bazel ruleset developed by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;squareup.com&#x2F;ca&#x2F;en&quot;&gt;Square, Inc.&lt;&#x2F;a&gt; called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;square&#x2F;bazel_maven_repository&quot;&gt;&lt;code&gt;bazel_maven_repository&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;modpack-configuration&quot;&gt;Modpack configuration&lt;&#x2F;h2&gt;
&lt;p&gt;Since my pack is designed for use with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;multimc.org&#x2F;&quot;&gt;MultiMC&lt;&#x2F;a&gt;, two sets of configuration files are needed. The first set tells MultiMC which versions of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.lwjgl.org&#x2F;&quot;&gt;LWJGL&lt;&#x2F;a&gt;, Minecraft, and Fabric to use, and the second set are the in-game config files. Many of these files contain information that I would like to modify from Bazel during the modpack build step. Luckily, the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;skylark&#x2F;language.html&quot;&gt;Starlark&lt;&#x2F;a&gt; core library comes with an action called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;2.0.0&#x2F;skylark&#x2F;lib&#x2F;actions.html#expand_template&quot;&gt;&lt;code&gt;expand_template&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. &lt;code&gt;expand_template&lt;&#x2F;code&gt; is basically a find-and-replace tool that will perform substitutions on files. Since this is an action, and not a rule, it must be wrapped with a small rule declaration:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# tools&#x2F;template.bzl
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;expand_template_impl&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    ctx.actions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expand_template&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span&gt;= ctx.file.template,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output &lt;&#x2F;span&gt;&lt;span&gt;= ctx.outputs.out,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;substitutions &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;            k: ctx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expand_location&lt;&#x2F;span&gt;&lt;span&gt;(v, ctx.attr.data)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;k, v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;ctx.attr.substitutions.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        },
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_executable &lt;&#x2F;span&gt;&lt;span&gt;= ctx.attr.is_executable,
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;expand_template = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rule&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;implementation &lt;&#x2F;span&gt;&lt;span&gt;= expand_template_impl,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attrs &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: attr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mandatory &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow_single_file &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;substitutions&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: attr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string_dict&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mandatory &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: attr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mandatory &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;is_executable&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: attr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mandatory &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: attr.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;label_list&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allow_files &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;),
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In a &lt;code&gt;BUILD&lt;&#x2F;code&gt; file, template rules can be defined as follows:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# BUILD
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&#x2F;tools:template.bzl&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;expand_template&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expand_template&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;my_config&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;config.json.in&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;out &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;config.json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;substitutions &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TEST_SUBS&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using the following example file as &lt;code&gt;config.json.in&lt;&#x2F;code&gt;, this rule would have the following effect:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; config.json.in
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TEST_SUBS&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; config.json
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello world&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;packaging&quot;&gt;Packaging&lt;&#x2F;h2&gt;
&lt;p&gt;Once mods are loaded, and configuration files are defined in the buildsystem, I use a large number of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;general.html#filegroup&quot;&gt;&lt;code&gt;filegroup&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;general.html#genrule&quot;&gt;&lt;code&gt;genrule&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; rules to set up a directory hierarchy in the workspace, and wrap everything in a call to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;sourcegraph.com&#x2F;github.com&#x2F;v2ray&#x2F;ext&#x2F;-&#x2F;blob&#x2F;bazel&#x2F;zip.bzl#L23:25&quot;&gt;&lt;code&gt;zipper&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; to package the modpack into a ZIP file.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, I use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;features&#x2F;actions&quot;&gt;GitHub Actions&lt;&#x2F;a&gt; to automatically run the buildscript, and publish the resulting MultiMC instance zip to the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;corepack&quot;&gt;GitHub repo&lt;&#x2F;a&gt; for this project.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Mounting Google Drive accounts as network drives</title>
            <pubDate>Thu, 15 Oct 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/mounting-google-drives/</link>
            <guid>https://ewpratten.com/blog/mounting-google-drives/</guid>
            <description>&lt;p&gt;When sharing files, I use three main services. I use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Firefox_Send&quot;&gt;Firefox Send&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;book.keybase.io&#x2F;docs&#x2F;files&quot;&gt;KeybaseFS&lt;&#x2F;a&gt; to share one-off and large files with friends, and I use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;drive.google.com&quot;&gt;Google Drive&lt;&#x2F;a&gt; to store some personal files, and for everything school-related (I don&#x27;t get a choice about this). For the first two services, sharing a file is as simple as calling &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;timvisee&#x2F;ffsend&quot;&gt;&lt;code&gt;ffsend&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; or moving a local file into my kbfs mountpoint, and I am done. Google Drive, on the other hand, the process isn&#x27;t as easy. While some Linux distributions have Google Drive integration out of the box (I miss daily-driving &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.chromium.org&#x2F;chromium-os&quot;&gt;ChromiumOS&lt;&#x2F;a&gt;), Linux users generally have to go to &lt;code&gt;drive.google.com&lt;&#x2F;code&gt;, and deal with the Google Drive webapp. Not sure if this is an &amp;quot;only me&amp;quot; problem, but whenever I need to quickly make a change to a document through the webapp, It decides to stop working.&lt;&#x2F;p&gt;
&lt;p&gt;I really like the Keybase approach of mounting remote storage as a &amp;quot;network drive&amp;quot; on my laptop, and wanted to do something similar for Google Drive. This is where a great tool called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;rclone.org&quot;&gt;&lt;code&gt;rclone&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; comes in to play. Rclone is a very easy-to-use command-line application for working with cloud storage. I originally learned about it when I used to host this website on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.digitalocean.com&#x2F;products&#x2F;spaces&#x2F;&quot;&gt;DigitalOcean Spaces&lt;&#x2F;a&gt; a few years ago. Out of the box, Rclone supports &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;rclone.org&#x2F;#providers&quot;&gt;many cloud providers&lt;&#x2F;a&gt;, including Google Drive!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;setting-up-rclone-for-use-with-google-drive&quot;&gt;Setting up Rclone for use with Google Drive&lt;&#x2F;h2&gt;
&lt;p&gt;Now for the fun part, to get started with Rclone and Google Drive on your computer, you must first install Rclone. I am going to assume you are using a Linux-based operating system here, but with some slight tweaking, this works on BSD and Windows too!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Install Rclone with the automated installer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;rclone.org&#x2F;install.sh | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; bash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once Rclone is installed, you need to hop on over to the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;console.developers.google.com&#x2F;&quot;&gt;Google Cloud Developer Console&lt;&#x2F;a&gt;, and create a new project. Under the &lt;em&gt;ENABLE APIS AND SERVICES&lt;&#x2F;em&gt; section, search for, and enable the &lt;code&gt;Google Drive API&lt;&#x2F;code&gt;. This will expose an API to your Google Drive, and let programs interact with the files (if setting up multiple accounts, you only need to enable the API on one of them). Click the &lt;em&gt;Credentials&lt;&#x2F;em&gt; tab in the left-side panel, then &lt;em&gt;Create credentials&lt;&#x2F;em&gt;. This will open a panel letting you set up access to your new API.&lt;&#x2F;p&gt;
&lt;p&gt;With the panel open, click &lt;em&gt;CONFIGURE CONSENT SCREEN&lt;&#x2F;em&gt;, &lt;em&gt;External&lt;&#x2F;em&gt;, then &lt;em&gt;CREATE&lt;&#x2F;em&gt;. Enter &lt;code&gt;rclone&lt;&#x2F;code&gt; as the application name, and save it. You now have set up one of those &amp;quot;sign in with Google&amp;quot; screens for yourself. Clicking the &lt;em&gt;Credentials&lt;&#x2F;em&gt; tab again will bring you to an area where you can generate the needed API keys for Rclone.&lt;&#x2F;p&gt;
&lt;p&gt;Click &lt;em&gt;+ CREATE CREDENTIALS&lt;&#x2F;em&gt; at the top of the panel, and select &lt;em&gt;OAuth client ID&lt;&#x2F;em&gt;. Set the application type to &lt;em&gt;Desktop app&lt;&#x2F;em&gt;, and finally, press &lt;em&gt;Create&lt;&#x2F;em&gt;. You will now be shown the needed info to link Rclone to your account(s).&lt;&#x2F;p&gt;
&lt;div class=&quot;center&quot; markdown=&quot;1&quot;&gt;
*Note: This API project is **not verified** by Google.*&lt;br&gt;
*This means that you will be greeted with a scary warning when logging in the first time. Just ignore it.*
&lt;&#x2F;div&gt;
&lt;p&gt;Back in the terminal, we can run &lt;code&gt;rclone config&lt;&#x2F;code&gt; to set up a configuration for Google Drive. You will be prompted with many options. Use the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# &amp;gt; rclone config
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Create a new config
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span&gt; remote
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Set a name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; my_drive
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Choose a storage type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Storage&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; drive
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# You will be asked for a client ID and secret. These are the strings we just generated
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Set the scope to allow Rclone access to your files
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Select the default option for everything until asked if you want to use &amp;quot;auto config&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# When asked, say yes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;auto_config&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; y
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Set team drive to no
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;team_drive&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; n
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Verify the information, then say yes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; y
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Almost done. You need to run &lt;code&gt;rclone ls my_drive:&lt;&#x2F;code&gt; (the colon is important). This will probably ask you to go to a link, and enable an API. Do so.&lt;&#x2F;p&gt;
&lt;p&gt;Your Google Drive can now be mounted by running the following (feel free to change the paths to whatever you want)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;mkdir -p ~&#x2F;google_drive
&lt;&#x2F;span&gt;&lt;span&gt;rclone mount my_drive: ~&#x2F;google_drive --vfs-cache-mode writes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;starting-rclone-on-boot&quot;&gt;Starting Rclone on boot&lt;&#x2F;h2&gt;
&lt;p&gt;You probably don&#x27;t want to run an &lt;code&gt;rclone&lt;&#x2F;code&gt; command every time you start your computer. This can be solved in one of two ways&lt;&#x2F;p&gt;
&lt;h3 id=&quot;for-i3wm-users&quot;&gt;For i3wm users&lt;&#x2F;h3&gt;
&lt;p&gt;On &lt;code&gt;i3wm&lt;&#x2F;code&gt;, just add the following line to &lt;code&gt;~&#x2F;.config&#x2F;i3&#x2F;config&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exec&lt;&#x2F;span&gt;&lt;span&gt; --no-startup-id rclone mount my_drive: &#x2F;home&#x2F;&amp;lt;user&amp;gt;&#x2F;google_drive --vfs-cache-mode writes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Make sure to replace &lt;code&gt;&amp;lt;user&amp;gt;&lt;&#x2F;code&gt; with your username.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Keep in mind, &lt;code&gt;exec&lt;&#x2F;code&gt; commands are not run when reloading &lt;code&gt;i3&lt;&#x2F;code&gt; with &lt;kbd&gt;Mod&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;+&lt;kbd&gt;r&lt;&#x2F;kbd&gt;. You must log out (&lt;kbd&gt;Mod&lt;&#x2F;kbd&gt;+&lt;kbd&gt;Shift&lt;&#x2F;kbd&gt;+&lt;kbd&gt;e&lt;&#x2F;kbd&gt;), and back in again.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;for-ubuntu-debian-based-users&quot;&gt;For Ubuntu &#x2F; Debian-based users&lt;&#x2F;h3&gt;
&lt;p&gt;In pretty much any Debian-based system, you can edit &lt;code&gt;&#x2F;etc&#x2F;rc.local&lt;&#x2F;code&gt; (using &lt;code&gt;sudo&lt;&#x2F;code&gt;), and add the following line right before &lt;code&gt;exit 0&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rclone&lt;&#x2F;span&gt;&lt;span&gt; mount my_drive: &#x2F;home&#x2F;&amp;lt;user&amp;gt;&#x2F;google_drive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --vfs-cache-mode&lt;&#x2F;span&gt;&lt;span&gt; writes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Make sure to replace &lt;code&gt;&amp;lt;user&amp;gt;&lt;&#x2F;code&gt; with your username.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Reading metadata from a bitmap file</title>
            <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/reading-a-bitmap/</link>
            <guid>https://ewpratten.com/blog/reading-a-bitmap/</guid>
            <description>&lt;p&gt;Recently, @rsninja722 was telling me about &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rsninja722&#x2F;file2bmp&quot;&gt;a project&lt;&#x2F;a&gt; he was working on. The basic idea is that you pass a file into his program, and it generates a bitmap of the binary data. This was inspired by &lt;a href=&quot;&#x2F;post&#x2F;ef7b3166&quot;&gt;an old post of mine&lt;&#x2F;a&gt; where I did the same thing with a horribly written Python script and the library &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;python-pillow&#x2F;Pillow&quot;&gt;&lt;code&gt;pillow&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Both of us are currently teaching ourselves the &lt;strong&gt;C&lt;&#x2F;strong&gt; programming language. Him, for a break from JavaScript. Me, for no particular reason. As somebody who mostly lives in the world of high-level C-family languages (C++ and Python), learning C has been a challenging, fun, and rewarding experience. I enjoy immersing myself in &lt;em&gt;&amp;quot;the old way of doing things&amp;quot;&lt;&#x2F;em&gt;. This means sitting down with my Father&#x27;s old &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;archive.org&#x2F;search.php?query=external-identifier%3A%22urn%3Aoclc%3Arecord%3A1028045558%22&quot;&gt;&lt;em&gt;ANSI Standard C Programmer&#x27;s Reference&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; book, and looking up what I need to know through a good old appendix full of libc headers and their function lists.&lt;&#x2F;p&gt;
&lt;p&gt;While @rsninja722 was working on his project, I found myself using &lt;code&gt;xxd&lt;&#x2F;code&gt; and &lt;code&gt;python3&lt;&#x2F;code&gt; a lot to debug small issues he encountered. This is fairly tedious, so I set out to write myself a tool to help. I have a small GitHub repository called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;smalltools&quot;&gt;smalltools&lt;&#x2F;a&gt; where I keep the source code to a few small programs I write for fun. I added a new tool file to the repo (called &lt;code&gt;bmpinfo&lt;&#x2F;code&gt;) and got to work.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-does-a-bitmap-work&quot;&gt;How does a bitmap work?&lt;&#x2F;h2&gt;
&lt;p&gt;This was the first big question. I had learned a while ago when working on another project that the image data stored in a bitmap is just raw pixel values, but aside from that, I had no clue how this file format works. Luckily, Wikipedia came to the rescue (as per usual) with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;BMP_file_format&quot;&gt;this great article&lt;&#x2F;a&gt;. It turns out that the file metadata, like the pixel values, is stupidly simple to work with**&lt;sup&gt;1, 2&lt;&#x2F;sup&gt;**. &lt;&#x2F;p&gt;
&lt;div style=&quot;color:gray;&quot; markdown=&quot;1&quot;&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;1.&lt;&#x2F;strong&gt; I am going to cover only images with &lt;code&gt;24-bit&lt;&#x2F;code&gt; color, with no compression&lt;&#x2F;em&gt;&lt;br&gt;
&lt;em&gt;&lt;strong&gt;2.&lt;&#x2F;strong&gt; All integers in a bitmap are little-&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Endianness&quot;&gt;endian&lt;&#x2F;a&gt;. These must be converted to the host&#x27;s endianness&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;A simple bitmap file consists of only three parts (although the specification can support more data):&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;A file header&lt;&#x2F;li&gt;
&lt;li&gt;File information &#x2F; metadata&lt;&#x2F;li&gt;
&lt;li&gt;Pixel data&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I will cover each individually.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-file-header&quot;&gt;The file header&lt;&#x2F;h3&gt;
&lt;p&gt;Like any other standard binary file format, bitmaps start with a file header. This is a block of data that tells programs what this file is, and how it works. The bitmap file header starts with two characters that tell programs what type of bitmap this is. I have only worked with &lt;strong&gt;BM&lt;&#x2F;strong&gt; type files, but the following are all possible file types:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Identifier&lt;&#x2F;th&gt;&lt;th&gt;Type&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;BM&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;Windows 3.1x, 95, NT, ... etc.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;BA&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;OS&#x2F;2 struct bitmap array&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;CI&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;OS&#x2F;2 struct color icon&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;CP&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;OS&#x2F;2 const color pointer&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;IC&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;OS&#x2F;2 struct icon&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;PT&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;OS&#x2F;2 pointer&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The rest of the data is fairly standard. Since I am working in &lt;strong&gt;C&lt;&#x2F;strong&gt;, I have defined this data as a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Struct_(C_programming_language)&quot;&gt;&lt;code&gt;struct&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. Here is the header:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; File signature
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; signature[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; File size
&lt;&#x2F;span&gt;&lt;span&gt;    uint32_t size;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Reserved data
&lt;&#x2F;span&gt;&lt;span&gt;    uint16_t reservedA;
&lt;&#x2F;span&gt;&lt;span&gt;    uint16_t reservedB;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Location of the first pixel
&lt;&#x2F;span&gt;&lt;span&gt;    uint32_t data_offset;
&lt;&#x2F;span&gt;&lt;span&gt;} header_t;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bitmap-information-header&quot;&gt;Bitmap Information Header&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;em&gt;Bitmap Information Header&lt;&#x2F;em&gt; (also called &lt;strong&gt;DIB&lt;&#x2F;strong&gt;) contains more information about the file, and can vary in size based on the program that created it. As mentioned earlier, I will only cover the simplest implementation. Due to the possibility of multiple DIB formats, the first element of the header is its own size in bytes. This way, any program can handle any size of DIB without needing to actually implement every header tpe.&lt;&#x2F;p&gt;
&lt;p&gt;Like the file header, I have also written this as a &lt;code&gt;struct&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Size of self
&lt;&#x2F;span&gt;&lt;span&gt;    uint32_t size;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Image dimensions in pixels
&lt;&#x2F;span&gt;&lt;span&gt;    int32_t width;
&lt;&#x2F;span&gt;&lt;span&gt;    int32_t height;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Image settings
&lt;&#x2F;span&gt;&lt;span&gt;    uint16_t color_planes;
&lt;&#x2F;span&gt;&lt;span&gt;    uint16_t color_depth;
&lt;&#x2F;span&gt;&lt;span&gt;    uint32_t compression;
&lt;&#x2F;span&gt;&lt;span&gt;    uint32_t raw_size; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This is generally unused
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Resolution in pixels per metre
&lt;&#x2F;span&gt;&lt;span&gt;    int32_t horizontal_ppm;
&lt;&#x2F;span&gt;&lt;span&gt;    int32_t vertical_ppm;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Other settings
&lt;&#x2F;span&gt;&lt;span&gt;    uint32_t color_table;
&lt;&#x2F;span&gt;&lt;span&gt;    uint32_t important_colors;
&lt;&#x2F;span&gt;&lt;span&gt;} info_t;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Some notes about the data in this header:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Image dimensions are &lt;strong&gt;signed&lt;&#x2F;strong&gt; integers. Using a negative size will cause image data to be read right-to-left and bottom-to-top&lt;&#x2F;li&gt;
&lt;li&gt;A setting is present for the pixel density of the image. This is measured in pixels-per-metre (usually &lt;code&gt;3780&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;color_table&lt;&#x2F;code&gt; is the number of colors used in the palette. This defaults to &lt;code&gt;0&lt;&#x2F;code&gt; (meaning &lt;em&gt;all&lt;&#x2F;em&gt;)&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;important_colors&lt;&#x2F;code&gt; is the number of colors that are important in the image. This defaults to &lt;code&gt;0&lt;&#x2F;code&gt; (meaning &lt;em&gt;all&lt;&#x2F;em&gt;) and is almost never used &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;pixel-data&quot;&gt;Pixel data&lt;&#x2F;h3&gt;
&lt;p&gt;After the file headers comes the pixel data. This is written pixel-by-pixel, and is stored as 3 bytes in the format &lt;code&gt;BBGGRR&lt;&#x2F;code&gt; (little-endian, remember?).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;loading-a-bitmap-file-into-a-c-program&quot;&gt;Loading a bitmap file into a C program&lt;&#x2F;h2&gt;
&lt;p&gt;For simplicity, I am going to write this for a computer that is based on a little-endian architecture. In reality, most computers are big-endian, and require that you &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;codereview.stackexchange.com&#x2F;a&#x2F;151070&quot;&gt;reverse the endian&lt;&#x2F;a&gt; of everything read in.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdlib.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdint.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Headers defined above
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern struct &lt;&#x2F;span&gt;&lt;span&gt;header_t;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern struct &lt;&#x2F;span&gt;&lt;span&gt;info_t;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;typedef struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    uint8_t blue;
&lt;&#x2F;span&gt;&lt;span&gt;    uint8_t green;
&lt;&#x2F;span&gt;&lt;span&gt;    uint8_t red;
&lt;&#x2F;span&gt;&lt;span&gt;} pixel_t;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Read a bitmap
&lt;&#x2F;span&gt;&lt;span&gt;    FILE* p_bmp = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fopen&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;myfile.bmp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rb&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Create header and info data
&lt;&#x2F;span&gt;&lt;span&gt;    header_t header;
&lt;&#x2F;span&gt;&lt;span&gt;    info_t info;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Read from the file.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Some compilers will pad structs, so I have 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; manually entered their sizes (14, and 40 bytes)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fread&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;header, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, p_bmp);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fread&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;info, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, p_bmp);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Read every pixel
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;        pixel_t pixel;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fread&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;pixel, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, p_bmp) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Do something with the pixel
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;and-thats-it&quot;&gt;And thats it!&lt;&#x2F;h2&gt;
&lt;p&gt;Reading bitmap data is really quite simple. Of course, there are many sub-standards and formats that require more code, and sometimes decompression algorithms, but this is just an overview.&lt;&#x2F;p&gt;
&lt;p&gt;If you would like to see the small library I built for myself for doing this, take a look &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;smalltools&#x2F;tree&#x2F;master&#x2F;utils&#x2F;img&quot;&gt;here&lt;&#x2F;a&gt;. (it includes endianness handling)&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>My workflow: video conference edition</title>
            <pubDate>Thu, 24 Sep 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/gopro-webcam/</link>
            <guid>https://ewpratten.com/blog/gopro-webcam/</guid>
            <description>&lt;p&gt;It has been quite some fun writing about my workflows for various day-to-day things on this blog recently, and since I have been getting a lot of positive feedback from my last few workflow-related posts, I am planning to continue writing them.&lt;&#x2F;p&gt;
&lt;p&gt;As my courses and work have moved mostly online, I have looked to improve my home setup. This started out with investing in another monitor to be dedicated to displaying server and network status info for my recent summer internship at &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;industrialbrothers.com&#x2F;&quot;&gt;Industrial Brothers&lt;&#x2F;a&gt;. After that, I started looking in to purchasing a high-end condenser microphone and another audio interface to drive it, but quickly discovered that Lenovo did such a good job on the internal mic in my &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.lenovo.com&#x2F;ca&#x2F;en&#x2F;laptops&#x2F;thinkpad&#x2F;thinkpad-t-series&#x2F;ThinkPad-T480&#x2F;p&#x2F;22TP2TT4800&quot;&gt;ThinkPad T480&lt;&#x2F;a&gt; that it is hard to buy a better microphone without spending a large chunk of money.&lt;&#x2F;p&gt;
&lt;p&gt;So, I can keep video conferences on their own screen, while still doing work on the other two, plus I have a pretty good mic. There is only one thing left to upgrade. The webcam!&lt;&#x2F;p&gt;
&lt;p&gt;I went searching for something decent, and immediately encountered a large issue. Everyone is sold out of webcams. That&#x27;s fair, there is a massive market for them right now, and not many companies actively producing new products. This lead me to a secondary option, one that I was planning to do quite a while ago when I ran a joint gaming YouTube channel with a friend in elementary school. &lt;&#x2F;p&gt;
&lt;p&gt;Commonly, professional videographers will actually use a spare DSLR or point&amp;amp;shoot camera with a video output as their webcam. When I had originally looked in to doing this, I was turned off by the insane prices of capture cards. At the time, I was only familiar with large tech brands, and seeing a mid-tier capture card for $500 wasn&#x27;t exactly 12-year-old-me-friendly.&lt;&#x2F;p&gt;
&lt;p&gt;More recently, I have gotten in to searching through eBay for generally Chinese manufacturing facilities selling unbranded products in bulk directly. Since these products are basically coming straight off an assembly line, and not going through any other company, they end up being ridiculously cheap! &lt;em&gt;(I recommend looking for Arduinos this way. You can usually acquire them in batches at $1.15 per board)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;During one of my searches, I stumbled across a few sellers selling batches of generic &#x2F; un-branded capture cards. Clearly designed to be resold with custom branding. You can pick one of these up for only $15! The one I have can do 1080p&#x2F;60 and 2.7k&#x2F;30 (disclaimer: these are the only resolutions I have tried. It can probably handle other sizes). &lt;&#x2F;p&gt;
&lt;p&gt;Another nice thing about the card I got, since it isn&#x27;t made by some company that requires special software to run their products (cough, Elgato, cough) the device was plug&amp;amp;play compatible with my Ubuntu laptop!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;alright-enough-about-cheap-capture-cards-and-on-to-my-setup&quot;&gt;Alright. Enough about cheap capture cards, and on to my setup.&lt;&#x2F;h2&gt;
&lt;p&gt;For the actual camera, I opted for the &lt;em&gt;GoPro Hero 5 Black edition&lt;&#x2F;em&gt; that has been sitting on my desk unused for the past year. Unfortunately, this camera is no longer sold by GoPro. If you are looking to replicate this setup, I can strongly recommend picking up the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gopro.com&#x2F;en&#x2F;us&#x2F;shop&#x2F;cameras&#x2F;hero7-black&#x2F;CHDHX-701-master.html&quot;&gt;Hero 7 Black edition&lt;&#x2F;a&gt;, which is the most recent GoPro camera to support live HDMI video without needing a bunch of accessories.&lt;&#x2F;p&gt;
&lt;p&gt;Speaking of HDMI video, I also picked up a Micro HDMI to HDMI cable to connect from the camera&#x27;s output to the capture card. &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ebay.ca&#x2F;itm&#x2F;Micro-HDMI-to-HDMI-Cable-Supports-Ethernet-3D-1080P-Audio-Return-3-6-10-15FT&#x2F;193637232780?hash=item2d15adb08c:g:KDMAAOSwNGNfRdnR&quot;&gt;This one here&lt;&#x2F;a&gt; should do the trick, and is only $8.&lt;&#x2F;p&gt;
&lt;p&gt;For mounting, I went with a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;joby.com&#x2F;global&#x2F;gorillapod&#x2F;&quot;&gt;Jolby GorillaPod&lt;&#x2F;a&gt;, but let&#x27;s be honest. These are GoPros. There is no shortage of mounting solutions for them. You could do a first-person-view conference call if you really wanted. (New project idea..?)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;software-setup&quot;&gt;Software Setup&lt;&#x2F;h2&gt;
&lt;p&gt;The software setup process is quite simple, and fairly painless. First, near the end of every GoPro&#x27;s settings menu is a mode selector for how HDMI output should behave. Setting this to &lt;code&gt;live&lt;&#x2F;code&gt; will cause the camera to output exactly what it sees, without any status icons or timestamps, to the capture card.&lt;&#x2F;p&gt;
&lt;p&gt;On the computer end, these cheap capture cards identify themselves as webcams. So there isn&#x27;t really much setup needed. That being said, many people I know like to send their capture card output into &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;obsproject.com&#x2F;&quot;&gt;Open Broadcaster Software&lt;&#x2F;a&gt;, process the feed, then export it as a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;obsproject.com&#x2F;forum&#x2F;resources&#x2F;obs-virtualcam.949&#x2F;&quot;&gt;virtual webcam&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;some-neat-things-to-try&quot;&gt;Some neat things to try&lt;&#x2F;h2&gt;
&lt;p&gt;Experimenting with my camera&#x27;s many video cropping &#x2F; scaling modes has been quite fun. I have discovered that keeping the camera in &lt;code&gt;linear&lt;&#x2F;code&gt; mode is good for general usage and presenting, and switching to &lt;code&gt;superwide&lt;&#x2F;code&gt; is great if I need to physically demonstrate or show something.&lt;&#x2F;p&gt;
&lt;p&gt;I recently remembered that GoPros also have &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.captureguide.com&#x2F;gopro-voice-commands&#x2F;&quot;&gt;voice commands&lt;&#x2F;a&gt;. I have been using this to switch between &lt;code&gt;timelapse&lt;&#x2F;code&gt;, &lt;code&gt;video&lt;&#x2F;code&gt;, and &lt;code&gt;photo&lt;&#x2F;code&gt; modes, where I have saved a video preset in each. This is a very cheaty way to change my camera settings on the fly without needing to use the GoPro app on my phone. Here is what each of these modes is set to do on my camera:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Mode&lt;&#x2F;th&gt;&lt;th&gt;Action&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;timelapse&lt;&#x2F;td&gt;&lt;td&gt;Narrow view, zoomed in on my face. This looks like a normal laptop webcam&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;video&lt;&#x2F;td&gt;&lt;td&gt;Linear view. Very crisp, and auto-lowlight handling enabled. This looks like I&#x27;m using a DSLR&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;photo&lt;&#x2F;td&gt;&lt;td&gt;Superview. Zoomed all the way out, at full resolution. It&#x27;s so wide, you can see whats on my desk&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
</description>
        </item>
        <item>
            <title>Building a mini maven server</title>
            <pubDate>Thu, 17 Sep 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/ultralight-writeup/</link>
            <guid>https://ewpratten.com/blog/ultralight-writeup/</guid>
            <description>&lt;p&gt;I have been looking around for a small, and easy-to-use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;&quot;&gt;maven&lt;&#x2F;a&gt; server to host my personal Java libraries for some time now. I origionally went with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;jitpack.io&#x2F;&quot;&gt;Jitpack.io&lt;&#x2F;a&gt;, but didn&#x27;t like the fact I jitpack overwrites artifact &lt;code&gt;groupID&lt;&#x2F;code&gt; fields. This means that instead of specifying a package via something like &lt;code&gt;ca.retrylife:librandom:1.0.0&lt;&#x2F;code&gt;, a user would have to write &lt;code&gt;com.github.ewpratten:librandom:1.0.0&lt;&#x2F;code&gt;. While this is not a huge deal, I prefer to use a &lt;code&gt;gorupID&lt;&#x2F;code&gt; under my own domain for branding reasons. Along with this issue, I just didn&#x27;t have enough control over my artifacts with Jitpack. &lt;&#x2F;p&gt;
&lt;p&gt;From Jitpack, I moved on to hosting a maven server in a docker container on one of my webservers. This worked fine until my server crashed from a configuration issue. I decided that self-hosting was not the way to go until I have set up a more stable storage infrastructure.&lt;&#x2F;p&gt;
&lt;p&gt;After my attempt at self-hosting, I moved to (and quickly away from) &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;features&#x2F;packages&quot;&gt;GitHub Packages&lt;&#x2F;a&gt;. GitHub Packages is a great service with a huge drawback. Anyone wanting to use one of my libraries must authenticate with the github maven servers. Along with that, the buildsystem configuration to actually load a GitHub Packages artifact is currently a bit of a mess. While GitHub staff have addressed this issue, and a way to load packages without authentication is roumered to be coming to the platform sometime soon, I don&#x27;t want to wait. After this adventure, I got curious. &lt;&#x2F;p&gt;
&lt;div class=&quot;center&quot; markdown=&quot;1&quot;&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;How hard is it to write my own maven server?&lt;&#x2F;em&gt; &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Turns out, not very hard at all.&lt;&#x2F;p&gt;
&lt;p&gt;Maven servers are basically glorified static site generators that serve specific files in specific places. On top of this, the entire protocol is XML-based, which makes building one super easy. When a buildsystem like Maven or Gradle wants to fetch an artifact from a maven server, it first makes a request to &lt;code&gt;http(s):&#x2F;&#x2F;&amp;lt;baseurl&amp;gt;&#x2F;&amp;lt;groupID&amp;gt;&#x2F;&amp;lt;artifactID&amp;gt;&#x2F;&amp;lt;version&amp;gt;&#x2F;&amp;lt;artifactID&amp;gt;-&amp;lt;version&amp;gt;.pom&lt;&#x2F;code&gt; to find out any needed data about the requested artifact. An example of this file&#x27;s contents could be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;lt;!-- Response for http:&#x2F;&#x2F;maven.example.com&#x2F;ca&#x2F;retrylife&#x2F;librandom&#x2F;1.0.0&#x2F;librandom-1.0.0.pom --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;project 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;xsi:schemaLocation&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;xmlns:xsi&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;modelVersion&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;4.0.0&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;modelVersion&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;ca.retrylife&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;librandom&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;1.0.0&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;project&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I don&#x27;t exactly know the reason this file exists in most cases, since all the data returned is data the client already knows. Judging by the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;maven.apache.org&#x2F;guides&#x2F;introduction&#x2F;introduction-to-the-pom.html&quot;&gt;Project Object Model&lt;&#x2F;a&gt; specifications, some servers might use this file to return additional metadata about the artifact, but none of this data is required for my minimal working example.&lt;&#x2F;p&gt;
&lt;p&gt;Along with this request, another is sometimes made to &lt;code&gt;http(s):&#x2F;&#x2F;&amp;lt;baseurl&amp;gt;&#x2F;&amp;lt;groupID&amp;gt;&#x2F;&amp;lt;artifactID&amp;gt;&#x2F;maven-metadata.xml&lt;&#x2F;code&gt;, which is an XML file containing a list of all artifact versions stored on the server. From my testing with Gradle, a call to this endpoint is only made if there is a wildcard in the asset name in a user&#x27;s build configuration. An example of this would be &lt;code&gt;ca.retrylife:librandom:1.+&lt;&#x2F;code&gt;. An exampe of this file&#x27;s contents could be:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;modelVersion&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1.1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;ca.retrylife&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;librandom&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;1.0.1&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;versioning&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;latest&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;1.0.1&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;latest&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;release&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;1.0.1&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;release&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;versions&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;1.0.1&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;1.0.0&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;versions&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lastUpdated&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;1599079384&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lastUpdated&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;versioning&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;metadata&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, a request is made to &lt;code&gt;http(s):&#x2F;&#x2F;&amp;lt;baseurl&amp;gt;&#x2F;&amp;lt;groupID&amp;gt;&#x2F;&amp;lt;artifactID&amp;gt;&#x2F;&amp;lt;version&amp;gt;&#x2F;&amp;lt;artifactID&amp;gt;-&amp;lt;version&amp;gt;.jar&lt;&#x2F;code&gt;, which should just return the correct JAR file for the library. Pretty simple.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-magic-behind-ultralight&quot;&gt;The magic behind Ultralight&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ultralight.retrylife.ca&quot;&gt;Ultralight Maven&lt;&#x2F;a&gt; is a small serverless maven server I built for myself. The Ultralight backend app listens for each of these three requests, and will handle each of the following cases. I use a YAML file to tell the backend what artifact names I want it to &amp;quot;serve&amp;quot;, and their GitHub repository names.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Case 1.&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; The client has asked for a Project Object Model for an artifact. In this case, the backend will make sure the requested artifact name is listed in its configuration file, then simply parse all of the needed data out of the request URL, and send it right back to the client.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Case 2.&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; The client has asked for a &lt;code&gt;maven-metadata.xml&lt;&#x2F;code&gt; file. In this case, the backend will first make sure the artifact exists, then make a request out to the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.github.com&#x2F;en&#x2F;rest&quot;&gt;GitHub REST API&lt;&#x2F;a&gt;, and ask for a list of all tag names in the artifact&#x27;s repository. For every tag that contains an asset with the same name as the artifact, the tag&#x27;s version number will be added to the list of valid versions in the response.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Case 3.&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt; The client has asked for an artifact&#x27;s JAR file. In this case, the backend will first make sure the artifact exists, then make a request out to the GitHub API, and ask for the correct asset URL on GitHub&#x27;s servers. With this url, Ultralight just crafts an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Web&#x2F;HTTP&#x2F;Status&#x2F;302&quot;&gt;HTTP 302&lt;&#x2F;a&gt; response. This makes the client actually request from GitHub itself instead of the Ultralight server, thus Ultralight never needs to store any artifacts.&lt;&#x2F;p&gt;
&lt;p&gt;Both to make the experience faster, and to get around GitHub&#x27;s rate limiting on the tags API, Ultralight sends the client &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;vercel.com&#x2F;docs&#x2F;edge-network&#x2F;caching#stale-while-revalidate&quot;&gt;&lt;code&gt;stale-while-revalidate&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; cache control headers. This forces the Vercel server that hosts Ultralight to only update its cache once per minute (slightly slower than the GitHub rate limit 😉)&lt;&#x2F;p&gt;
&lt;p&gt;For instructions on how to set up your own maven server using Ultralight, see the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;ultralight#ultralight&quot;&gt;README&lt;&#x2F;a&gt; on GitHub.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Integrating GitHub Codespaces with FRC</title>
            <pubDate>Thu, 10 Sep 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/codespaces-for-frc/</link>
            <guid>https://ewpratten.com/blog/codespaces-for-frc/</guid>
            <description>&lt;p&gt;I was recently accepted into the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;features&#x2F;codespaces&quot;&gt;GitHub Codespaces&lt;&#x2F;a&gt; beta test program. After reading through the documentation, I wanted to find a good use for this new tool, and decided to try it out on the largest open source project I am currently involved with. At &lt;em&gt;Raider Robotics&lt;&#x2F;em&gt; (@frc5024), we maintain a fairly large robotics software library called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;frc5024&#x2F;lib5k&quot;&gt;Lib5K&lt;&#x2F;a&gt;. The goal of this library is to provide an easy-to-use framework for new programmers to use when writing control systems code. As this library has become more complex, we have recently forked it into its own GitHub repository, and completely reworked our dependency system to match that of any other large OSS project. I figured that setting this repository up to use Codespaces might make it easier for other developers at Raider Robotics to make small changes to the library without needing to pull in the nearly 5GB of dependencies needed just to compile the codebase.&lt;&#x2F;p&gt;
&lt;p&gt;I am quite impressed at how easy it is to set up a Codespace environment. All you need to do is, load a pre-made docker image, and write some JSON to configure the environment. I decided to write a custom Dockerfile that extends the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;_&#x2F;microsoft-vscode-devcontainers&quot;&gt;&lt;code&gt;mcr.microsoft.com&#x2F;vscode&#x2F;devcontainers&#x2F;base:ubuntu&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; base image. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; mcr.microsoft.com&#x2F;vscode&#x2F;devcontainers&#x2F;base:ubuntu
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;apt update -y
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;apt install sudo -y
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Install needed packages
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;sudo apt install -y python3 python3-pip
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;sudo apt install -y curl wget
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;sudo apt install -y zip unzip
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Install sdkman
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;curl -s &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;get.sdkman.io?rcupdate=true&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; | bash
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Install java
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;bash -c &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;source &#x2F;root&#x2F;.sdkman&#x2F;bin&#x2F;sdkman-init.sh &amp;amp;&amp;amp; sdk install java 11.0.8-open&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Install gradle
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;bash -c &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;source &#x2F;root&#x2F;.sdkman&#x2F;bin&#x2F;sdkman-init.sh &amp;amp;&amp;amp; sdk install gradle&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;source &#x2F;root&#x2F;.sdkman&#x2F;bin&#x2F;sdkman-init.sh&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt; &#x2F;root&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Install WPILib
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;wget https:&#x2F;&#x2F;github.com&#x2F;wpilibsuite&#x2F;allwpilib&#x2F;releases&#x2F;download&#x2F;v2020.3.2&#x2F;WPILib_Linux-2020.3.2.tar.gz -O wpilib.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;mkdir -p &#x2F;root&#x2F;wpilib&#x2F;2020
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;tar -zxvf wpilib.tar.gz -C &#x2F;root&#x2F;wpilib&#x2F;2020
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All that is being done in this container is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Installing Python&lt;&#x2F;li&gt;
&lt;li&gt;Installing &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;sdkman.io&quot;&gt;sdkman&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Installing OpenJDK 11&lt;&#x2F;li&gt;
&lt;li&gt;Installing Gradle&lt;&#x2F;li&gt;
&lt;li&gt;Installing &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wpilibsuite&#x2F;allwpilib&#x2F;&quot;&gt;WPILib&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In the world of FRC development, almost all codebases depend on a library and toolset called WPILib. The tar file that is downloaded contains a copy of the library, all JNI libraries depended on by WPILib itself, some extra tooling, and a custom JVM built specifically to run on the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ni.com&#x2F;en-ca&#x2F;support&#x2F;model.roborio.html&quot;&gt;NI RoboRIO&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;With this docker container, all we need to do is tell GitHub how to set up a Codespace for the repo. This is done by placing a file in &lt;code&gt;.devcontainer&#x2F;devcontainer.json&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;js&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-js &quot;&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; .devcontainer&#x2F;devcontainer.json
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Name of the environment
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;General FRC Development&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Set the Docker image to use
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; I will explain this below
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ewpratten&#x2F;frc_devcontainer:2020.3.2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Set any default VSCode settings here
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;settings&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;terminal.integrated.shell.linux&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;bin&#x2F;bash&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Tell VSCode where to find the workspace directory
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;workspaceMount&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;source=${localWorkspaceFolder},target=&#x2F;root&#x2F;workspace,type=bind,consistency=cached&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;workspaceFolder&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;root&#x2F;workspace&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Allow the host and container docker daemons to communicate
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mounts&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;source=&#x2F;var&#x2F;run&#x2F;docker.sock,target=&#x2F;var&#x2F;run&#x2F;docker-host.sock,type=bind&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ],
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Any extensions you want can go here
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;extensions&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Needed extensions for using WPILib
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;redhat.java&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ms-vscode.cpptools&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;vscjava.vscode-java-pack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The WPILib extension itself
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wpilibsuite.vscode-wpilib&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice the line &lt;code&gt;&amp;quot;image&amp;quot;:&amp;quot;ewpratten&#x2F;frc_devcontainer:2020.3.2&amp;quot;,&lt;&#x2F;code&gt;. This is telling VSCode and Codespaces to pull a docker image from my docker hub account. Instead of making Codespaces build a docker image for itself when it loads, I have pre-built the image, and published it &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;ewpratten&#x2F;frc_devcontainer&quot;&gt;here&lt;&#x2F;a&gt;. The reason for this is quite simple. Codespaces will flat out crash if it tries to build my dockerfile due to WPILib just being too big.&lt;&#x2F;p&gt;
&lt;p&gt;With a minimal amount of work, I got everything needed to develop and test FRC robotics code running in the browser via Codespaces.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;frc-codespaces&#x2F;codespaces-menu.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Launching Codespaces from a GitHub repository&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;frc-codespaces&#x2F;codespaces-code.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Editing code in the browser&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;!-- - Pushing a container this large to dockerhub requires the daemon to be restarted with --&gt;
&lt;!-- sudo systemctl stop docker
sudo dockerd -s overlay --max-concurrent-uploads=1  --&gt;
</description>
        </item>
        <item>
            <title>Compiling AVR-C code with a modern build system</title>
            <pubDate>Thu, 03 Sep 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/bazel-and-avr/</link>
            <guid>https://ewpratten.com/blog/bazel-and-avr/</guid>
            <description>&lt;p&gt;&lt;em&gt;The GitHub repository for everything in this post can be found &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;avr-for-bazel-demo&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When writing software for an Arduino, or any other &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;AVR_microcontrollers&quot;&gt;AVR&lt;&#x2F;a&gt;-based device, there are generally three main options. You can use the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.arduino.cc&#x2F;en&#x2F;main&#x2F;software&quot;&gt;Arduino IDE&lt;&#x2F;a&gt; with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;arduino&#x2F;arduino-cli&quot;&gt;arduino-cli&lt;&#x2F;a&gt;, which is in my opinion, a clunky system that is great for high levels of abstraction and teaching people how to program, but lacks any kind of easy customization I am interested in. If you are looking for something more advanced (and works in your favorite IDE), you might look at &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;platformio.org&#x2F;&quot;&gt;PlatformIO&lt;&#x2F;a&gt;. Finally, you can just program without any Hardware Abstraction Library at all, and use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.nongnu.org&#x2F;avr-libc&#x2F;&quot;&gt;avr-libc&lt;&#x2F;a&gt; along with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.microchip.com&#x2F;mplab&#x2F;avr-support&#x2F;avr-and-arm-toolchains-c-compilers&quot;&gt;avr-gcc&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.nongnu.org&#x2F;avrdude&#x2F;&quot;&gt;avrdude&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;This final option is my favorite by far, as it both forces me to think about how the system I am building is actually working &amp;quot;behind the scenes&amp;quot;, and lets me do everything exactly the way I want. Unfortunately, when working directly with the AVR system libraries, the only buildsystem &#x2F; tool that is available (without a lot of extra work) is &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Make_(software)&quot;&gt;Make&lt;&#x2F;a&gt;. As somebody who spends 90% of his time working with higher-level buildsystems like &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gradle.org&#x2F;&quot;&gt;Gradle&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bazel.build&quot;&gt;Bazel&lt;&#x2F;a&gt;, I don&#x27;t really like needing to deal with Makefiles, and manually handle dependency loading. This got me thinking. I have spent a lot of time working in Bazel, and cross-compiling for the armv7l platform via the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;launchpad.net&#x2F;%7Ewpilib&#x2F;+archive&#x2F;ubuntu&#x2F;toolchain&#x2F;&quot;&gt;FRC Toolchain&lt;&#x2F;a&gt;. How hard can it be to add AVR Toolchain support to Bazel?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;The answer: Its pretty easy.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The Bazel buildsystem allows users to define custom toolchains via the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;toolchains.html&quot;&gt;toolchain&lt;&#x2F;a&gt; rule. I am going to assume you have a decent understanding of the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;skylark&#x2F;language.html&quot;&gt;Starlark&lt;&#x2F;a&gt; DSL, or at least Python3 (which Starlark is syntactically based on). To get started setting up a Bazel toolchain, I create empty &lt;code&gt;WORKSPACE&lt;&#x2F;code&gt; and &lt;code&gt;BUILD&lt;&#x2F;code&gt; files, along with a new bazel package named &lt;code&gt;toolchain&lt;&#x2F;code&gt; that has a bazel file inside for the toolchain settings, a &lt;code&gt;.bazelrc&lt;&#x2F;code&gt; file, and a package to store my test program.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;project
&lt;&#x2F;span&gt;&lt;span&gt;    |
&lt;&#x2F;span&gt;&lt;span&gt;    +-.bazelrc
&lt;&#x2F;span&gt;&lt;span&gt;    +-BUILD
&lt;&#x2F;span&gt;&lt;span&gt;    +-example
&lt;&#x2F;span&gt;&lt;span&gt;    |   |
&lt;&#x2F;span&gt;&lt;span&gt;    |   +-BUILD
&lt;&#x2F;span&gt;&lt;span&gt;    |   +-main.cc
&lt;&#x2F;span&gt;&lt;span&gt;    +-toolchain
&lt;&#x2F;span&gt;&lt;span&gt;    |   |
&lt;&#x2F;span&gt;&lt;span&gt;    |   +-BUILD
&lt;&#x2F;span&gt;&lt;span&gt;    |   +-avr.bzl
&lt;&#x2F;span&gt;&lt;span&gt;    +-WORKSPACE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I only learned about this recently, but you can use a &lt;code&gt;.bazelrc&lt;&#x2F;code&gt; file to define constant arguments to be passed to the buildsystem per-project. For this project, I am adding the following arguments to the config file to define which toolchain to use for which target:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# .bazelrc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Use our custom-configured c++ toolchain.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build:avr_config --crosstool_top&lt;&#x2F;span&gt;&lt;span&gt;=&#x2F;&#x2F;toolchain:avr_suite
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build:avr_config --cpu&lt;&#x2F;span&gt;&lt;span&gt;=avr
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Use the default Bazel C++ toolchain to build the tools used during the
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# build.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build:avr_config --host_crosstool_top&lt;&#x2F;span&gt;&lt;span&gt;=@bazel_tools&#x2F;&#x2F;tools&#x2F;cpp:toolchain
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This config will default all builds to use a custom toolchain named &lt;code&gt;avr_suite&lt;&#x2F;code&gt;, and compile to target the &lt;code&gt;avr&lt;&#x2F;code&gt; CPU architecture. But, the final line will make sure to use the host&#x27;s toolchain for compiling tools needed for Bazel itself (since we can&#x27;t run AVR code on the host machine). With this, we now have everything needed to tell Bazel what to use when building, but we have not actually defined the toolcahin in the first place. This step comes in two parts. First, we need to define a toolchain implementation (this happens in &lt;code&gt;avr.bzl&lt;&#x2F;code&gt;). This implementation will define things like, where to find every tool on the host, which libc version to use, and what types of tools are provided by avr-gcc in the first place. We can start out by adding some &lt;code&gt;load&lt;&#x2F;code&gt; statements to the file to tell Bazel what functions we need to use.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# toolchain&#x2F;avr.bzl
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@bazel_tools&#x2F;&#x2F;tools&#x2F;build_defs&#x2F;cc:action_names.bzl&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ACTION_NAMES&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@bazel_tools&#x2F;&#x2F;tools&#x2F;cpp:cc_toolchain_config_lib.bzl&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;feature&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flag_group&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;flag_set&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tool_path&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once this is done, we need to define everything that this toolchain implementation can do. In this case avr-gcc can link executables, link dynamic libraries, and link a &amp;quot;nodeps&amp;quot; dynamic library.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;all_link_actions = [
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ACTION_NAMES&lt;&#x2F;span&gt;&lt;span&gt;.cpp_link_executable,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ACTION_NAMES&lt;&#x2F;span&gt;&lt;span&gt;.cpp_link_dynamic_library,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ACTION_NAMES&lt;&#x2F;span&gt;&lt;span&gt;.cpp_link_nodeps_dynamic_library,
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We also need to tell Bazel where to find every tool. This may vary platform-to-platform, but with a standard avr-gcc install on Linux, the following should work just fine. Experienced Bazel users may wish to make use of Bazel&#x27;s &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;configurable-attributes.html&quot;&gt;&lt;code&gt;config_setting&lt;&#x2F;code&gt; and &lt;code&gt;select&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; rules to allow the buildsystem to run on any type of host via a CLI flag.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;tool_paths = [
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tool_path&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gcc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;bin&#x2F;avr-gcc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    ),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tool_path&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ld&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;bin&#x2F;avr-ld&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    ),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tool_path&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;bin&#x2F;avr-ar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    ),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tool_path&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cpp&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;bin&#x2F;avr-g++&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    ),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tool_path&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;gcov&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;bin&#x2F;avr-gcov&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    ),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tool_path&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nm&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;bin&#x2F;avr-nm&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    ),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tool_path&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;objdump&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;bin&#x2F;avr-objdump&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    ),
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tool_path&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;bin&#x2F;avr-strip&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    ),
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, we need to define the actual avr-toolchain implementation. This can be done via a simple function, and the creation of a new custom rule:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ...
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;_avr_impl&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    features = [
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;feature&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default_linker_flags&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;enabled &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag_sets &lt;&#x2F;span&gt;&lt;span&gt;= [
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag_set&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;actions &lt;&#x2F;span&gt;&lt;span&gt;= all_link_actions,
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag_groups &lt;&#x2F;span&gt;&lt;span&gt;= ([
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flag_group&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flags &lt;&#x2F;span&gt;&lt;span&gt;= [
&lt;&#x2F;span&gt;&lt;span&gt;                                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-lstdc++&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                            ],
&lt;&#x2F;span&gt;&lt;span&gt;                        ),
&lt;&#x2F;span&gt;&lt;span&gt;                    ]),
&lt;&#x2F;span&gt;&lt;span&gt;                ),
&lt;&#x2F;span&gt;&lt;span&gt;            ],
&lt;&#x2F;span&gt;&lt;span&gt;        ),
&lt;&#x2F;span&gt;&lt;span&gt;    ]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;cc_common.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;create_cc_toolchain_config_info&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ctx &lt;&#x2F;span&gt;&lt;span&gt;= ctx,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toolchain_identifier &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;avr-toolchain&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host_system_name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;local&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_system_name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;local&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_cpu &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;avr&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target_libc &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unknown&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;compiler &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;avr-g++&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;abi_version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unknown&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;abi_libc_version &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unknown&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tool_paths &lt;&#x2F;span&gt;&lt;span&gt;= tool_paths,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cxx_builtin_include_directories &lt;&#x2F;span&gt;&lt;span&gt;= [
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;lib&#x2F;avr&#x2F;include&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;avr&#x2F;5.4.0&#x2F;include&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        ],
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;cc_toolchain_config = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rule&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attrs &lt;&#x2F;span&gt;&lt;span&gt;= {},
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;provides &lt;&#x2F;span&gt;&lt;span&gt;= [CcToolchainConfigInfo],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;implementation &lt;&#x2F;span&gt;&lt;span&gt;= _avr_impl,
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;cxx_builtin_include_directories&lt;&#x2F;code&gt; argument is very important. This tells the compiler where to find the libc headers. &lt;strong&gt;Both&lt;&#x2F;strong&gt; paths are required, as the headers are split between two directories on Linux for some reason. We are now done with the &lt;code&gt;avr.bzl&lt;&#x2F;code&gt; file, and can add the following to the &lt;code&gt;toolchain&lt;&#x2F;code&gt; package&#x27;s &lt;code&gt;BUILD&lt;&#x2F;code&gt; file to register our custom toolcahin as an official CC toolchain for Bazel to use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# toolchain&#x2F;BUILD
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@rules_cc&#x2F;&#x2F;cc:defs.bzl&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cc_toolchain&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cc_toolchain_suite&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:avr.bzl&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cc_toolchain_config&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cc_toolchain_config&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;avr_toolchain_config&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cc_toolchain_suite&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;avr_suite&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toolchains &lt;&#x2F;span&gt;&lt;span&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;avr&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:avr_toolchain&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filegroup&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cc_toolchain&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;avr_toolchain&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;all_files &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:empty&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;compiler_files &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:empty&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dwp_files &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:empty&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;linker_files &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:empty&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;objcopy_files &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:empty&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip_files &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:empty&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;supports_param_files &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toolchain_config &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:avr_toolchain_config&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toolchain_identifier &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;avr-toolchain&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Thats it. Now, if we wanted to compile a simple blink program in AVR-C, we can add the following to &lt;code&gt;main.cc&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#ifndef&lt;&#x2F;span&gt;&lt;span&gt; F_CPU
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span&gt;F_CPU &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16000000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;UL
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#endif
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;avr&#x2F;io.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;util&#x2F;delay.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  DDRC = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xFF&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    PORTC = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0xFF&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_delay_ms&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;); 
&lt;&#x2F;span&gt;&lt;span&gt;    PORTC= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x00&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_delay_ms&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;); 
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To compile this, just define a &lt;code&gt;cc_binary&lt;&#x2F;code&gt; in the example &lt;code&gt;BUILD&lt;&#x2F;code&gt; file just like any normal Bazel program.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# example&#x2F;BUILD
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;@rules_cc&#x2F;&#x2F;cc:defs.bzl&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cc_binary&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cc_binary&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;example&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;srcs &lt;&#x2F;span&gt;&lt;span&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;main.cc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Add any needed cc options here for your specific platform
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This can be compiled with &lt;code&gt;bazel build &#x2F;&#x2F;example --config=avr_config&lt;&#x2F;code&gt;, and the output binary will be in the &lt;code&gt;bazel-bin&lt;&#x2F;code&gt; directory. You can run &lt;code&gt;avr-objcopy&lt;&#x2F;code&gt; and &lt;code&gt;avrdude&lt;&#x2F;code&gt; manually just like with a normal program.&lt;&#x2F;p&gt;
&lt;p&gt;Importantly, every normal Bazel function will still work. Want to include &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vancegroup&#x2F;EigenArduino&quot;&gt;EigenArduino&lt;&#x2F;a&gt; in your project? Just import the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bazelbuild&#x2F;rules_foreign_cc&quot;&gt;&lt;code&gt;rules_foreign_cc&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; ruleset and load the Eigen library like normal. You can also run unit tests through Bazel&#x27;s regular &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;c-cpp.html#cc_test&quot;&gt;testing rules&lt;&#x2F;a&gt;. If you are a masochist, you could even try loading the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pybind&#x2F;pybind11_bazel&quot;&gt;pybind11 rules&lt;&#x2F;a&gt; and embedding a Python interpreter in your code.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Taking notes with Markdown and LaTeX</title>
            <pubDate>Sun, 23 Aug 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/notetaking-with-latex/</link>
            <guid>https://ewpratten.com/blog/notetaking-with-latex/</guid>
            <description>&lt;p&gt;&lt;em&gt;You can view my public demo for this post &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;school-notes-demo&quot;&gt;here&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Recently, I have been on a bit of a mission to improve my school workflow with software. Over the past month, I have built a cleaner &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;student_portal#unofficial-tvdsb-student-portal-webapp&quot;&gt;student portal&lt;&#x2F;a&gt; for my school and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;timeandplace-api#timeandplace-api--cli-application&quot;&gt;written a tool&lt;&#x2F;a&gt; for automating in-class attendance. Alongside working on these projects, I have also been refining my notetaking system for school.&lt;&#x2F;p&gt;
&lt;p&gt;Since 9th grade, I have been taking notes in a private GitHub repository in markdown, and have been compiling them to HTML using a makefile for each course. While this system has worked ok, It has been far from perfect. Recently, I have been working very hard to give this system a much-needed upgrade. Here is the new tech stack:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;bazel.build&quot;&gt;Bazel buildsystem&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Markdown&quot;&gt;Markdown&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;LaTeX&quot;&gt;LaTeX&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.mathjax.org&#x2F;&quot;&gt;MathJax&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctan.org&#x2F;pkg&#x2F;beamer&quot;&gt;Beamer&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ctan.org&#x2F;pkg&#x2F;pgf&quot;&gt;Tikz &amp;amp; PGF&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;&quot;&gt;Pandoc&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pwmt.org&#x2F;projects&#x2F;zathura&#x2F;&quot;&gt;Zathura&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;skylark&#x2F;language.html&quot;&gt;Starlark&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;features&#x2F;actions&quot;&gt;Github Actions&lt;&#x2F;a&gt; CI&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The idea is that every course I take becomes its own Bazel package, with subpackages for things like assignments, papers, notes, and presentations. I can compile everything just by running the command &lt;code&gt;bazel build &#x2F;&#x2F;:all&lt;&#x2F;code&gt;. All builds are cached using Bazel&#x27;s build caching system, so when I run the command to compile my notes (I love saying that), I only end up compiling things that have changed since the last run. The setup for all of this is quite simple. All that is really needed is a Bazel workspace with the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ProdriveTechnologies&#x2F;bazel-pandoc&quot;&gt;&lt;code&gt;bazel_pandoc&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; rules loaded (although I have opted to use some custom &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.bazel.build&#x2F;versions&#x2F;master&#x2F;be&#x2F;general.html#genrule&quot;&gt;genrules&lt;&#x2F;a&gt; instead). Using these rules, markdown files can be concatenated, and compiled into a PDF. I also use a modified version of the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Wandmalfarbe&#x2F;pandoc-latex-template&quot;&gt;Eisvogel&lt;&#x2F;a&gt; Pandoc template to make all my documents look a little neater.&lt;&#x2F;p&gt;
&lt;p&gt;In terms of workflow, I write all my notes as markdown files with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pandoc.org&#x2F;MANUAL.html#math&quot;&gt;embedded LaTeX&lt;&#x2F;a&gt; for any equations and charts I may need. All of this is done inside of VSCode, and I have a custom &lt;code&gt;tasks.json&lt;&#x2F;code&gt; file that lets me press &lt;kbd&gt;Ctrl&lt;&#x2F;kbd&gt; + &lt;kbd&gt;Shift&lt;&#x2F;kbd&gt; + &lt;kbd&gt;b&lt;&#x2F;kbd&gt; to re-compile whatever I am currently working on. I also keep Zathura open in a window to the side for a nearly-live preview system.&lt;&#x2F;p&gt;
&lt;script src=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;Ewpratten&#x2F;163aa9c9cb4e8c20e732e3713c95c915.js&quot; &gt;&lt;&#x2F;script&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;latex-notes&#x2F;hs_notes_workflow.png&quot; alt=&quot;&quot; &#x2F;&gt;
&lt;em&gt;A screenshot of my workspace&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now, the question came up of &lt;em&gt;&amp;quot;how do you easily distribute notes and assignments to classmates and professors?&amp;quot;&lt;&#x2F;em&gt;. That question got me stuck for a while, but here is the system I have come up with:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;I write an assignment&lt;&#x2F;li&gt;
&lt;li&gt;I push it to the private GitHub repository&lt;&#x2F;li&gt;
&lt;li&gt;GitHub Actions picks up the deployment with a custom build script&lt;&#x2F;li&gt;
&lt;li&gt;Every document is built into a PDF, and packaged with a directory listing generated by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;mama.indstate.edu&#x2F;users&#x2F;ice&#x2F;tree&#x2F;tree.1.html#XML&#x2F;JSON&#x2F;HTML%20OPTIONS&quot;&gt;&lt;code&gt;tree -H&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Everything is pushed to a subdomain on my website via GitHub pages&lt;&#x2F;li&gt;
&lt;li&gt;I can share documents via URL to anyone&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;This is almost entirely accomplished by a shell script and a custom CI script.&lt;&#x2F;p&gt;
&lt;script src=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;Ewpratten&#x2F;4a69af01250291eb2981510feddef642.js&quot;&gt;&lt;&#x2F;script&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;If you have any questions about this system, want me to write another post about it, or would like me to walk you through setting up a notes workspace of your own, &lt;a href=&quot;&#x2F;about&quot;&gt;contact me&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Notes from FRC: Autonomous point-to-point navigation</title>
            <pubDate>Thu, 13 Aug 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/drivetrain-navigation/</link>
            <guid>https://ewpratten.com/blog/drivetrain-navigation/</guid>
            <description>&lt;p&gt;This post is a continuation on my &amp;quot;Notes from FRC&amp;quot; series. If you haven&#x27;t already, I recommend reading my post on &lt;a href=&quot;&#x2F;blog&#x2F;2020&#x2F;08&#x2F;03&#x2F;joystick-to-voltage&quot;&gt;Converting joystick data to tank-drive outputs&lt;&#x2F;a&gt;. Some concepts in this post were introduced there. Like last time, to see the production code behind this post, check &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;frc5024&#x2F;lib5k&#x2F;blob&#x2F;ab90994b2a0c769abfdde9a834133725c3ce3a38&#x2F;common_drive&#x2F;src&#x2F;main&#x2F;java&#x2F;io&#x2F;github&#x2F;frc5024&#x2F;common_drive&#x2F;DriveTrainBase.java&quot;&gt;here&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;frc5024&#x2F;lib5k&#x2F;tree&#x2F;master&#x2F;purepursuit&#x2F;src&#x2F;main&#x2F;java&#x2F;io&#x2F;github&#x2F;frc5024&#x2F;purepursuit&#x2F;pathgen&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;At &lt;em&gt;Raider Robotics&lt;&#x2F;em&gt;, most of my work has been spent on these three subjects:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Productivity infrastructure&lt;&#x2F;li&gt;
&lt;li&gt;Developing our low-level library&lt;&#x2F;li&gt;
&lt;li&gt;Writing the software that powers our past three robots&#x27; &lt;em&gt;DriveTrain&lt;&#x2F;em&gt;s&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When I joined the team, we had just started to design effective autonomous locomotion code. Although functional, our ability to manuever robots around the FRC field autonomously was very limited, and with very low precision. It has since been my goal to build a powerful software framework for precisely estimating our robot&#x27;s real-world position at all times, and for giving anyone the tools to easily call a method, and have the robot to drive from point &lt;em&gt;A&lt;&#x2F;em&gt; to &lt;em&gt;B&lt;&#x2F;em&gt;. My goal with this post is to outline how this system actually works. But first, I need to explain some core concepts:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Poses&lt;&#x2F;strong&gt;. At Raider Robotics, we use the following vector components to denote a robot&#x27;s position and rotation on a 2D plane (the floor). We call this magic vector a &lt;em&gt;pose&lt;&#x2F;em&gt; :&lt;&#x2F;p&gt;
&lt;p&gt;$$
pose = \begin{bmatrix} x  \  y  \  \theta \end{bmatrix}
$$&lt;&#x2F;p&gt;
&lt;p&gt;With a robot sitting at $\big[\begin{smallmatrix}0 \ 0 \ 0\end{smallmatrix}\big]$, it would be facing positive in the $x$ axis.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Localization&lt;&#x2F;strong&gt;. When navigating the real world, the first challenge is: knowing where the robot is. At Raider Robotics, we use an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Kalman_filter#Unscented_Kalman_filter&quot;&gt;Unscented Kalman Filter&lt;&#x2F;a&gt; (UKF) that fuses high-accuracy encoder and gyroscope data with medium-accuracy VI-SLAM data fed off our robot&#x27;s computer vision system. Our encoders are attached to the robot&#x27;s tank track motor output shafts, counting the distance traveled by each track. Although this sounds extremely complicated, this algorithm can be boiled down to a simple (and low-accuracy) equation that originated from marine navigation called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dead_reckoning&quot;&gt;Dead Reckoning&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;$$
\Delta P = \begin{bmatrix}(\Delta L - \Delta R) \cdot \sin(\theta\cdot\frac{\pi}{180})  \  (\Delta L - \Delta R) \cdot \cos(\theta\cdot\frac{\pi}{180})  \  \Delta \theta \end{bmatrix}
$$&lt;&#x2F;p&gt;
&lt;p&gt;The result of this equation, $\Delta P$, is then accumulated over time, into the robot&#x27;s &lt;em&gt;pose&lt;&#x2F;em&gt;. $L$ and $R$ are the distance readings from the &lt;em&gt;left&lt;&#x2F;em&gt; and &lt;em&gt;right&lt;&#x2F;em&gt; tank tracks.&lt;&#x2F;p&gt;
&lt;p&gt;With an understanding of the core concepts, lets say we have a tank-drive robot sitting at pose $A$, and we want to get it to pose $B$. &lt;&#x2F;p&gt;
&lt;p&gt;$$
A = \begin{bmatrix}0 \ 0 \ 0\end{bmatrix}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
B = \begin{bmatrix}0 \ 1 \ 90\end{bmatrix}
$$&lt;&#x2F;p&gt;
&lt;p&gt;This raises an interesting problem. Our &lt;em&gt;goal pose&lt;&#x2F;em&gt; is directly to the left of our &lt;em&gt;current pose&lt;&#x2F;em&gt;, and tanks cannot strafe (travel in the $y$ axis without turning). Luckily, to solve this problem we just need to know our error from the goal pose as a distance ($\Delta d$), and a heading ($\Delta\theta$):&lt;&#x2F;p&gt;
&lt;p&gt;$$
\Delta d = \sqrt{\Delta x^2 + \Delta y^2}
$$&lt;&#x2F;p&gt;
&lt;p&gt;$$
\Delta\theta = \arctan(\Delta y, \Delta x) \cdot \frac{180}{\pi}
$$&lt;&#x2F;p&gt;
&lt;p&gt;Notice how a polar coordinate containing these values: $\big[\begin{smallmatrix}\Delta d  \  \Delta\theta\end{smallmatrix}\big]$ is very similar to our joystick input vector from the &lt;a href=&quot;&#x2F;blog&#x2F;2020&#x2F;08&#x2F;03&#x2F;joystick-to-voltage&quot;&gt;previous post&lt;&#x2F;a&gt;: $\big[\begin{smallmatrix}T \ S\end{smallmatrix}\big]$. Converting our positional error into a polar coordinate makes the process of navigating to any point very simple. All we need to do is take the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hadamard_product_(matrices)&quot;&gt;Hadamard product&lt;&#x2F;a&gt; of the coordinate matrix with a gain matrix to make small adjustments to the output based on the physical characteristics of your robot, like the amount of voltage required to overcome static friction. This is a very simple P-gain controller.&lt;&#x2F;p&gt;
&lt;p&gt;$$
input = \begin{bmatrix}\Delta d  \  \Delta\theta\end{bmatrix}\circ\begin{bmatrix}K_t  \  K_s \end{bmatrix}
$$&lt;&#x2F;p&gt;
&lt;p&gt;This new input vector can now be fed directly into the code from the previous post, and as long as the $K_t$ and $K_s$ gains are tuned correctly, your robot will smoothly and efficiently navigate from pose $A$ to pose $B$ automatically.&lt;&#x2F;p&gt;
&lt;p&gt;There are a few tweaks that can be made to this method that will further smooth out the robot&#x27;s movement. Firstly, we can multiply $\Delta d$ by a restricted version of $\Delta\theta$. This will cause the robot to slow down any time it is too far off course. While it is slower, turns can be made faster, and more efficiently. This cuts down on the amount of time needed to face the goal pose in the first place. We can calculate this gain, $m$, as:&lt;&#x2F;p&gt;
&lt;p&gt;$$
m = \big(-1 * \frac{\min(abs(\Delta\theta), 90)}{90}\big) + 1
$$&lt;&#x2F;p&gt;
&lt;p&gt;$m$ is now a scalar that falls in $-1 \leq m \leq 1$. Our calculation to determine a new &amp;quot;input&amp;quot; vector is now as follows:&lt;&#x2F;p&gt;
&lt;p&gt;$$
input = \begin{bmatrix}\Delta d  \  \Delta\theta\end{bmatrix}\circ\begin{bmatrix}K_t  \  K_s \end{bmatrix} \circ \begin{bmatrix}m  \  1 \end{bmatrix}
$$&lt;&#x2F;p&gt;
&lt;p&gt;For even more controllability, Raider Robotics passes $\Delta d$ through a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;PID_controller#Selective_use_of_control_terms&quot;&gt;PD&lt;&#x2F;a&gt; controller, and $\Delta\theta$ through a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;PID_controller#PI_controller&quot;&gt;PI&lt;&#x2F;a&gt; controller before converting them to motor values... and that is it! With just a couple formulæ, we have a fully functional autonomous point-to-point locomotion system. &lt;&#x2F;p&gt;
&lt;p&gt;For a real-world example of this method in use, check out 5024&#x27;s robot (bottom right) and 1114&#x27;s robot (bottom left). Both teams were running nearly the same implementation. We were both running autonomously for the first 15 seconds of the game:&lt;&#x2F;p&gt;
&lt;div class=&quot;yt-embed&quot;&gt;
    &lt;iframe src=&quot;https:&#x2F;&#x2F;www.youtube-nocookie.com&#x2F;embed&#x2F;5Q39LIVcXSQ&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;&#x2F;iframe&gt;
&lt;&#x2F;div&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I hope someone will some day find this post helpful. Most papers about this topic went way over my head in 10th grade, or were over-complicated for the task. If you would like me to go further in depth on this topic, &lt;a href=&quot;&#x2F;about&#x2F;&quot;&gt;contact me&lt;&#x2F;a&gt; and let me know. I will gladly help explain things, or write a new post further expanding on a topic.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Notes from FRC: Converting joystick data to tank-drive outputs</title>
            <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/joystick-to-voltage/</link>
            <guid>https://ewpratten.com/blog/joystick-to-voltage/</guid>
            <description>&lt;p&gt;I am starting a new little series here called &amp;quot;Notes from FRC&amp;quot;. The idea is that I am going to write about what I have learned over the past three years of working (almost daily) with robots, and hopefully someone in the future will find them useful. The production source code I based this post around is available &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;frc5024&#x2F;lib5k&#x2F;blob&#x2F;cd8ad407146b514cf857c1d8ac82ac8f3067812b&#x2F;common_drive&#x2F;src&#x2F;main&#x2F;java&#x2F;io&#x2F;github&#x2F;frc5024&#x2F;common_drive&#x2F;calculation&#x2F;DifferentialDriveCalculation.java&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Today&#x27;s topic is quite simple, yet almost nobody has written anything about it. One of the very first problems presented to you when working with an FRC robot is: &lt;em&gt;&amp;quot;I have a robot, and I have a controller.. How do I make this thing move?&amp;quot;&lt;&#x2F;em&gt;. When I first started as a software developer at &lt;em&gt;Raider Robotics&lt;&#x2F;em&gt;, I decided to do some Googling, as I was sure someone would have at least written about this from the video-game industry.. Nope.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s lay out the problem. We have an application that needs to run some motors from a joystick input. Periodically, we are fed a vector of joystick data, $\lbrack\begin{smallmatrix}T \ S\end{smallmatrix}\rbrack$, where the values follow $-1\leq \lbrack\begin{smallmatrix}T \ S\end{smallmatrix}\rbrack \leq 1$. $T$ denotes our &lt;em&gt;throttle&lt;&#x2F;em&gt; input, and $S$ denotes something we at Raider Robotics call &lt;em&gt;&amp;quot;rotation&amp;quot;&lt;&#x2F;em&gt;. As you will see later on, rotation is not quite the correct word, but none of us can come up with anything better. Some teams, who use a steering wheel as input instead of a joystick, call this number &lt;em&gt;wheel&lt;&#x2F;em&gt;, which makes sense in their context. For every time an input is received, we must also produce an output, $\lbrack\begin{smallmatrix}L \ R\end{smallmatrix}\rbrack$, where the values follow $-12\leq \lbrack\begin{smallmatrix}L \ R\end{smallmatrix}\rbrack \leq 12$. $\lbrack\begin{smallmatrix}L \ R\end{smallmatrix}\rbrack$ is a vector containing &lt;em&gt;left&lt;&#x2F;em&gt; and &lt;em&gt;right&lt;&#x2F;em&gt; side motor output voltages respectively. Since we build &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Tank_steering_systems&quot;&gt;tank-drive&lt;&#x2F;a&gt;-style robots, when $\lbrack\begin{smallmatrix}L \ R\end{smallmatrix}\rbrack = \lbrack\begin{smallmatrix}12 \ 12\end{smallmatrix}\rbrack$, the robot would be moving forward at full speed, and when $\lbrack\begin{smallmatrix}L \ R\end{smallmatrix}\rbrack = \lbrack\begin{smallmatrix}12 \ 0\end{smallmatrix}\rbrack$, the robot would be pivoting right around the centre of its right track at full speed. The simplest way to convert a throttle and rotation input to left and right voltages is as follows:&lt;&#x2F;p&gt;
&lt;p&gt;$$
output = 12\cdot\begin{bmatrix}T + S \ T - S\end{bmatrix} 
$$&lt;&#x2F;p&gt;
&lt;p&gt;This can be expressed in Python as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;computeMotorOutputs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;: float, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt;: float) -&amp;gt; Tuple[float, float]: 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12 &lt;&#x2F;span&gt;&lt;span&gt;* (T + S), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12 &lt;&#x2F;span&gt;&lt;span&gt;* (T - S))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In FRC, we call this method &amp;quot;arcade drive&amp;quot;, since the controls feel like you are driving a tank in an arcade game. Although this is very simple, there is a big drawback. At high values of $T$ and $S$, precision is lost. The best solution I have seen to this problem is to divide both $L$ and $R$ by the result of $\max(abs(T), abs(S))$ if the resulting value is greater than $1.0$. With this addition, the compute function now looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;computeMotorOutputs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;: float, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt;: float) -&amp;gt; Tuple[float, float]: 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Calculate normal arcade values
&lt;&#x2F;span&gt;&lt;span&gt;    L = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12 &lt;&#x2F;span&gt;&lt;span&gt;* (T + S)
&lt;&#x2F;span&gt;&lt;span&gt;    R = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12 &lt;&#x2F;span&gt;&lt;span&gt;* (T - S)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Determine maximum output
&lt;&#x2F;span&gt;&lt;span&gt;    m = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;(T), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;(S))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Scale if needed
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;m &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        L &#x2F;= m
&lt;&#x2F;span&gt;&lt;span&gt;        R &#x2F;= m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(L, R)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Perfect. Now we have solved the problem!&lt;&#x2F;p&gt;
&lt;p&gt;Of course, I&#x27;m not stopping here. Although arcade drive works, the result is not great. Small movements are very hard to get right, as a small movement on your controller will translate to a fairly large one on the robot (on an Xbox controller, we are fitting the entire range of 0m&#x2F;s to 5m&#x2F;s in about half an inch of joystick movement). This is generally tolerable when moving forward and turning, but when sitting still, it is near impossible to make precise rotational movements. Also, unless you have a lot of practice driving tank-drive vehicles, sharp turns are a big problem, as overshooting and skidding are very common. Wouldn&#x27;t it be nice if we could have a robot that manuevers in graceful curves like a car? This is where the second method of joystick-to-voltage conversion comes in to play.&lt;&#x2F;p&gt;
&lt;p&gt;FRC teams like &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.team254.com&#x2F;&quot;&gt;254&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;frc971.org&#x2F;&quot;&gt;971&lt;&#x2F;a&gt; use variations of this calculation method called &lt;em&gt;&amp;quot;constant curvature drive&amp;quot;&lt;&#x2F;em&gt;. Curvature drive is only slightly different from arcade drive. Here is the new formula:&lt;&#x2F;p&gt;
&lt;p&gt;$$
output = 12\cdot\begin{bmatrix}T + abs(T) \cdot S \ T - abs(T) \cdot S\end{bmatrix}
$$&lt;&#x2F;p&gt;
&lt;p&gt;If we also add the speed scaling from arcade drive, we are left with the following Python code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;computeMotorOutputs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;: float, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt;: float) -&amp;gt; Tuple[float, float]:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Calculate normal curvature values
&lt;&#x2F;span&gt;&lt;span&gt;    L = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12 &lt;&#x2F;span&gt;&lt;span&gt;* (T + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;(T) * S)
&lt;&#x2F;span&gt;&lt;span&gt;    R = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12 &lt;&#x2F;span&gt;&lt;span&gt;* (T - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;(T) * S)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Determine maximum output
&lt;&#x2F;span&gt;&lt;span&gt;    m = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;(T), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;(S))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Scale if needed
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;m &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        L &#x2F;= m
&lt;&#x2F;span&gt;&lt;span&gt;        R &#x2F;= m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(L, R)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The $S$ component now changes the curvature of the robot&#x27;s path, rather than the heading&#x27;s rate of change. This makes the robot much more controllable at high speeds. There is one downside to this method though. As a tradeoff to making high-speed driving much more controllable, we have completely removed the robot&#x27;s ability to turn when stopped. &lt;&#x2F;p&gt;
&lt;p&gt;This is where the final drive method comes in to play. At Raider Robotics, we call it &lt;em&gt;&amp;quot;semi-constant curvature drive&amp;quot;&lt;&#x2F;em&gt;, and have been using it in gameplay with great success since 2019. Since we want to take the best parts of arcade drive and constant curvature drive, we came to the simple conclusion that we should just average the two methods. Doing this results in this new formula:&lt;&#x2F;p&gt;
&lt;p&gt;$$
output = 12\cdot\begin{bmatrix}\frac{(T + abs(T) * S) + (T + S)}{2} \ \frac{(T - abs(T) * S) + (T - S)}{2}\end{bmatrix}
$$&lt;&#x2F;p&gt;
&lt;p&gt;And here is the associated Python code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;computeMotorOutputs&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt;: float, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt;: float) -&amp;gt; Tuple[float, float]:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Calculate semi-constant curvature values
&lt;&#x2F;span&gt;&lt;span&gt;    L = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12 &lt;&#x2F;span&gt;&lt;span&gt;* (((T + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;(T) * S) + (T + S)) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    R = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12 &lt;&#x2F;span&gt;&lt;span&gt;* (((T - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;(T) * S) + (T - S)) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Determine maximum output
&lt;&#x2F;span&gt;&lt;span&gt;    m = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;(T), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span&gt;(S))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Scale if needed
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;m &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        L &#x2F;= m
&lt;&#x2F;span&gt;&lt;span&gt;        R &#x2F;= m
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(L, R)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;I hope someone will some day find this post helpful. I am working on a few more FRC-related posts about more advanced topics, and things I have learned through my adventures at Raider Robotics. If you would like to check out the code that powers all of this, take a look at our core software library: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;frc5024&#x2F;lib5k&quot;&gt;Lib5K&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Flashing code to a 32u4 chip</title>
            <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/32u4-upload/</link>
            <guid>https://ewpratten.com/blog/32u4-upload/</guid>
            <description>&lt;p&gt;The &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;ww1.microchip.com&#x2F;downloads&#x2F;en&#x2F;devicedoc&#x2F;atmel-7766-8-bit-avr-atmega16u4-32u4_datasheet.pdf&quot;&gt;ATmega32u4&lt;&#x2F;a&gt; (aka. 32u4) chip is one of my favorite microcontrollers to work with. It is a low power, 8-bit, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;AVR_microcontrollers&quot;&gt;AVR&lt;&#x2F;a&gt;-based system developed by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Atmel&quot;&gt;Atmel&lt;&#x2F;a&gt;. They are commonly used in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.arduino.cc&#x2F;en&#x2F;Main&#x2F;Arduino_BoardLeonardo&quot;&gt;Arduino Leonardo&lt;&#x2F;a&gt; development boards and programmed via the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.arduino.cc&#x2F;en&#x2F;Main&#x2F;Software&quot;&gt;Arduino IDE&lt;&#x2F;a&gt;, but I prefer having as much control over the device as I can. So I choose to program these chips directly in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;ww1.microchip.com&#x2F;downloads&#x2F;en&#x2F;devicedoc&#x2F;40001917a.pdf&quot;&gt;AVRASM&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.nongnu.org&#x2F;avr-libc&#x2F;user-manual&#x2F;&quot;&gt;AVR-C&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This post will go over how to easily flash code to a 32u4 chip from a Linux host, and exists as reference for when I inevitably need to refresh my memory in the future.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-the-needed-tools&quot;&gt;Getting the needed tools&lt;&#x2F;h2&gt;
&lt;p&gt;Before starting, the following tools are needed:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vancegroup-mirrors&#x2F;avr-libc&#x2F;releases&quot;&gt;AVR-libc&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.nongnu.org&#x2F;avrdude&#x2F;&quot;&gt;avrdude&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;writing-a-hello-world-for-avr&quot;&gt;Writing a &amp;quot;Hello, world!&amp;quot; for AVR&lt;&#x2F;h2&gt;
&lt;p&gt;Since you can&#x27;t exactly &amp;quot;print to console&amp;quot; with a microprocessor, this &amp;quot;Hello, world!&amp;quot; will consist of toggling one of the 32u4&#x27;s I&#x2F;O pins once every half second. In this case, we will write to &lt;code&gt;PB5&lt;&#x2F;code&gt; (pin &lt;code&gt;9&lt;&#x2F;code&gt; on an Arduino Leonardo). If you don&#x27;t understand how AVR code works, I recommend reading a simple tutorial. This program simply configures &lt;code&gt;DDRB&lt;&#x2F;code&gt; to allow output for &lt;code&gt;PB5&lt;&#x2F;code&gt;, and toggles the &lt;code&gt;PB5&lt;&#x2F;code&gt; bit in &lt;code&gt;PORTB&lt;&#x2F;code&gt; every 500ms.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; main.cc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;avr&#x2F;io.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;util&#x2F;delay.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char const&lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;[]) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    DDRB |= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; PB5); 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(;;) {
&lt;&#x2F;span&gt;&lt;span&gt;        PORTB= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0b00100000&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_delay_ms&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;); 
&lt;&#x2F;span&gt;&lt;span&gt;        PORTB= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0b00000000&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_delay_ms&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;compiling&quot;&gt;Compiling&lt;&#x2F;h2&gt;
&lt;p&gt;This code can now be compiled with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;avr-g++ -DF_CPU&lt;&#x2F;span&gt;&lt;span&gt;=16000000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -D&lt;&#x2F;span&gt;&lt;span&gt; __AVR_ATmega32U4__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -mmcu&lt;&#x2F;span&gt;&lt;span&gt;=atmega32u4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -Iinclude -DBAUD&lt;&#x2F;span&gt;&lt;span&gt;=9600&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -std&lt;&#x2F;span&gt;&lt;span&gt;=c++11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -g -Os -w -fdata-sections -MMD -flto -c -o&lt;&#x2F;span&gt;&lt;span&gt; main.o main.cc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And linked with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;avr-g++ -w -Os -g -flto -fuse-linker-plugin -Wl&lt;&#x2F;span&gt;&lt;span&gt;,--gc-sections&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -mmcu&lt;&#x2F;span&gt;&lt;span&gt;=atmega32u4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -Iinclude -std&lt;&#x2F;span&gt;&lt;span&gt;=c++11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -DF_CPU&lt;&#x2F;span&gt;&lt;span&gt;=16000000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; main.elf main.o
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;avr-objcopy -O&lt;&#x2F;span&gt;&lt;span&gt; ihex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -j&lt;&#x2F;span&gt;&lt;span&gt; .eeprom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --set-section-flags&lt;&#x2F;span&gt;&lt;span&gt;=.eeprom=alloc,load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --no-change-warnings --change-section-lma&lt;&#x2F;span&gt;&lt;span&gt; .eeprom=0 main.elf main.eep
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;avr-objcopy -O&lt;&#x2F;span&gt;&lt;span&gt; ihex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -R&lt;&#x2F;span&gt;&lt;span&gt; .eeprom main.elf main.hex
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To create a HEX file for the program binary, and an eeprom dump. These are both going to be uploaded to the chip in the next step.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;flashing-the-32u4&quot;&gt;Flashing the 32u4&lt;&#x2F;h2&gt;
&lt;p&gt;The 32u4 chip must be in it&#x27;s bootloader in order to have it&#x27;s memory written. This can be done in one of two ways. The first (my preference) is to quickly reset the chip before running avrdude by pulling the &lt;code&gt;RST&lt;&#x2F;code&gt; line to ground. You can also put the chip in it&#x27;s bootloader by connecting to UART at &lt;code&gt;1200bps&lt;&#x2F;code&gt;. Once in the bootloader, the chip will stay there for 10 seconds.&lt;&#x2F;p&gt;
&lt;p&gt;WIth the 32u4 in it&#x27;s bootloader, we can flash our compiled code with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; avrdude&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -patmega32u4 -cavr109 -P&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;ttyACM0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -b57600 -v -U&lt;&#x2F;span&gt;&lt;span&gt; flash:w:main.hex:i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -U&lt;&#x2F;span&gt;&lt;span&gt; eeprom:w:main.eep
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;NOTE: &lt;code&gt;&#x2F;dev&#x2F;ttyACM0&lt;&#x2F;code&gt; may need to be changed depending on the system&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Once the code has uploaded, reset the chip to start the code.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Running RoboRIO firmware inside Docker</title>
            <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/running-roborio-native/</link>
            <guid>https://ewpratten.com/blog/running-roborio-native/</guid>
            <description>&lt;p&gt;It has now been 11 weeks since the last time I have had access to a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ni.com&#x2F;en-ca&#x2F;support&#x2F;model.roborio.html&quot;&gt;RoboRIO&lt;&#x2F;a&gt; to use for debugging code, and there are limits to my simulation software. So, I really only have one choice: &lt;em&gt;emulate my entire robot&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;My goal is to eventually have every bit of hardware on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.thebluealliance.com&#x2F;team&#x2F;5024&quot;&gt;5024&lt;&#x2F;a&gt;&#x27;s &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;cs.5024.ca&#x2F;webdocs&#x2F;docs&#x2F;robots&#x2F;darthRaider&quot;&gt;Darth Raider&lt;&#x2F;a&gt; emulated, and running on my docker swarm. Conveniently, everything uses (mostly) the same CPU architecture. In this post, I will go over how to build a RoboRIO docker container.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;host-system-requirements&quot;&gt;Host system requirements&lt;&#x2F;h2&gt;
&lt;p&gt;This process requires a host computer with:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;An x86_64 CPU&lt;&#x2F;li&gt;
&lt;li&gt;A decent amount of RAM&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;mirrors.lug.mtu.edu&#x2F;ubuntu-releases&#x2F;18.04&#x2F;&quot;&gt;Ubuntu 18.04&lt;&#x2F;a&gt; or later&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;install&#x2F;debian&#x2F;&quot;&gt;Docker CE&lt;&#x2F;a&gt; installed&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;compose&#x2F;install&#x2F;&quot;&gt;docker-compose&lt;&#x2F;a&gt; installed&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;getting-a-system-image&quot;&gt;Getting a system image&lt;&#x2F;h2&gt;
&lt;p&gt;This is the hardest step. To get a RoboRIO docker container running, you will need:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A copy of the latest RoboRIO firmware package&lt;&#x2F;li&gt;
&lt;li&gt;A copy of &lt;code&gt;libfakearmv7l.so&lt;&#x2F;code&gt; (&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;robotpy&#x2F;fakearmv7l&#x2F;releases&#x2F;download&#x2F;v1&#x2F;libfakearmv7l.so&quot;&gt;download&lt;&#x2F;a&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;roborio-firmware&quot;&gt;RoboRIO Firmware&lt;&#x2F;h3&gt;
&lt;p&gt;To acquire a copy of the latest RoboRIO Firmware package, you will need to install the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ni.com&#x2F;en-ca&#x2F;support&#x2F;downloads&#x2F;drivers&#x2F;download.frc-game-tools.html&quot;&gt;FRC Game Tools&lt;&#x2F;a&gt; on a &lt;strong&gt;Windows&lt;&#x2F;strong&gt; machine (not wine).&lt;&#x2F;p&gt;
&lt;p&gt;After installing the toolsuite, and activating it with your FRC team&#x27;s activation key (provided in Kit of Parts), you can grab the latest &lt;code&gt;FRC_roboRIO_XXXX_vXX.zip&lt;&#x2F;code&gt; file from the installation directory of the &lt;em&gt;FRC Imaging Tool&lt;&#x2F;em&gt; (This will vary depending on how, and where the Game Tools are installed).&lt;&#x2F;p&gt;
&lt;p&gt;After unzipping this file, you will find another ZIP file, and a LabVIEW FPGA file. Unzip the ZIP, and look for a file called &lt;code&gt;systemimage.tar.gz&lt;&#x2F;code&gt;. This is the RoboRIO system image. Copy it to your Ubuntu computer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bootstrapping&quot;&gt;Bootstrapping&lt;&#x2F;h2&gt;
&lt;p&gt;The bootstrap process is made up of a few parts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Enabling support for ARM-based docker containers&lt;&#x2F;li&gt;
&lt;li&gt;Converting the RoboRIO system image to a Docker base image&lt;&#x2F;li&gt;
&lt;li&gt;Building a Dockerfile with hacked auth&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;enabling-docker-arm-support&quot;&gt;Enabling Docker-ARM support&lt;&#x2F;h3&gt;
&lt;p&gt;Since the RoboRIO system image and libraries are compiled to run on ARMv7l hardware, they will refuse to run on an x86_64 system. This is where &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.qemu.org&#x2F;&quot;&gt;QEMU&lt;&#x2F;a&gt; comes in to play. We can use QEMU as an emulation layer between out docker containers and our CPU. To get QEMU set up, we must first install support for ARM-&amp;gt;x86 emulation by running:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; apt install qemu binfmt-support qemu-user-static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -y
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once QEMU has been installed, we must run the registration scripts with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --rm --privileged&lt;&#x2F;span&gt;&lt;span&gt; multiarch&#x2F;qemu-user-static&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --reset -p&lt;&#x2F;span&gt;&lt;span&gt; yes
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;converting-the-system-image-to-a-docker-base&quot;&gt;Converting the system image to a Docker base&lt;&#x2F;h3&gt;
&lt;p&gt;We have a system image filesystem, but need Docker to view it as a Docker image. &lt;&#x2F;p&gt;
&lt;h4 id=&quot;using-my-pre-built-image&quot;&gt;Using my pre-built image&lt;&#x2F;h4&gt;
&lt;p&gt;Feel free to skip the following step, and just use my &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;r&#x2F;ewpratten&#x2F;roborio&quot;&gt;pre-built&lt;&#x2F;a&gt; RoboRIO base image. It is already set up with hacked auth, and is (at the time of writing) based on firmware version &lt;code&gt;2020_v10&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To use it, replace &lt;code&gt;roborio:latest&lt;&#x2F;code&gt; with &lt;code&gt;ewpratten&#x2F;roborio:2020_v10&lt;&#x2F;code&gt; in the &lt;code&gt;docker-compose.yml&lt;&#x2F;code&gt; config below.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;building-your-own-image&quot;&gt;Building your own image&lt;&#x2F;h4&gt;
&lt;p&gt;Make a folder, and put both the system image, and &lt;code&gt;libfakearmv7l.so&lt;&#x2F;code&gt; files in it. This will be your &amp;quot;working directory&amp;quot;. Now, import the system image into docker with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; import .&#x2F;systemimage.tar.gz roborio:tmp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will build a docker base image out of the system image, and name it &lt;code&gt;roborio:tmp&lt;&#x2F;code&gt;. You can use this on it&#x27;s own, but if you want to deploy code to the container with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wpilibsuite&#x2F;GradleRIO&quot;&gt;GradleRIO&lt;&#x2F;a&gt;, or SSH into the container, you will need to strip the NI Auth.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;stripping-national-instruments-auth&quot;&gt;Stripping National Instruments Auth&lt;&#x2F;h3&gt;
&lt;p&gt;By default, the RoboRIO system image comes fairly locked down. To fix this, we can &amp;quot;extend&amp;quot; our imported docker image with some configuration to allow us to remove some unknown passwords.&lt;&#x2F;p&gt;
&lt;p&gt;In the working directory, we must first create a file called &lt;code&gt;common_auth&lt;&#x2F;code&gt;. This will store our modified authentication configuration. Add the following to the file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;#
&lt;&#x2F;span&gt;&lt;span&gt;# &#x2F;etc&#x2F;pam.d&#x2F;common-auth - authentication settings common to all services
&lt;&#x2F;span&gt;&lt;span&gt;#
&lt;&#x2F;span&gt;&lt;span&gt;# This file is included from other service-specific PAM config files,
&lt;&#x2F;span&gt;&lt;span&gt;# and should contain a list of the authentication modules that define
&lt;&#x2F;span&gt;&lt;span&gt;# the central authentication scheme for use on the system
&lt;&#x2F;span&gt;&lt;span&gt;# (e.g., &#x2F;etc&#x2F;shadow, LDAP, Kerberos, etc.).  The default is to use the
&lt;&#x2F;span&gt;&lt;span&gt;# traditional Unix authentication mechanisms.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# ~~~ This file is modified for use with Docker ~~~ 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# here are the per-package modules (the &amp;quot;Primary&amp;quot; block)
&lt;&#x2F;span&gt;&lt;span&gt;# auth	[success=2 auth_err=1 default=ignore]	pam_niauth.so nullok
&lt;&#x2F;span&gt;&lt;span&gt;# auth	[success=1 default=ignore]	pam_unix.so nullok
&lt;&#x2F;span&gt;&lt;span&gt;# here&amp;#39;s the fallback if no module succeeds
&lt;&#x2F;span&gt;&lt;span&gt;# auth	requisite			pam_deny.so
&lt;&#x2F;span&gt;&lt;span&gt;# prime the stack with a positive return value if there isn&amp;#39;t one already;
&lt;&#x2F;span&gt;&lt;span&gt;# this avoids us returning an error just because nothing sets a success code
&lt;&#x2F;span&gt;&lt;span&gt;# since the modules above will each just jump around
&lt;&#x2F;span&gt;&lt;span&gt;auth	required			pam_permit.so
&lt;&#x2F;span&gt;&lt;span&gt;# and here are more per-package modules (the &amp;quot;Additional&amp;quot; block)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, we must create a &lt;code&gt;Dockerfile&lt;&#x2F;code&gt; in the same directory with the following contents:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;FROM roborio:tmp
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Fixes issues with the original RoboRIO image
&lt;&#x2F;span&gt;&lt;span&gt;RUN mkdir -p &#x2F;var&#x2F;volatile&#x2F;tmp &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    mkdir -p &#x2F;var&#x2F;volatile&#x2F;cache &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    mkdir -p &#x2F;var&#x2F;volatile&#x2F;log &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    mkdir -p &#x2F;var&#x2F;run&#x2F;sshd
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;RUN opkg update &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    opkg install binutils-symlinks gcc-symlinks g++-symlinks libgcc-s-dev make libstdc++-dev
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Overwrite auth
&lt;&#x2F;span&gt;&lt;span&gt;COPY system&#x2F;common_auth &#x2F;etc&#x2F;pam.d&#x2F;common-auth
&lt;&#x2F;span&gt;&lt;span&gt;RUN useradd admin -ou 0 -g 0 -s &#x2F;bin&#x2F;bash -m
&lt;&#x2F;span&gt;&lt;span&gt;RUN usermod -aG sudo admin
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Fixes for WPILib
&lt;&#x2F;span&gt;&lt;span&gt;RUN mkdir -p &#x2F;usr&#x2F;local&#x2F;frc&#x2F;third-party&#x2F;lib
&lt;&#x2F;span&gt;&lt;span&gt;RUN chmod 777 &#x2F;usr&#x2F;local&#x2F;frc&#x2F;third-party&#x2F;lib
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# This forces uname to report armv7l
&lt;&#x2F;span&gt;&lt;span&gt;COPY system&#x2F;libfakearmv7l.so &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libfakearmv7l.so
&lt;&#x2F;span&gt;&lt;span&gt;RUN chmod +x &#x2F;usr&#x2F;local&#x2F;lib&#x2F;libfakearmv7l.so &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    mkdir -p &#x2F;home&#x2F;admin&#x2F;.ssh &amp;amp;&amp;amp; \ 
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;LD_PRELOAD=&#x2F;usr&#x2F;local&#x2F;lib&#x2F;libfakearmv7l.so&amp;quot; &amp;gt;&amp;gt; &#x2F;home&#x2F;admin&#x2F;.ssh&#x2F;environment &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;PermitUserEnvironment yes&amp;quot; &amp;gt;&amp;gt; &#x2F;etc&#x2F;ssh&#x2F;sshd_config &amp;amp;&amp;amp; \
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;PasswordAuthentication no&amp;quot;&amp;gt;&amp;gt; &#x2F;etc&#x2F;ssh&#x2F;sshd_config
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;# Put the CPU into 32bit mode, and start an SSH server
&lt;&#x2F;span&gt;&lt;span&gt;ENTRYPOINT [&amp;quot;setarch&amp;quot;, &amp;quot;linux32&amp;quot;, &amp;quot;&amp;amp;&amp;amp;&amp;quot;, &amp;quot;&#x2F;usr&#x2F;sbin&#x2F;sshd&amp;quot;, &amp;quot;-D&amp;quot; ]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This file will cause the container to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Install needed tools&lt;&#x2F;li&gt;
&lt;li&gt;Configure an &amp;quot;admin&amp;quot; user with full permissions&lt;&#x2F;li&gt;
&lt;li&gt;Set r&#x2F;w permissions for all FRC libraries&lt;&#x2F;li&gt;
&lt;li&gt;Overwrite the system architecture with a custom string to allow programs like &lt;code&gt;pip&lt;&#x2F;code&gt; to run properly&lt;&#x2F;li&gt;
&lt;li&gt;Enables password-less SSH login&lt;&#x2F;li&gt;
&lt;li&gt;Sets the CPU to 32bit mode&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We can now build the final image with these commands:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;Dockerfile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; roborio:local .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; rmi roborio:tmp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; tag roborio:local roborio:latest
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;running-the-roborio-container-locally&quot;&gt;Running the RoboRIO container locally&lt;&#x2F;h2&gt;
&lt;p&gt;We can now use &lt;code&gt;docker-compose&lt;&#x2F;code&gt; to start a fake robot network locally, and run our RoboRIO container. First, we need to make a &lt;code&gt;docker-compose.yml&lt;&#x2F;code&gt; file. In this file, add:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-yml &quot;&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;services&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;roborio&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;image&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;roborio:latest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Change this to &amp;quot;ewpratten&#x2F;roborio:2020_v10&amp;quot; if using my pre-built image
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;networks&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;robo_net&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ipv4_address&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10.50.24.2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;networks&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;robo_net&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ipam&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;driver&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;config&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;subnet&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10.50.24.0&#x2F;24
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We can now start the RoboRIO container by running&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span&gt; up
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You should now be able to SSH into the RoboRIO container with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh&lt;&#x2F;span&gt;&lt;span&gt; admin@10.50.24.2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or even deploy code to the container! (Just make sure to set your FRC team number to &lt;code&gt;5024&lt;&#x2F;code&gt;)&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Ludum Dare 46: Jamming with friends</title>
            <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/ludumdare46/</link>
            <guid>https://ewpratten.com/blog/ludumdare46/</guid>
            <description>&lt;p&gt;Over the past weekend I teamed up with @rsninja722, @wm-c, @exvacuum, @marshmarlow, and our friends Sally and Matt to participate in the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ldjam.com&#x2F;events&#x2F;ludum-dare&#x2F;46&quot;&gt;LudumDare46&lt;&#x2F;a&gt; game jam. This post will outline the game development process.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;day-0&quot;&gt;Day 0&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Starting at 20:30 Friday night, we all anxiously awaited this jam&#x27;s theme to be released.&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;The theme for Ludum Dare 46 is...&lt;br&gt;&lt;br&gt;Keep it alive&lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;APmeEhwjEp&quot;&gt;https:&#x2F;&#x2F;t.co&#x2F;APmeEhwjEp&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;hashtag&#x2F;LDJAM?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#LDJAM&lt;&#x2F;a&gt; &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;bzNYi2zlDG&quot;&gt;pic.twitter.com&#x2F;bzNYi2zlDG&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&amp;mdash; Ludum Dare (@ludumdare) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;ludumdare&#x2F;status&#x2F;1251314489934446593?ref_src=twsrc%5Etfw&quot;&gt;April 18, 2020&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt;
&lt;p&gt;..and so we started.&lt;&#x2F;p&gt;
&lt;p&gt;Day 0 was spend on three tasks:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Deciding the story for our game&lt;&#x2F;li&gt;
&lt;li&gt;Allocating tasks&lt;&#x2F;li&gt;
&lt;li&gt;Building a software framework for the game&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We decided to program our game in JavaScript (but not without an argument about types) because that is @rsninja722&#x27;s primary language, and we can use his JS game engine, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rsninja722&#x2F;game.js&quot;&gt;game.js&lt;&#x2F;a&gt;. On top of that, we also decided to use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;sass-lang.com&#x2F;&quot;&gt;SASS&lt;&#x2F;a&gt; for styling, and I designed &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rsninja722&#x2F;LudumDare46&#x2F;blob&#x2F;master&#x2F;docs&#x2F;assets&#x2F;js&#x2F;injection&#x2F;cssinjector.js&quot;&gt;a CSS injector&lt;&#x2F;a&gt; that allows us to share variables between JS and SASS.&lt;&#x2F;p&gt;
&lt;p&gt;After task allocation, I took on the job of handling sounds and sound loading for the game. I decided to start work on that during day 1, due to homework.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;The game&#x27;s progress at the end of Day 0 can be found at commit &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rsninja722&#x2F;LudumDare46&#x2F;tree&#x2F;0b4a1cdb92e62ff0f9453f6f169f641dd82e8f09&quot;&gt;0b4a1cd&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;day-1&quot;&gt;Day 1&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Day 1 started with @exvacuum developing a heartrate monitor system for the game:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;ludum-dare-46&#x2F;ld46-heartrate.png&quot; alt=&quot;Heartrate monitor&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Demo image showing off his algorithm&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;His progress was documented &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=oqcbO8x0evY&quot;&gt;on his YouTube channel&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I also started out by writing a sound system that uses audio channels to separate sounds. This system pre-caches all sounds while the game loads. Unfortunately, after getting my branch merged into master, I noticed a few bugs:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When queueing audio, the 2 most recent requests are always ignored&lt;&#x2F;li&gt;
&lt;li&gt;Some browsers do not allow me to play multiple audio streams at the same time&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Due to these issues, I decided to rewrite the audio backend to use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;howlerjs.com&#x2F;&quot;&gt;Howler.js&lt;&#x2F;a&gt;. I streamed this rewrite &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;videos&#x2F;595864066&quot;&gt;on Twitch&lt;&#x2F;a&gt;. The Howler rewrite was very painless, and made a much nicer interface for playing audio assets.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The old way
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;globalSoundContext&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;playSound&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;globalSoundContext&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;channels&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bgm&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;soundAssets&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;debug_ding&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The new way
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;soundAssets&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;debug_ding&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;play&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This rewrite also added integration with the volume control sliders in the game settings menu:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;ludum-dare-46&#x2F;ld46-settings-screen.png&quot; alt=&quot;Settings menu&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Audio Settings screen&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Later on in the day, a basic HUD was designed to incorporate the game elements. A bug was also discovered that causes Firefox-based clients to not render the background fill. We decided to replace the background fill with an image later.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;ludum-dare-46&#x2F;ld46-hud-v1.png&quot; alt=&quot;V1 HUD&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;V1 of the game HUD&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;While developing the sound backend, and tweaking UI, I added sound assets for heartbeats, and footsteps. World assets were also added, and the walking system was improved.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;ludum-dare-46&#x2F;ld46-world-assets-v1.png&quot; alt=&quot;World Mockup&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;The game with basic world assets loaded&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;@wm-c and @rsninja722 also spent time developing the game&#x27;s tutorial mode.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;The game&#x27;s progress at the end of Day 1 can be found at commit &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rsninja722&#x2F;LudumDare46&#x2F;tree&#x2F;84d843880f052fd274d2d14036220e6b591e9ec3&quot;&gt;84d8438&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;day-2-3&quot;&gt;Day 2 &amp;amp; 3&lt;&#x2F;h2&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Day 2 started with a new background asset, and a new HUD design:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;ludum-dare-46&#x2F;ld46-new-game-bg.png&quot; alt=&quot;Background&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;The game&#x27;s new background&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;ludum-dare-46&#x2F;ld46-hud-v2.png&quot; alt=&quot;HUD&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;The game&#x27;s new HUD&lt;&#x2F;em&gt; &lt;&#x2F;p&gt;
&lt;p&gt;@rsninja722 also got to work on updating the game&#x27;s collisions based on the new assets, while I added more sounds to the game (again, streaming this process &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.twitch.tv&#x2F;videos&#x2F;596589171&quot;&gt;on Twitch&lt;&#x2F;a&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;From then on, development time was just spent tweaking things such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A Chrome sound bug&lt;&#x2F;li&gt;
&lt;li&gt;A transition bug when moving from the loading screen to tutorial&lt;&#x2F;li&gt;
&lt;li&gt;Some collision bugs&lt;&#x2F;li&gt;
&lt;li&gt;Adding a new credits screen&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;The game&#x27;s progress at the end of Day 2 can be found at commit &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rsninja722&#x2F;LudumDare46&#x2F;tree&#x2F;b9d758f4172f2ca251da6f60af713888ef28b5fe&quot;&gt;b9d758f&lt;&#x2F;a&gt;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-game&quot;&gt;The Game&lt;&#x2F;h2&gt;
&lt;p&gt;Micromanaged Mike is free to play on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;rsninja.dev&#x2F;LudumDare46&#x2F;&quot;&gt;@rsninj722&#x27;s website&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;ludum-dare-46&#x2F;ld46-final.png&quot; alt=&quot;Game screenshot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Final game screenshot&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Robot reveal: Darth Raider</title>
            <pubDate>Fri, 21 Feb 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/darth-raider/</link>
            <guid>https://ewpratten.com/blog/darth-raider/</guid>
            <description>&lt;p&gt;My roles in this project included:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Being the head of software design and development&lt;&#x2F;li&gt;
&lt;li&gt;Assisting with mechanical design&lt;&#x2F;li&gt;
&lt;li&gt;Helping test mechanisms and system integration&lt;&#x2F;li&gt;
&lt;li&gt;Filming &amp;amp; producing the reveal teaser video&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;reveal-teaser&quot;&gt;Reveal teaser&lt;&#x2F;h2&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;500&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;iF-p-rTo8Xk&quot; title=&quot;Robot Reveal 2019&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;</description>
        </item>
        <item>
            <title>Compiling BrainFuck with a shell script</title>
            <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/brainfuckinbash/</link>
            <guid>https://ewpratten.com/blog/brainfuckinbash/</guid>
            <description>&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Brainfuck&quot;&gt;BrainFuck&lt;&#x2F;a&gt; is an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Esoteric_programming_language&quot;&gt;esoteric programming language&lt;&#x2F;a&gt; that is surprisingly easy to implement. It is almost on the same level as &amp;quot;Hello, world!&amp;quot;, but for compilers and interpreters. In this post, ill share my new little BrainFuck compiler I built with a bash script.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-brainfuck-instruction-set&quot;&gt;The BrainFuck instruction set&lt;&#x2F;h2&gt;
&lt;p&gt;BrainFuck has 8 simple instructions:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Instruction&lt;&#x2F;th&gt;&lt;th&gt;Operation&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;increment  data pointer&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;lt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;decrement  data pointer&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;+&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;increment the byte at the data pointer&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;-&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;decrement  the byte at the data pointer&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;.&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;print the current byte to stdout&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;,&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;read one byte from stdin to the current byte&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;jump to the matching &lt;code&gt;]&lt;&#x2F;code&gt; if the current byte is 0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;jump to the matching &lt;code&gt;[&lt;&#x2F;code&gt; if the current byte is nonzero&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;the-c-equivalent&quot;&gt;The C equivalent&lt;&#x2F;h3&gt;
&lt;p&gt;BrainFuck works on a &amp;quot;tape&amp;quot;. This is essentially a massive array, with a pointer that moves around. Luckily, this can be implemented with a tiny bit of C. (Thanks &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Brainfuck#Commands&quot;&gt;wikipedia&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;BF&lt;&#x2F;th&gt;&lt;th&gt;C code&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;++ptr;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;&amp;lt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;--ptr;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;+&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;++*ptr;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;-&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;--*ptr;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;.&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;putchar(*ptr);&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;,&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;*ptr=getchar();&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;[&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;while (*ptr) {&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;]&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;implementation&quot;&gt;Implementation&lt;&#x2F;h2&gt;
&lt;p&gt;Due to the fact BF has a direct conversion to C, I figured: &lt;em&gt;&amp;quot;Why not just use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;sed&#x2F;manual&#x2F;sed.html&quot;&gt;sed&lt;&#x2F;a&gt; to make a BF compiler?&amp;quot;&lt;&#x2F;em&gt;. And so I did.&lt;&#x2F;p&gt;
&lt;p&gt;The script is available at &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;git.io&#x2F;JvIHm&quot;&gt;git.io&#x2F;JvIHm&lt;&#x2F;a&gt;, and works as follows:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Create a file containing a &amp;quot;header&amp;quot; that contains some C code that imports &lt;code&gt;stdio.h&lt;&#x2F;code&gt; and creates a char array&lt;&#x2F;li&gt;
&lt;li&gt;Use SED to replace all BF instructions with the matching C code&lt;&#x2F;li&gt;
&lt;li&gt;Append a file footer with code to return the current value at the program pointer&lt;&#x2F;li&gt;
&lt;li&gt;Compile this c file with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gcc.gnu.org&#x2F;&quot;&gt;GCC&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</description>
        </item>
        <item>
            <title>I used cron for the first time</title>
            <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/cron/</link>
            <guid>https://ewpratten.com/blog/cron/</guid>
            <description>&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cron&quot;&gt;Cron&lt;&#x2F;a&gt; has always been one of those &amp;quot;scary sysadmin things&amp;quot; in my head. But today, I finally used it!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-need&quot;&gt;My need&lt;&#x2F;h2&gt;
&lt;p&gt;I have access to a private API that happens to clear it&#x27;s users if they are inactive for too long. To solve this, I decided to add a small cron job to make an API call once per month. Basically a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Keepalive&quot;&gt;keepalive&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-i-set-it-up&quot;&gt;How I set it up&lt;&#x2F;h2&gt;
&lt;p&gt;Adding a cron job to my laptop was very easy. First, I made a bash script for my api call (not needed, but I felt like doing it).&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#! &#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl --include --header &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Accept: application&#x2F;xml&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;API Endpoint Here&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --user &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;:$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then, by running &lt;code&gt;crontab -e&lt;&#x2F;code&gt; in my terminal, I just added a new line at the bottom of the file, discribing the task, and when it should be run.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cron&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-cron &quot;&gt;&lt;code class=&quot;language-cron&quot; data-lang=&quot;cron&quot;&gt;&lt;span&gt;# Edit this file to introduce tasks to be run by cron.
&lt;&#x2F;span&gt;&lt;span&gt;# 
&lt;&#x2F;span&gt;&lt;span&gt;# Each task to run has to be defined through a single line
&lt;&#x2F;span&gt;&lt;span&gt;# indicating with different fields when the task will be run
&lt;&#x2F;span&gt;&lt;span&gt;# and what command to run for the task
&lt;&#x2F;span&gt;&lt;span&gt;# 
&lt;&#x2F;span&gt;&lt;span&gt;# To define the time you can provide concrete values for
&lt;&#x2F;span&gt;&lt;span&gt;# minute (m), hour (h), day of month (dom), month (mon),
&lt;&#x2F;span&gt;&lt;span&gt;# and day of week (dow) or use &amp;#39;*&amp;#39; in these fields (for &amp;#39;any&amp;#39;).# 
&lt;&#x2F;span&gt;&lt;span&gt;# Notice that tasks will be started based on the cron&amp;#39;s system
&lt;&#x2F;span&gt;&lt;span&gt;# daemon&amp;#39;s notion of time and timezones.
&lt;&#x2F;span&gt;&lt;span&gt;# 
&lt;&#x2F;span&gt;&lt;span&gt;# Output of the crontab jobs (including errors) is sent through
&lt;&#x2F;span&gt;&lt;span&gt;# email to the user the crontab file belongs to (unless redirected).
&lt;&#x2F;span&gt;&lt;span&gt;# 
&lt;&#x2F;span&gt;&lt;span&gt;# For example, you can run a backup of all your user accounts
&lt;&#x2F;span&gt;&lt;span&gt;# at 5 a.m every week with:
&lt;&#x2F;span&gt;&lt;span&gt;# 0 5 * * 1 tar -zcf &#x2F;var&#x2F;backups&#x2F;home.tgz &#x2F;home&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;# 
&lt;&#x2F;span&gt;&lt;span&gt;# For more information see the manual pages of crontab(5) and cron(8)
&lt;&#x2F;span&gt;&lt;span&gt;# 
&lt;&#x2F;span&gt;&lt;span&gt;# m h  dom mon dow   command
&lt;&#x2F;span&gt;&lt;span&gt;00 11 1 * * &#x2F;usr&#x2F;local&#x2F;bin&#x2F;api-keepalive.sh &amp;lt;username&amp;gt; &amp;lt;password&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will run once per month, on the 1st, at 11:00.&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s it! Stupidly simple, and I am no longer scared of cron&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Programming a live robot</title>
            <pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/realtime-robot-code/</link>
            <guid>https://ewpratten.com/blog/realtime-robot-code/</guid>
            <description>&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;So.. what if we could skip asking for driver inputs, and just have the robot operators control the bot through a commandline interface?&amp;quot;&lt;&#x2F;em&gt; &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is exactly the kind of question I randomly ask while sitting in the middle of class, staring at my laptop. So, here is a post about my real-time programming adventure!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;geting-started&quot;&gt;Geting started&lt;&#x2F;h2&gt;
&lt;p&gt;To get started, I needed a few things. Firstly, I have a laptop running &lt;a href=&quot;&#x2F;about&#x2F;#my-gear&quot;&gt;a Linux distribution&lt;&#x2F;a&gt;. This allows me to use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Secure_Shell&quot;&gt;SSH&lt;&#x2F;a&gt; and &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Secure_copy&quot;&gt;SCP&lt;&#x2F;a&gt;. There are Windows versions of both of these programs, but I find the &amp;quot;linux experience&amp;quot; easier to use. Secondly, I have grabbed one of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.thebluealliance.com&#x2F;team&#x2F;5024&quot;&gt;5024&lt;&#x2F;a&gt;&#x27;s &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;cs.5024.ca&#x2F;webdocs&#x2F;docs&#x2F;robots&quot;&gt;robots&lt;&#x2F;a&gt; to be subjected to my experiment. The components I care about are: &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A RoboRIO running 2019v12 firmware&lt;&#x2F;li&gt;
&lt;li&gt;2 &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.ctr-electronics.com&#x2F;talon-srx.html&quot;&gt;TalonSRX&lt;&#x2F;a&gt; motor controllers &lt;&#x2F;li&gt;
&lt;li&gt;An FRC router&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Most importantly, the RoboRIO has &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;robotpy.readthedocs.io&#x2F;en&#x2F;stable&#x2F;install&#x2F;robot.html#install-robotpy&quot;&gt;RobotPy&lt;&#x2F;a&gt; and the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;robotpy.readthedocs.io&#x2F;en&#x2F;stable&#x2F;install&#x2F;ctre.html&quot;&gt;CTRE Libraries&lt;&#x2F;a&gt; installed.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ssh-connection&quot;&gt;SSH connection&lt;&#x2F;h3&gt;
&lt;p&gt;To get some code running on the robot, we must first connect to it via SSH. Depending on your connection to the RoboRIO, this step may be different. Generally, the following command will work just fine to connect (assuming your computer has an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Multicast_DNS&quot;&gt;mDNS&lt;&#x2F;a&gt; service):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh&lt;&#x2F;span&gt;&lt;span&gt; admin@roborio-&amp;lt;team&amp;gt;-frc.local
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you have issues, try one of the following addresses instead:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;roborio-&amp;lt;team&amp;gt;-FRC
&lt;&#x2F;span&gt;&lt;span&gt;roborio-&amp;lt;team&amp;gt;-FRC.lan
&lt;&#x2F;span&gt;&lt;span&gt;roborio-&amp;lt;team&amp;gt;-FRC.frc-field.local
&lt;&#x2F;span&gt;&lt;span&gt;10.TE.AM.2
&lt;&#x2F;span&gt;&lt;span&gt;172.22.11.2 # Only works on a USB connection
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you are asked for a password, and have not set one, press &lt;kbd&gt;Enter&lt;&#x2F;kbd&gt; 3 times (Don&#x27;t ask why.. this just works).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;repl-based-control&quot;&gt;REPL-based control&lt;&#x2F;h2&gt;
&lt;p&gt;If you have seen my work before, you&#x27;ll know that I use Python for basically everything. This project is no exception. Conveniently, the RoboRIO is a linux-based device, and can run a Python3 &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Read%E2%80%93eval%E2%80%93print_loop&quot;&gt;REPL&lt;&#x2F;a&gt;. This allows real-time robot programming using a REPL via SSH. &lt;&#x2F;p&gt;
&lt;p&gt;WPILib requires a robot class to act as a &amp;quot;callback&amp;quot; for robot actions. My idea was to build a special robot class with static methods to allow me to start it, then use the REPL to interact with some control methods (like &lt;code&gt;setSpeed&lt;&#x2F;code&gt; and &lt;code&gt;stop&lt;&#x2F;code&gt;).&lt;&#x2F;p&gt;
&lt;p&gt;After connecting to the robot via SSH, a Python REPL can be started by running &lt;code&gt;python3&lt;&#x2F;code&gt;. If there is already robot code running, it will be automatically killed in the next step. &lt;&#x2F;p&gt;
&lt;p&gt;With Python running, we will need 2 libraries imported. &lt;code&gt;wpilib&lt;&#x2F;code&gt; and &lt;code&gt;ctre&lt;&#x2F;code&gt;. When importing &lt;code&gt;wpilib&lt;&#x2F;code&gt; a message may appear to notify you that the old robot code has been stopped.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;wpilib
&lt;&#x2F;span&gt;&lt;span&gt;Killing previously running &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FRC &lt;&#x2F;span&gt;&lt;span&gt;program&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;FRC &lt;&#x2F;span&gt;&lt;span&gt;pid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1445 &lt;&#x2F;span&gt;&lt;span&gt;did not die within 0ms. Force killing &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;kill -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;ctre
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Keep in mind, this is a REPL. Lines that start with &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;&#x2F;code&gt; or &lt;code&gt;...&lt;&#x2F;code&gt; are &lt;em&gt;user input&lt;&#x2F;em&gt;. Everything else is produced by code.&lt;&#x2F;p&gt;
&lt;p&gt;Next, we need to write a little code to get the robot operational. To save time, I wrote this &amp;quot;library&amp;quot; to do most of the work for me. Just save this as &lt;code&gt;rtrbt.py&lt;&#x2F;code&gt; somewhere, then use SCP to copy it to &lt;code&gt;&#x2F;home&#x2F;lvuser&#x2F;rtrbt.py&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# RealTime FRC Robot control helper
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# By: Evan Pratten &amp;lt;ewpratten&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Import normal robot stuff
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;wpilib
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;ctre
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Handle WPI trickery
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;unittest.mock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;patch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;ImportError:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;mock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;patch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;sys
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;threading &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Thread
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;## Internal methods ##
&lt;&#x2F;span&gt;&lt;span&gt;_controllers = []
&lt;&#x2F;span&gt;&lt;span&gt;_thread: Thread
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;_RTRobot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wpilib.TimedRobot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;robotInit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Create motors
&lt;&#x2F;span&gt;&lt;span&gt;        _controllers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(ctre.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WPI_TalonSRX&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;        _controllers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(ctre.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;WPI_TalonSRX&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Set safe modes
&lt;&#x2F;span&gt;&lt;span&gt;        _controllers[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setSafetyEnabled&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        _controllers[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setSafetyEnabled&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;_start&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Handle fake args
&lt;&#x2F;span&gt;&lt;span&gt;    args = [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;patch.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span&gt;(sys, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, args):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(sys.argv)
&lt;&#x2F;span&gt;&lt;span&gt;        wpilib.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(_RTRobot)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;## Utils ##
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;startRobot&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Start the robot code &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;_thread
&lt;&#x2F;span&gt;&lt;span&gt;    _thread = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span&gt;=_start)
&lt;&#x2F;span&gt;&lt;span&gt;    _thread.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;setMotor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;speed&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Set a motor speed &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    _controllers[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(speed)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;arcadeDrive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;speed&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rotation&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot; Control the robot with arcade inputs &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    l = speed + rotation
&lt;&#x2F;span&gt;&lt;span&gt;    r = speed - rotation
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setMotor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, l)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setMotor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, r)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The idea is to create a simple robot program with global hooks into the motor controllers. Python&#x27;s mocking tools are used to fake commandline arguments to trick robotpy into thinking this script is being run via the RIO&#x27;s robotCommand.&lt;&#x2F;p&gt;
&lt;p&gt;Once this script has been placed on the robot, SSH back in as &lt;code&gt;lvuser&lt;&#x2F;code&gt; (not &lt;code&gt;admin&lt;&#x2F;code&gt;), and run &lt;code&gt;python3&lt;&#x2F;code&gt;. If using &lt;code&gt;rtrbt.py&lt;&#x2F;code&gt;, the imports mentioned above are handled for you. To start the robot, just run the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;rtrbt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;startRobot&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;WPILib will dump some logs into the terminal (and probably some spam) from it&#x27;s own thread. Don&#x27;t worry if you can&#x27;t see the REPL prompt. It&#x27;s probably just hidden due to the use of multiple threads in the same shell. Pressing &lt;kbd&gt;Enter&lt;&#x2F;kbd&gt; should show it again.&lt;&#x2F;p&gt;
&lt;p&gt;I added 2 functions for controlling motors. The first, &lt;code&gt;setMotor&lt;&#x2F;code&gt;, will set either the left (0), or right (1) motor to the specified speed. &lt;code&gt;arcadeDrive&lt;&#x2F;code&gt; will allow you to specify a speed and rotational force for the robot&#x27;s drivetrain.&lt;&#x2F;p&gt;
&lt;p&gt;To kill the code and exit, press &lt;kbd&gt;CTRL&lt;&#x2F;kbd&gt; + &lt;kbd&gt;D&lt;&#x2F;kbd&gt; then &lt;kbd&gt;CTRL&lt;&#x2F;kbd&gt; + &lt;kbd&gt;C&lt;&#x2F;kbd&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here is an example where I start the bot, then tell it to drive forward, then kill the left motor:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;Python &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3.6.8 &lt;&#x2F;span&gt;&lt;span&gt;(default, Oct  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7 2019&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;59&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;55&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;GCC &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8.3.0&lt;&#x2F;span&gt;&lt;span&gt;] on linux
&lt;&#x2F;span&gt;&lt;span&gt;Type &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;help&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;copyright&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;credits&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; or &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;license&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;more information.
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;rtrbt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;startRobot&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;53&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;46&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;472 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;INFO    &lt;&#x2F;span&gt;&lt;span&gt;: wpilib              : WPILib version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2019.2.3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;53&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;46&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;473 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;INFO    &lt;&#x2F;span&gt;&lt;span&gt;: wpilib              : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HAL &lt;&#x2F;span&gt;&lt;span&gt;base version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2019.2.3&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;53&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;46&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;473 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;INFO    &lt;&#x2F;span&gt;&lt;span&gt;: wpilib              : robotpy-ctre version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2019.3.2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;53&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;46&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;473 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;INFO    &lt;&#x2F;span&gt;&lt;span&gt;: wpilib              : robotpy-cscore version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2019.1.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;53&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;46&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;473 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;INFO    &lt;&#x2F;span&gt;&lt;span&gt;: faulthandler        : registered &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SIGUSR2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;PID&lt;&#x2F;span&gt;&lt;span&gt; 5447
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;53&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;46&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;474 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;INFO    &lt;&#x2F;span&gt;&lt;span&gt;: nt                  : NetworkTables initialized in server mode
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;53&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;46&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;497 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;INFO    &lt;&#x2F;span&gt;&lt;span&gt;: robot               : Default IterativeRobot.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disabledInit&lt;&#x2F;span&gt;&lt;span&gt;() method&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;Override me!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;53&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;46&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;498 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;INFO    &lt;&#x2F;span&gt;&lt;span&gt;: robot               : Default IterativeRobot.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;disabledPeriodic&lt;&#x2F;span&gt;&lt;span&gt;() method&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;Override me!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;53&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;46&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;498 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;INFO    &lt;&#x2F;span&gt;&lt;span&gt;: robot               : Default IterativeRobot.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;robotPeriodic&lt;&#x2F;span&gt;&lt;span&gt;() method&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;... &lt;&#x2F;span&gt;&lt;span&gt;Override me!
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arcadeDrive&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setMotor&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;^C
&lt;&#x2F;span&gt;&lt;span&gt;Exception ignored in: &amp;lt;module &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;threading&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;lib&#x2F;python3.6&#x2F;threading.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Traceback &lt;&#x2F;span&gt;&lt;span&gt;(most recent call last):
&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;lib&#x2F;python3.6&#x2F;threading.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1294&lt;&#x2F;span&gt;&lt;span&gt;, in _shutdown
&lt;&#x2F;span&gt;&lt;span&gt;    t.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;lib&#x2F;python3.6&#x2F;threading.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1056&lt;&#x2F;span&gt;&lt;span&gt;, in join
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_wait_for_tstate_lock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;usr&#x2F;lib&#x2F;python3.6&#x2F;threading.py&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1072&lt;&#x2F;span&gt;&lt;span&gt;, in _wait_for_tstate_lock
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;lock.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;acquire&lt;&#x2F;span&gt;&lt;span&gt;(block, timeout):
&lt;&#x2F;span&gt;&lt;span&gt;KeyboardInterrupt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The message at the end occurs when killing the code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I have no idea why any of this would be useful, or if it is even field legal.. It&#x27;s just a fun project for a monday morning. &lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Using an RNN to generate Bill Wurtz notes</title>
            <pubDate>Sat, 05 Oct 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/billwurtz/</link>
            <guid>https://ewpratten.com/blog/billwurtz/</guid>
            <description>&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;billwurtz.com&#x2F;&quot;&gt;Bill Wurtz&lt;&#x2F;a&gt; is an American musician who became &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;socialblade.com&#x2F;youtube&#x2F;user&#x2F;billwurtz&#x2F;realtime&quot;&gt;reasonably famous&lt;&#x2F;a&gt; through short musical videos posted to Vine and YouTube. I was searching through his website the other day, and stumbled upon a page labeled &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;billwurtz.com&#x2F;notebook.html&quot;&gt;&lt;em&gt;notebook&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;, and thought I should check it out.&lt;&#x2F;p&gt;
&lt;p&gt;Bill&#x27;s notebook is a large (about 580 posts) collection of random thoughts, ideas, and sometimes just collections of words. A prime source of entertainment, and neural network inputs..&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;If you are looking to burn something, fire may be just the ticket&amp;quot;&lt;&#x2F;em&gt; - Bill Wurtz&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;choosing-the-right-tool-for-the-job&quot;&gt;Choosing the right tool for the job&lt;&#x2F;h2&gt;
&lt;p&gt;If you haven&#x27;t noticed yet, Im building a neural net to generate notes based on his writing style and content. Anyone who has read &lt;a href=&quot;&#x2F;blog&#x2F;2018&#x2F;06&#x2F;27&#x2F;becomeranter&quot;&gt;my first post&lt;&#x2F;a&gt; will know that I have already done a similar project in the past. This means &lt;em&gt;time to reuse come code&lt;&#x2F;em&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;For this project, I decided to use an amazing library by @minimaxir called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;minimaxir&#x2F;textgenrnn&quot;&gt;textgenrnn&lt;&#x2F;a&gt;. This Python library will handle all of the heavy (and light) work of training an RNN on a text dataset, then generating new text. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;building-a-dataset&quot;&gt;Building a dataset&lt;&#x2F;h2&gt;
&lt;p&gt;This project was a joke, so I didn&#x27;t bother with properly grabbing each post, categorizing them, and parsing them. Instead, I build a little script to pull every HTML file from Bill&#x27;s website, and regex out the body. This ended up leaving some artifacts in the output, but I don&#x27;t really mind.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;re
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;requests
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;loadAllUrls&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    page = requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;billwurtz.com&#x2F;notebook.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).text
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    links = re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;HREF=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, page)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;links
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dumpEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;urls&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;url &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;urls:
&lt;&#x2F;span&gt;&lt;span&gt;        page = requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;billwurtz.com&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;{url}&amp;quot;).text.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;br&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;br&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot; &amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        data = re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;findall&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;head&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, page, re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MULTILINE&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ensure data
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(data) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(data[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;urls = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loadAllUrls&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Loaded &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(urls)}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; pages&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dumpEach&lt;&#x2F;span&gt;&lt;span&gt;(urls)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This script will print each of Bill&#x27;s notes to the console (on it&#x27;s own line). I used a simple redirect to write this to a file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;python3&lt;&#x2F;span&gt;&lt;span&gt; scrape.py &amp;gt; posts.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;training&quot;&gt;Training&lt;&#x2F;h2&gt;
&lt;p&gt;To train the RNN, I just used some of textgenrnn&#x27;s example code to read the posts file, and build an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hierarchical_Data_Format&quot;&gt;HDF5&lt;&#x2F;a&gt; file to store the RNN&#x27;s neurons.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;textgenrnn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;textgenrnn
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;generator = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;textgenrnn&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;generator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;train_from_file&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;path&#x2F;to&#x2F;posts.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num_epochs&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This takes quite a while to run, so I offloaded it to a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.digitalocean.com&#x2F;products&#x2F;droplets&#x2F;&quot;&gt;Droplet&lt;&#x2F;a&gt;, and left it running overnight.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-results&quot;&gt;The results&lt;&#x2F;h2&gt;
&lt;p&gt;Here are some of my favorite generated notes:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;note: do not feel better&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;hi  I am a car.&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;i am stuff and think about this before . this is it, the pond. how do they make me feel better?&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;i am still about the floor&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Not perfect, but it is readable english, so i call it a win!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;play-with-the-code&quot;&gt;Play with the code&lt;&#x2F;h2&gt;
&lt;p&gt;I have uploaded the basic code, the scraped posts, and a partial hdf5 file &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;be-bill&quot;&gt;to GitHub&lt;&#x2F;a&gt; for anyone to play with. Maybe make a twitter bot out of this?&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Building images from binary data</title>
            <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/buildingimgfrombin/</link>
            <guid>https://ewpratten.com/blog/buildingimgfrombin/</guid>
            <description>&lt;p&gt;During a computer science class today, we were talking about embedding code and metadata in &lt;em&gt;jpg&lt;&#x2F;em&gt; and &lt;em&gt;bmp&lt;&#x2F;em&gt; files. @exvacuum was showing off a program he wrote that watched a directory for new image files, and would display them on a canvas. He then showed us a special image. In this image, he had injected some metadata into the last few pixels, which were not rendered, but told his program where to position the image on the canvas, and it&#x27;s size.&lt;&#x2F;p&gt;
&lt;p&gt;This demo got @hyperliskdev and I thinking about what else we can do with image data. After some talk, the idea of converting application binaries to images came up. I had seen a blog post about visually decoding &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;On%E2%80%93off_keying&quot;&gt;OOK data&lt;&#x2F;a&gt; by converting an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.ni.com&#x2F;tutorial&#x2F;4805&#x2F;en&#x2F;&quot;&gt;IQ capture&lt;&#x2F;a&gt; to an image. With a little adaptation, I did the same for a few binaries on my laptop.&lt;&#x2F;p&gt;
&lt;!-- Tweet embed --&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I present: &amp;quot;Parts of &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;GIMP_Official?ref_src=twsrc%5Etfw&quot;&gt;@GIMP_Official&lt;&#x2F;a&gt;&amp;#39;s binary, represented as a bitmap&amp;quot; &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;iLljdE4nlK&quot;&gt;pic.twitter.com&#x2F;iLljdE4nlK&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&amp;mdash; Evan Pratten (@ewpratten) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;ewpratten&#x2F;status&#x2F;1171801959197794304?ref_src=twsrc%5Etfw&quot;&gt;September 11, 2019&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt; 
&lt;h2 id=&quot;program-design&quot;&gt;Program design&lt;&#x2F;h2&gt;
&lt;p&gt;Like all ideas I have, I wrote some code to test this idea out. Above is a small sample of the interesting designs found in the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.gimp.org&#x2F;&quot;&gt;gimp&lt;&#x2F;a&gt; binary. The goals for this script were to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Accept any file of any type or size&lt;&#x2F;li&gt;
&lt;li&gt;Allow the user to select the file dimensions&lt;&#x2F;li&gt;
&lt;li&gt;Generate an image&lt;&#x2F;li&gt;
&lt;li&gt;Write the data in a common image format&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you would like to see how the code works, read &amp;quot;&lt;em&gt;check out the script&lt;&#x2F;em&gt;&amp;quot;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-note-on-data-wrapping&quot;&gt;A note on data wrapping&lt;&#x2F;h2&gt;
&lt;p&gt;By using a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;wiki.python.org&#x2F;moin&#x2F;Generators&quot;&gt;generator&lt;&#x2F;a&gt;, and the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;docs.python.org&#x2F;3&#x2F;library&#x2F;functions.html#func-range&quot;&gt;range function&lt;&#x2F;a&gt;&#x27;s 3rd argument, any list can be easily split into a 2d list at a set interval.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Assuming l is a list of data, and n is an int that denotes the desired split location
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(l), n):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;yield &lt;&#x2F;span&gt;&lt;span&gt;l[i:i + n]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;binaries-have-a-habit-of-not-being-rectangular&quot;&gt;Binaries have a habit of not being rectangular&lt;&#x2F;h3&gt;
&lt;p&gt;Unlike photos, binaries are not generated from rectangular image sensors, but instead from compilers and assemblers (and sometimes hand-written binary). These do not generate perfect rectangles. Due to this, my script simply removes the last line from the image to &amp;quot;reshape&amp;quot; it. I may end up adding a small piece of code to pad the final line instead of stripping it in the future.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;other-file-types&quot;&gt;Other file types&lt;&#x2F;h2&gt;
&lt;p&gt;I also looked at other file types. Binaries are very interesting because they follow very strict ordering rules. I was hoping that a &lt;code&gt;wav&lt;&#x2F;code&gt; file would do something similar, but that does not appear to be the case. This is the most interesting pattern I could find in a &lt;code&gt;wav&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Following up my previous post with a tiny segment of an audio file. This one is little less interesting &lt;a href=&quot;https:&#x2F;&#x2F;t.co&#x2F;u9EFloxnK5&quot;&gt;pic.twitter.com&#x2F;u9EFloxnK5&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;&amp;mdash; Evan Pratten (@ewpratten) &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;ewpratten&#x2F;status&#x2F;1171883910827040774?ref_src=twsrc%5Etfw&quot;&gt;September 11, 2019&lt;&#x2F;a&gt;&lt;&#x2F;blockquote&gt; 
&lt;p&gt;Back to executable data, these are small segments of a &lt;code&gt;dll&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;bin-images&#x2F;dll.png&quot; alt=&quot;Segment 1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;bin-images&#x2F;dll2.png&quot; alt=&quot;Segment 2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;check-out-the-script&quot;&gt;Check out the script&lt;&#x2F;h2&gt;
&lt;p&gt;This script is hosted &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;binmap&quot;&gt;on my GitHub account&lt;&#x2F;a&gt; as a standalone file. Any version of python3 should work, but the following libraries are needed:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Pillow&lt;&#x2F;li&gt;
&lt;li&gt;Numpy&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Doing Python OOP the wrong way</title>
            <pubDate>Sat, 07 Sep 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/wrong-python/</link>
            <guid>https://ewpratten.com/blog/wrong-python/</guid>
            <description>&lt;p&gt;If you know me, you probably know of the many weird things I do with python. Most recent of which being this &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Fizz_buzz&quot;&gt;FizzBuzz&lt;&#x2F;a&gt; implementation in one line of python code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;=[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;FizzBuzz&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;] or &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;101&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This installment of &amp;quot;weird things I do with python&amp;quot; will not focus on one-liners (that&#x27;s going on my todo list though). But instead, playing with Python&#x27;s classes and object system.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-quick-introduction-to-classes&quot;&gt;A quick introduction to classes&lt;&#x2F;h2&gt;
&lt;p&gt;Im going to assume that you, the reader, have some reasonable knowledge of how computers work, and OOP concepts. If you do not, there are &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;swlh&#x2F;5-free-object-oriented-programming-online-courses-for-programmers-156afd0a3a73&quot;&gt;many great online resources&lt;&#x2F;a&gt; to help you out.&lt;&#x2F;p&gt;
&lt;p&gt;As a quick refresher, this is the Python syntax for a basic class:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This is the constructor. __init__ is an overridable python built-in
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;: int):
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Here we set the class&amp;#39; scoped my_number to arg1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.my_number = arg1
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;printMyNumber&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.my_number)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is really just a fancy setter and getter. Here is some example usage:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;my_object = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MyClass&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;my_object.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;printMyNumber&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Prints 10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;noticing-something-odd&quot;&gt;Noticing something odd&lt;&#x2F;h2&gt;
&lt;p&gt;Before reading the following, keep in mind that (as of now) I have not actually looked at the Python interpreter&#x27;s source code enough to know about their memory system. The following is just an educated guess.&lt;&#x2F;p&gt;
&lt;p&gt;Looking at any python class, you may notice that &lt;strong&gt;at least&lt;&#x2F;strong&gt; 1 argument is required. &lt;code&gt;self&lt;&#x2F;code&gt; is used to access the class&#x27; data from itself. This is not present in most other languages I know, which means there might be something interesting happening behind the scenes. Here is a re-implementation of &lt;code&gt;MyClass&lt;&#x2F;code&gt; from above in java:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;my_int;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;MyClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        my_int &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; arg1;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;printMyNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(my_int);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Notice the fact that there is no &lt;code&gt;self&lt;&#x2F;code&gt;? Yet Java methods can still access class data.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;implementing-objects-in-a-non-object-oriented-language&quot;&gt;Implementing objects in a non-object oriented language&lt;&#x2F;h2&gt;
&lt;p&gt;In a non-OOP language (like C), objects can be faked by creating &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Struct_(C_programming_language)&quot;&gt;structures&lt;&#x2F;a&gt; and some standard functions. These functions then take a pointer to their &amp;quot;parent&amp;quot; structure. Confusing? yes. But it works, and I see it used all over the place. Here a pseudocode example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;struct MyClass {
&lt;&#x2F;span&gt;&lt;span&gt;    int my_int; &#x2F;&#x2F; Scpoed int
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn printMyNumber(MyClass* self){
&lt;&#x2F;span&gt;&lt;span&gt;    print(self.my_int);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;printMyNumber&lt;&#x2F;code&gt; takes a pointer to it&#x27;s &amp;quot;parent class&amp;quot;, called &lt;code&gt;self&lt;&#x2F;code&gt;. Look familiar? This is how Python works.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;let-s-do-some-python&quot;&gt;Let&#x27;s do some Python&lt;&#x2F;h2&gt;
&lt;p&gt;Alright.. Time for some &amp;quot;broken&amp;quot; Python. Here is yet another implementation of &lt;code&gt;MyClass&lt;&#x2F;code&gt;, except this time, each function is globally scoped:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Private, globally scoped functions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;_init_myclass&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg1&lt;&#x2F;span&gt;&lt;span&gt;: int):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.my_number = arg1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;_myclass_printMyNumber&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.my_number)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# struct-like class containing function pointers
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__init__ &lt;&#x2F;span&gt;&lt;span&gt;= _init_myclass
&lt;&#x2F;span&gt;&lt;span&gt;    printMyNumber = _myclass_printMyNumber
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code will still function like a normal class. Unlike a regular class definition, the above code defines the constructor and &lt;code&gt;printMyNumber&lt;&#x2F;code&gt; methods in the global scope (marked as private with an underscore). A class is then created with function pointers to each of the global functions. This means that calling &lt;code&gt;MyClass.printMyNumber&lt;&#x2F;code&gt; will point to, and execute &lt;code&gt;_myclass_printMyNumber&lt;&#x2F;code&gt;. The interpreter still treats the underscore functions as members of &lt;code&gt;MyClass&lt;&#x2F;code&gt;, and passes the &lt;code&gt;self&lt;&#x2F;code&gt; argument along to them.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why&quot;&gt;Why?&lt;&#x2F;h2&gt;
&lt;p&gt;I have absolutely no idea why this would ever be useful. If you think you should start doing this in your code, &lt;strong&gt;don&#x27;t&lt;&#x2F;strong&gt;. It leads to very messy and confusing code, and is bad practice in just about every way. &lt;&#x2F;p&gt;
&lt;p&gt;The point of this post is to show yet another instance of the Python interpreter saying &amp;quot;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.urbandictionary.com&#x2F;define.php?term=idgaf&quot;&gt;idgaf&lt;&#x2F;a&gt;&amp;quot;, and letting us have a little fun.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>I did some cleaning</title>
            <pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/github-cleanup/</link>
            <guid>https://ewpratten.com/blog/github-cleanup/</guid>
            <description>&lt;p&gt;As I am continuing to check items off my TODO list before school starts, I have come to an item I have been putting off for a while. &lt;strong&gt;Clean up GitHub Account&lt;&#x2F;strong&gt;. Luckily, I discovered a little trick to make the process of deleting unused repos a little easier!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-a-list-of-repos-to-delete&quot;&gt;Getting a list of repos to delete&lt;&#x2F;h2&gt;
&lt;p&gt;I could have automated this, but I prefer a little control. To get the list, start by opening up a new Firefox window with a single tab. In this tab, open your GitHub profile to the list of repos.
Starting from the top, scroll through, and middle click on anything you want to delete. This opens it in a new tab.&lt;&#x2F;p&gt;
&lt;p&gt;Once you have a bunch of tabs open with repos to remove, use &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;addons.mozilla.org&#x2F;en-US&#x2F;firefox&#x2F;addon&#x2F;urls-list&#x2F;&quot;&gt;this Firefox plugin&lt;&#x2F;a&gt; to create a plaintext list of every link you opened, and paste the list of links into VS-code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-an-api-token&quot;&gt;Getting an API token&lt;&#x2F;h2&gt;
&lt;p&gt;Next, an API token is needed. Go to GitHub&#x27;s &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;settings&#x2F;tokens&quot;&gt;token settings&lt;&#x2F;a&gt;, and generate a new one (make sure to enable repository deletion).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;parsing-the-links&quot;&gt;&amp;quot;Parsing&amp;quot; the links&lt;&#x2F;h2&gt;
&lt;p&gt;With our new token, and out VS-code file, we can start &amp;quot;parsing&amp;quot; the data. &lt;&#x2F;p&gt;
&lt;p&gt;Pressing &lt;code&gt;CTRL + F&lt;&#x2F;code&gt; brings up the Find&#x2F;Search toolbar. In the text box, there are a few icons. Pressing the one farthest to the right will enable &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Regular_expression&quot;&gt;Regex&lt;&#x2F;a&gt; mode. With this set, paste the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;https:&#x2F;&#x2F;github.com&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, click the arrow on the left to enable &lt;em&gt;replace mode&lt;&#x2F;em&gt;, and put this in the new box:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;curl -XDELETE -H &amp;#39;Authorization: token &amp;lt;API token from above&amp;gt;&amp;#39; &amp;quot;https:&#x2F;&#x2F;api.github.com&#x2F;repos&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then press &lt;em&gt;replace all&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, replace the contents of the first box with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\n
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and the second with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;\n
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;and &lt;em&gt;replace all&lt;&#x2F;em&gt; again.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;deleting-the-repos&quot;&gt;Deleting the repos&lt;&#x2F;h2&gt;
&lt;p&gt;Simply copy the entire text file that was made, and paste it in a terminal, then press &amp;lt;enter&amp;gt; (this will take a while)&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Keyed data encoding with Python</title>
            <pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/shift2/</link>
            <guid>https://ewpratten.com/blog/shift2/</guid>
            <description>&lt;p&gt;I have always been interested in text and data encoding, so last year, I made my first encoding tool. &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;shift64&quot;&gt;Shift64&lt;&#x2F;a&gt; was designed to take plaintext data with a key, and convert it into a block of base64 that could, in theory, only be decoded with the original key. I had a lot of fun with this tool, and a very stripped down version of it actually ended up as a bonus question on the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;frc5024&#x2F;Programming-Test&#x2F;blob&#x2F;master&#x2F;test.md&quot;&gt;5024 Programming Test&lt;&#x2F;a&gt; for 2018&#x2F;2019. Yes, the key was in fact &lt;code&gt;5024&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This tool had some issues. Firstly, the code was a mess and only accepted hard-coded values. This made it very impractical as an every-day tool, and a nightmare to continue developing. Secondly, the encoder made use of entropy bits, and self modifying keys that would end up producing encoded files &amp;gt;1GB from just the word &lt;em&gt;hello&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shift2&quot;&gt;Shift2&lt;&#x2F;h2&gt;
&lt;p&gt;One of the oldest items on my TODO list has been to rewrite shift64, so I made a brand new tool out of it. &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;shift&quot;&gt;Shift2&lt;&#x2F;a&gt; is both a command-line tool, and a Python3 library that can efficiently encode and decode text data with a single key (unlike shift64, which used two keys concatenated into a single string, and separated by a colon).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;how-it-works&quot;&gt;How it works&lt;&#x2F;h3&gt;
&lt;p&gt;Shift2 has two inputs. A &lt;code&gt;file&lt;&#x2F;code&gt;, and a &lt;code&gt;key&lt;&#x2F;code&gt;. These two strings are used to produce a single output, the &lt;code&gt;message&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;When encoding a file, shift2 starts by encoding the raw data with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Ascii85&quot;&gt;base85&lt;&#x2F;a&gt;, to ensure that all data being passed to the next stage can be represented as a UTF-8 string (even binary data). This base85 data is then XOR encrypted with a rotating key. This operation can be expressed with the following (this example ignores the base85 encoding steps):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;file = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello reader! I am some input that needs to be encoded&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;key = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ewpratten&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;message = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i, char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;(file):
&lt;&#x2F;span&gt;&lt;span&gt;    message += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;chr&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ord&lt;&#x2F;span&gt;&lt;span&gt;(char) ^ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ord&lt;&#x2F;span&gt;&lt;span&gt;(key[i % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(key) - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The output of this contains non-displayable characters. A second base85 encoding is used to fix this. Running the example snippet above, then base85 encoding the &lt;code&gt;message&lt;&#x2F;code&gt; once results in:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;CIA~89YF&amp;gt;W1PTBJQBo*W6$nli7#$Zu9U2uI5my8n002}A3jh-XQWYCi2Ma|K9uW=@5di
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If using the shift2 commandline tool, you would see a different output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;B2-is8Y&amp;amp;4!ED2H~Ix&amp;lt;~LOCfn@P;xLjM_E8(awt`1YC&amp;lt;SaOLbpaL^T!^W_ucF8Er~?NnC$&amp;gt;e0@WAWn2bqc6M1yP+DqF4M_kSCp0uA5h-&amp;gt;H
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is for a few reasons. Firstly, as mentioned above, shift2 uses base85 &lt;strong&gt;twice&lt;&#x2F;strong&gt;. Once before, and once after XOR encryption. Secondly, a file header is prepended to the output to help the decoder read the file. This header contains version info, the file length, and the encoding type.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;try-it-yourself-with-pip&quot;&gt;Try it yourself with PIP&lt;&#x2F;h3&gt;
&lt;p&gt;I have published shift2 on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;shift-tool&#x2F;&quot;&gt;pypi.org&lt;&#x2F;a&gt; for use with PIP. To install shift2, ensure both &lt;code&gt;python3&lt;&#x2F;code&gt; and &lt;code&gt;python3-pip&lt;&#x2F;code&gt; are installed on your computer, then run:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Install shift2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pip3&lt;&#x2F;span&gt;&lt;span&gt; install shift-tool
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# View the help for shift2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shift2 -h
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div id=&quot;demo&quot; markdown=&quot;1&quot;&gt;
&lt;h3 id=&quot;try-it-in-the-browser&quot;&gt;Try it in the browser&lt;&#x2F;h3&gt;
&lt;p&gt;I have ported the core code from shift2 to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.brython.info&#x2F;index.html&quot;&gt;run in the browser&lt;&#x2F;a&gt;. This demo is entirely client-side, and may take a few seconds to load depending on your device.&lt;&#x2F;p&gt;
&lt;input type=&quot;radio&quot; id=&quot;encode&quot; name=&quot;shift-action&quot; value=&quot;encode&quot; checked&gt;
&lt;label for=&quot;encode&quot;&gt;Encode&lt;&#x2F;label&gt;
&lt;input type=&quot;radio&quot; id=&quot;decode&quot; name=&quot;shift-action&quot; value=&quot;decode&quot;&gt;
&lt;label for=&quot;decode&quot;&gt;Decode&lt;&#x2F;label&gt;
&lt;p&gt;&lt;input type=&quot;text&quot; id=&quot;key&quot; name=&quot;key&quot; placeholder=&quot;Encoding key&quot; required&gt;&lt;br&gt;
&lt;input type=&quot;text&quot; id=&quot;msg&quot; name=&quot;msg&quot; placeholder=&quot;Message&quot; required size=&quot;30&quot;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; id=&quot;shift-button&quot; disabled&gt;shift2 demo is loading... (this may take a few seconds)&lt;&#x2F;button&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;h3 id=&quot;future-plans&quot;&gt;Future plans&lt;&#x2F;h3&gt;
&lt;p&gt;Due to the fact that shift2 can also be used as a library (as outlined in the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;shift&#x2F;blob&#x2F;master&#x2F;README.md&quot;&gt;README&lt;&#x2F;a&gt;), I would like to write a program that allows users to talk to eachother IRC style over a TCP port. This program would use either a pre-shared, or generated key to encode &#x2F; decode messages on the fly.&lt;&#x2F;p&gt;
&lt;p&gt;If you are interested in helping out, or taking on this idea for yourself, send me an email.&lt;&#x2F;p&gt;
&lt;!-- Python code --&gt;
&lt;script type=&quot;text&#x2F;python&quot; src=&quot;&#x2F;assets&#x2F;python&#x2F;shift2&#x2F;shift2demo.py&quot;&gt;&lt;&#x2F;script&gt;</description>
        </item>
        <item>
            <title>My weird piece of EDC</title>
            <pubDate>Sat, 10 Aug 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/why-i-carry-nfc/</link>
            <guid>https://ewpratten.com/blog/why-i-carry-nfc/</guid>
            <description>&lt;p&gt;Im back with a quick little post about something I cary with me everywhere I go, EDC (Every-Day Carry) if you will.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-this-started&quot;&gt;How this started&lt;&#x2F;h2&gt;
&lt;p&gt;Earlier this year, my friend @hyperliskdev showed me a piece of &amp;quot;fake ID&amp;quot; he was given as a joke. After some experimentation, he noticed that, upon tapping it to his phone, he would get an error message about an un-formatted card.&lt;&#x2F;p&gt;
&lt;p&gt;After hearing of this, I opened up &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;play.google.com&#x2F;store&#x2F;apps&#x2F;details?id=com.wakdev.nfctools.pro&quot;&gt;NFC Tools&lt;&#x2F;a&gt; on my phone and started playing. We had quite some fun with &lt;a href=&quot;https:&#x2F;&#x2F;ewpratten.com&#x2F;blog&#x2F;why-i-carry-nfc&#x2F;#shenanigans&quot;&gt;various settings and data&lt;&#x2F;a&gt;, and I decided that I wanted a card too. I send a message to someone that I knew worked with these, and got myself 4 to play with.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shenanigans&quot;&gt;Shenanigans&lt;&#x2F;h2&gt;
&lt;p&gt;Upon figuring out how to write to @hyperliskdev&#x27;s card, we started out simple. We sent bits of text to eachother, and I eventually sent him a copy of my contact information, and bitcoin address. Then, came the real fun..&lt;&#x2F;p&gt;
&lt;p&gt;By setting the data type to &lt;code&gt;external link&lt;&#x2F;code&gt;, and the content to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=dQw4w9WgXcQ&quot;&gt;this totally not suspicious URL&lt;&#x2F;a&gt;, we now had the perfect tool for derailing a lesson. An automatic &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Rickrolling&quot;&gt;Rick Roll&lt;&#x2F;a&gt; card. Upon tapping this card to a phone, the youtube app would auto-play &lt;em&gt;Rick Astley&#x27;s Never Gonna Give You Up&lt;&#x2F;em&gt;. After this discovery, people started asking to buy pre-configured cards from me 😆.&lt;&#x2F;p&gt;
&lt;p&gt;After this came even more fun ideas:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Enabling flashlights&lt;&#x2F;li&gt;
&lt;li&gt;Rebooting phones&lt;&#x2F;li&gt;
&lt;li&gt;Calling phone numbers&lt;&#x2F;li&gt;
&lt;li&gt;Sending texts&lt;&#x2F;li&gt;
&lt;li&gt;Filling phones with fake contacts&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;practical-use&quot;&gt;Practical use&lt;&#x2F;h2&gt;
&lt;p&gt;I don&#x27;t actually carry my cards around for messing with people but instead, use them for things like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Cloning hotel access cards (being in a room of 4 with only 2 cards)&lt;&#x2F;li&gt;
&lt;li&gt;Creating login cards for school printers (so I don&#x27;t have to log in manually)&lt;&#x2F;li&gt;
&lt;li&gt;Sharing small amounts of data and links between phones&lt;&#x2F;li&gt;
&lt;li&gt;Giving my contact info to people&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Thanks to the NFC Tools app, pretty much everything is 3 taps and a swipe away. I strongly recommend picking up some cards for yourself if wou work with a large number of NFC-compatible systems.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-n&quot;&gt;A&#x2F;N&lt;&#x2F;h2&gt;
&lt;p&gt;Occasionally, I either have nothing in the works, or am working on some very boring and technical projects, so I look to post some fun content like this. Currently the latter of the options is true, and I wanted a quick break from writing networking code.&lt;&#x2F;p&gt;
&lt;p&gt;Let me know what you think of this type of content!&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Photos from Nova Scotia</title>
            <pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/photography/nova-scotia-2019/</link>
            <guid>https://ewpratten.com/photography/nova-scotia-2019/</guid>
            <description>&lt;!-- ## Evening shots --&gt;
&lt;a href=&quot;&amp;#x2F;photos&amp;#x2F;nova-scotia-2019&amp;#x2F;IMG_20190804_195626-01.jpeg&quot;&gt;
    &lt;img src=&quot;&amp;#x2F;photos&amp;#x2F;nova-scotia-2019&amp;#x2F;IMG_20190804_195626-01.jpeg&quot;  loading=&quot;lazy&quot;&gt;
&lt;&#x2F;a&gt;
&lt;br&gt;
&lt;a href=&quot;&amp;#x2F;photos&amp;#x2F;nova-scotia-2019&amp;#x2F;IMG_20190804_200022-01.jpeg&quot;&gt;
    &lt;img src=&quot;&amp;#x2F;photos&amp;#x2F;nova-scotia-2019&amp;#x2F;IMG_20190804_200022-01.jpeg&quot;  loading=&quot;lazy&quot;&gt;
&lt;&#x2F;a&gt;
&lt;br&gt;
&lt;h2 id=&quot;ultra-wides&quot;&gt;Ultra-wides&lt;&#x2F;h2&gt;
&lt;a href=&quot;&amp;#x2F;photos&amp;#x2F;nova-scotia-2019&amp;#x2F;PANO_20190805_123604.jpg&quot;&gt;
    &lt;img src=&quot;&amp;#x2F;photos&amp;#x2F;nova-scotia-2019&amp;#x2F;PANO_20190805_123604.jpg&quot;  loading=&quot;lazy&quot;&gt;
&lt;&#x2F;a&gt;
&lt;br&gt;
&lt;a href=&quot;&amp;#x2F;photos&amp;#x2F;nova-scotia-2019&amp;#x2F;PANO_20190805_114718.jpg&quot;&gt;
    &lt;img src=&quot;&amp;#x2F;photos&amp;#x2F;nova-scotia-2019&amp;#x2F;PANO_20190805_114718.jpg&quot;  loading=&quot;lazy&quot;&gt;
&lt;&#x2F;a&gt;
&lt;br&gt;
&lt;h2 id=&quot;other-interesting-photos&quot;&gt;Other interesting photos&lt;&#x2F;h2&gt;
&lt;a href=&quot;&amp;#x2F;photos&amp;#x2F;nova-scotia-2019&amp;#x2F;IMG_20190808_152323-01.jpeg&quot;&gt;
    &lt;img src=&quot;&amp;#x2F;photos&amp;#x2F;nova-scotia-2019&amp;#x2F;IMG_20190808_152323-01.jpeg&quot;  loading=&quot;lazy&quot;&gt;
&lt;&#x2F;a&gt;
&lt;br&gt;
&lt;a href=&quot;&amp;#x2F;photos&amp;#x2F;nova-scotia-2019&amp;#x2F;IMG_20190807_122409-01.jpeg&quot;&gt;
    &lt;img src=&quot;&amp;#x2F;photos&amp;#x2F;nova-scotia-2019&amp;#x2F;IMG_20190807_122409-01.jpeg&quot;  loading=&quot;lazy&quot;&gt;
&lt;&#x2F;a&gt;
&lt;br&gt;
&lt;a href=&quot;&amp;#x2F;photos&amp;#x2F;nova-scotia-2019&amp;#x2F;IMG_20190805_151052-01.jpeg&quot;&gt;
    &lt;img src=&quot;&amp;#x2F;photos&amp;#x2F;nova-scotia-2019&amp;#x2F;IMG_20190805_151052-01.jpeg&quot;  loading=&quot;lazy&quot;&gt;
&lt;&#x2F;a&gt;
&lt;br&gt;
</description>
        </item>
        <item>
            <title>Mind map generation with Python</title>
            <pubDate>Mon, 15 Jul 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/mindmap/</link>
            <guid>https://ewpratten.com/blog/mindmap/</guid>
            <description>&lt;p&gt;While working on an assignment with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;coggle.it&quot;&gt;Coggle&lt;&#x2F;a&gt; today, I noticed an interesting option in the save menu. &lt;em&gt;Download as .mm file&lt;&#x2F;em&gt;. Having rarely worked with mind maps before, and only doing it online, it never occured to me that someone would have a file format for it. So I took a look.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-a-mm-file&quot;&gt;What is a .mm file?&lt;&#x2F;h2&gt;
&lt;p&gt;It turns out, a &lt;code&gt;.mm&lt;&#x2F;code&gt; file is just some XML describing the mind map. Here is a simple mind map:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;mindmap&#x2F;mindmap-simple.png&quot; alt=&quot;Simple Mind Map&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And again as a &lt;code&gt;.mm&lt;&#x2F;code&gt; file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.9.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TEXT&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Master Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;FOLDED&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;POSITION&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;5d2d02b1a315dd0879f48c1c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;X_COGGLE_POSX&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;X_COGGLE_POSY&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;COLOR&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#b4b4b4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;font &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Helvetica&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;SIZE&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TEXT&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Child branch&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;FOLDED&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;POSITION&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;f72704969525d2a0333dd635&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;COLOR&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#7aa3e5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;font &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Helvetica&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;SIZE&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TEXT&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Children 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;FOLDED&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;POSITION&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;c83826af506cae6e55761d5c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;COLOR&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#7ea7e5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;font &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Helvetica&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;SIZE&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TEXT&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Children 2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;FOLDED&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;POSITION&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;ID&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;47723a4d0fb766863f70d204&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;COLOR&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#82aae7&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;font &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NAME&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Helvetica&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;SIZE&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;node&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Neat, right?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-can-we-do-with-it&quot;&gt;What can we do with it?&lt;&#x2F;h2&gt;
&lt;p&gt;I have not done much research about this because I wanted to work all of this out on my own. But I know one thing as a fact: working with XML sucks (especially in Python). I decided that this would be much better if I could load &lt;code&gt;.mm&lt;&#x2F;code&gt; files as JSON. This would allow easy manipulation and some cool projects.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-script&quot;&gt;My script&lt;&#x2F;h2&gt;
&lt;p&gt;Like everything I do, I made a script to play with these files. &lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s pretty simple. First, It loads a &lt;code&gt;.mm&lt;&#x2F;code&gt; file, then parses it into a &lt;code&gt;list&lt;&#x2F;code&gt; of &lt;code&gt;xml.etree.ElementTree.Element&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;raw_mm = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(args.file, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;fp:
&lt;&#x2F;span&gt;&lt;span&gt;    raw_mm = fp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    fp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;xml = ET.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fromstring&lt;&#x2F;span&gt;&lt;span&gt;(raw_mm)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The parsed &lt;code&gt;list&lt;&#x2F;code&gt; is then passed into a recursive function that constructs a &lt;code&gt;dict&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;xmlToDict&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xml&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    output = []
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;elem &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;(xml):
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TEXT&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; not in elem.attrib:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        name = elem.attrib[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;TEXT&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;        json_element = {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: name}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:            
&lt;&#x2F;span&gt;&lt;span&gt;            json_element[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;children&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xmlToDict&lt;&#x2F;span&gt;&lt;span&gt;(elem)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;continue
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Detect node type
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;json_element[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;children&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]:
&lt;&#x2F;span&gt;&lt;span&gt;            json_element[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;branch&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            json_element[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;] = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;leaf&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;del &lt;&#x2F;span&gt;&lt;span&gt;json_element[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;children&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        output.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(json_element)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;output
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, the &lt;code&gt;dict&lt;&#x2F;code&gt; is written to a file with &lt;code&gt;json.dump&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dump&lt;&#x2F;span&gt;&lt;span&gt;(mind_map, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(args.file + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.json&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The whole script (with comments) can be found on my &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;Ewpratten&#x2F;0d8f7c7371380c9ca8adcfc6502ccf84#file-parser-py&quot;&gt;GitHub account&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-output&quot;&gt;The output&lt;&#x2F;h2&gt;
&lt;p&gt;Running the &lt;code&gt;.mm&lt;&#x2F;code&gt; file from above through the script gives:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;[
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Master Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;children&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:[
&lt;&#x2F;span&gt;&lt;span&gt;            {
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Child branch&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;children&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:[
&lt;&#x2F;span&gt;&lt;span&gt;                    {
&lt;&#x2F;span&gt;&lt;span&gt;                        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Children 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;leaf&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                    },
&lt;&#x2F;span&gt;&lt;span&gt;                    {
&lt;&#x2F;span&gt;&lt;span&gt;                        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Children 2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;                        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;leaf&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                ],
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;branch&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        ],
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;branch&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-next-step&quot;&gt;The next step&lt;&#x2F;h2&gt;
&lt;p&gt;This script just translates a &lt;code&gt;.mm&lt;&#x2F;code&gt; file to JSON. Nothing else. Next, I want to convert this to a library, and add a JSON to &lt;code&gt;.mm&lt;&#x2F;code&gt; function as well. This leads into my ultimate goal for this project.&lt;&#x2F;p&gt;
&lt;p&gt;I want a script that I can drop in the root of any project to build a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;gource.io&#x2F;&quot;&gt;Gource&lt;&#x2F;a&gt;-style visualization of the folder structure. This will give me a way to make cool visualizations for lessons on the robotics team. On top of the folder visualization, Coggle&#x27;s new flowchart feature can be used to generate graphical representations of @frc5024&#x27;s codebases. This could give me an interactive overview of the work being done by our team. &lt;&#x2F;p&gt;
&lt;h3 id=&quot;further-learning&quot;&gt;Further learning&lt;&#x2F;h3&gt;
&lt;p&gt;crm.org has done a great writeup of &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;crm.org&#x2F;news&#x2F;free-flowin-mind-maps-with-coggle&quot;&gt;Coggle, and some of it&#x27;s features&lt;&#x2F;a&gt;. If you are looking to learn more about the tool, I recommend taking a few minute to read their post.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Taking a look back at GMAD</title>
            <pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/lookback-gmad/</link>
            <guid>https://ewpratten.com/blog/lookback-gmad/</guid>
            <description>&lt;p&gt;One day, back in June of 2018, I was both looking for a new project to work on, and trying to decide which Linux distro to install on one of my computers. From this, a little project was born. &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;ewpratten.retrylife.ca&#x2F;GiveMeADistro&#x2F;&quot;&gt;Give Me a Distro&lt;&#x2F;a&gt; (or, GMAD, as I like to call it) is a little website that chooses a random distribution of Linux and shows a description of what you are about to get yourself into, and a download link for the latest ISO.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;backend-tech&quot;&gt;Backend tech&lt;&#x2F;h2&gt;
&lt;p&gt;This is one of the simplest projects I have ever made. All the backend does is:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Select a random number (n)&lt;&#x2F;li&gt;
&lt;li&gt;Fetch the nth item from a list of distros&lt;&#x2F;li&gt;
&lt;li&gt;Push the selected data to the user via DOM&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;frontend&quot;&gt;Frontend&lt;&#x2F;h2&gt;
&lt;p&gt;This website is just plain HTML and CSS3, built without any CSS framework. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-regrets&quot;&gt;My regrets&lt;&#x2F;h2&gt;
&lt;p&gt;There are two things I do not like about this project. Firstly, on load, the site breifly suggests Arch Linux before flashing to the random selection. This is due to the fact that Arch is the default for people with Javascript disabled. Some kind of loading animation would fix this.&lt;&#x2F;p&gt;
&lt;p&gt;Secondly, the version of the site hosted on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;retrylife.ca&#x2F;gmad&quot;&gt;retrylife.ca&lt;&#x2F;a&gt; is actually just an iframe to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;ewpratten.github.io&#x2F;GiveMeADistro&quot;&gt;ewpratten.github.io&lt;&#x2F;a&gt; due to some CNAME issues.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;contributing&quot;&gt;Contributing&lt;&#x2F;h2&gt;
&lt;p&gt;If you would like to add a distro or three to the website, feel free to make a pull request over on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;GiveMeADistro&quot;&gt;GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-make-a-post-about-it-a-year-later&quot;&gt;Why make a post about it a year later?&lt;&#x2F;h2&gt;
&lt;p&gt;I just really enjoyed working with the project and sharing it with friends, so I figured I should mention it here too. Maybe it will inspire someone to make something cool!&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Scraping FRC team&#x27;s GitHub accounts to gather large amounts of data</title>
            <pubDate>Sat, 06 Jul 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/scrapingfrcgithub/</link>
            <guid>https://ewpratten.com/blog/scrapingfrcgithub/</guid>
            <description>&lt;p&gt;I was curious about the most used languages for FRC, so I build a Python script to find out what they where. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;some-basic-data&quot;&gt;Some basic data&lt;&#x2F;h2&gt;
&lt;p&gt;Before we get to the heavy work done by my script, let&#x27;s start with some general data.&lt;&#x2F;p&gt;
&lt;p&gt;Thanks to the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.thebluealliance.com&#x2F;apidocs&#x2F;v3&quot;&gt;TBA API&lt;&#x2F;a&gt;, I know that there are 6917 registered teams. 492 of them have registered at least one account on GitHub.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-the-script-works&quot;&gt;How the script works&lt;&#x2F;h2&gt;
&lt;p&gt;The script is split into steps:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Get a list of every registered team&lt;&#x2F;li&gt;
&lt;li&gt;Check for a github account attached to every registered team
&lt;ul&gt;
&lt;li&gt;If a team has an account, it is added to the dataset&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Load each github profile
&lt;ul&gt;
&lt;li&gt;If it is a private account, move on&lt;&#x2F;li&gt;
&lt;li&gt;Use Regex to find all languages used&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Compile data and sort&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;getting-a-list-of-accounts&quot;&gt;Getting a list of accounts&lt;&#x2F;h3&gt;
&lt;p&gt;This is probably the simplest step in the whole process. I used the auto-generated &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TBA-API&#x2F;tba-api-client-python&quot;&gt;tbaapiv3client&lt;&#x2F;a&gt; python library&#x27;s &lt;code&gt;get_teams_keys(key)&lt;&#x2F;code&gt; function, and kept incrementing &lt;code&gt;key&lt;&#x2F;code&gt; until I got an empty array. All returned data was then added together into a big list of team keys.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;checking-for-a-team-s-github-account&quot;&gt;Checking for a team&#x27;s github account&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.thebluealliance.com&#x2F;apidocs&#x2F;v3&quot;&gt;TBA API&lt;&#x2F;a&gt; helpfully provides a &lt;code&gt;&#x2F;api&#x2F;v3&#x2F;team&#x2F;&amp;lt;number&amp;gt;&#x2F;social_media&lt;&#x2F;code&gt; API endpoint that will give the GitHub username for any team you request. (or nothing if they don&#x27;t use github)&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;code&gt;for&lt;&#x2F;code&gt; loop on this with a list of every team number did the trick for finding accounts.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fetching-language-info&quot;&gt;Fetching language info&lt;&#x2F;h3&gt;
&lt;p&gt;To remove the need for an Oauth login to use the script, GitHub data is retrieved using standard HTTPS requests instead of AJAX requests to the API. This gets around the tiny rate limit, but takes a bit longer to complete. &lt;&#x2F;p&gt;
&lt;p&gt;To check for language usage, a simple Regex pattern can be used: &lt;code&gt;&#x2F;programmingLanguage&amp;quot;\&amp;gt;(.*)\&amp;lt;&#x2F;gm&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;When combined with an &lt;code&gt;re.findall()&lt;&#x2F;code&gt;, this pattern will return a list of all recent languages used by a team.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;data-saves-backup-solution&quot;&gt;Data saves &#x2F; backup solution&lt;&#x2F;h3&gt;
&lt;p&gt;To deal with the fact that large amounts of data are being requested, and people might want to pause the script, I have created a system to allow for &amp;quot;savestates&amp;quot;.&lt;&#x2F;p&gt;
&lt;p&gt;On launch of the script, it will check for a &lt;code&gt;.&#x2F;data.json&lt;&#x2F;code&gt; file. If this does not exist, one will be created. Otherwise, the contents will be read. This file contains both all the saved data, and some counters. &lt;&#x2F;p&gt;
&lt;p&gt;Each stage of the script contains a counter, and will increment the counter every time a team has been processed. This way, if the script is stopped and restarted, the parsers will just keep working from where they left off. This was very helpful when writing the script as, I needed to stop and start it every time I needed to implement a new feature.&lt;&#x2F;p&gt;
&lt;p&gt;All parsing data is saved to the json file every time the script completes, or it detects a &lt;code&gt;SIGKILL&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-i-learned&quot;&gt;What I learned&lt;&#x2F;h2&gt;
&lt;p&gt;After letting the script run for about an hour, I got a bunch of data from every registered team.&lt;&#x2F;p&gt;
&lt;p&gt;This data includes every project (both on and offseason) from each team, so teams that build t-shirt cannons using the CTRE HERO, would have C# in their list of languages. Things like that.&lt;&#x2F;p&gt;
&lt;p&gt;Unsurprisingly, by far the most popular programming language is Java, with 3232 projects. These projects where all mostly, or entirely written in Java. Next up, we have C++ with 725 projects, and Python with 468 projects. &lt;&#x2F;p&gt;
&lt;p&gt;After Java, C++, and Python, we start running in to languages used for dashboards, design, lessons, and offseason projects. Before I get to everything else, here is the usage of the rest of the valid languages for FRC robots:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;C (128)&lt;&#x2F;li&gt;
&lt;li&gt;LabView (153)&lt;&#x2F;li&gt;
&lt;li&gt;Kotlin (96)&lt;&#x2F;li&gt;
&lt;li&gt;Rust (4)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Now, the rest of the languages below Python:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;295 occurrences of JavaScript
&lt;&#x2F;span&gt;&lt;span&gt;153 occurrences of LabVIEW
&lt;&#x2F;span&gt;&lt;span&gt;128 occurrences of C
&lt;&#x2F;span&gt;&lt;span&gt;96 occurrences of Kotlin
&lt;&#x2F;span&gt;&lt;span&gt;72 occurrences of Arduino
&lt;&#x2F;span&gt;&lt;span&gt;71 occurrences of C#
&lt;&#x2F;span&gt;&lt;span&gt;69 occurrences of CSS
&lt;&#x2F;span&gt;&lt;span&gt;54 occurrences of PHP
&lt;&#x2F;span&gt;&lt;span&gt;40 occurrences of Shell
&lt;&#x2F;span&gt;&lt;span&gt;34 occurrences of Ruby
&lt;&#x2F;span&gt;&lt;span&gt;16 occurrences of Swift
&lt;&#x2F;span&gt;&lt;span&gt;16 occurrences of Jupyter Notebook
&lt;&#x2F;span&gt;&lt;span&gt;15 occurrences of Scala
&lt;&#x2F;span&gt;&lt;span&gt;12 occurrences of D
&lt;&#x2F;span&gt;&lt;span&gt;12 occurrences of TypeScript
&lt;&#x2F;span&gt;&lt;span&gt;9 occurrences of Dart
&lt;&#x2F;span&gt;&lt;span&gt;8 occurrences of Processing
&lt;&#x2F;span&gt;&lt;span&gt;7 occurrences of CoffeeScript
&lt;&#x2F;span&gt;&lt;span&gt;6 occurrences of Go
&lt;&#x2F;span&gt;&lt;span&gt;6 occurrences of Groovy
&lt;&#x2F;span&gt;&lt;span&gt;6 occurrences of Objective-C
&lt;&#x2F;span&gt;&lt;span&gt;4 occurrences of Rust
&lt;&#x2F;span&gt;&lt;span&gt;3 occurrences of MATLAB
&lt;&#x2F;span&gt;&lt;span&gt;3 occurrences of R
&lt;&#x2F;span&gt;&lt;span&gt;1 occurrences of Visual Basic
&lt;&#x2F;span&gt;&lt;span&gt;1 occurrences of Clojure
&lt;&#x2F;span&gt;&lt;span&gt;1 occurrences of Cuda
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I have removed markup and shell languages from that list because most of them are probably auto-generated.&lt;&#x2F;p&gt;
&lt;p&gt;In terms of github account names, 133 teams follow FRC convention and use a username starting with &lt;code&gt;frc&lt;&#x2F;code&gt;, followed by their team number, 95 teams use &lt;code&gt;team&lt;&#x2F;code&gt; then their number, and 264 teams use something else.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;using-the-script&quot;&gt;Using the script&lt;&#x2F;h2&gt;
&lt;p&gt;This script is not on PYPI this time. You can obtain a copy from my GitHub repo: &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;frc-code-stats&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;frc-code-stats&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;First, make sure both &lt;code&gt;python3.7&lt;&#x2F;code&gt; and &lt;code&gt;python3-pip&lt;&#x2F;code&gt; are installed on your computer. Next, delete the &lt;code&gt;data.json&lt;&#x2F;code&gt; file. Then, install the requirements with &lt;code&gt;pip3 install -r requirements.txt&lt;&#x2F;code&gt;. Finally, run with &lt;code&gt;python3 main.py&lt;&#x2F;code&gt; to start the script. Now, go outside and enjoy nature for about an hour, and your data should be loaded!.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>devDNS</title>
            <pubDate>Mon, 01 Jul 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/devdns/</link>
            <guid>https://ewpratten.com/blog/devdns/</guid>
            <description>&lt;p&gt;Over the past year and a half, I have been hacking my way around the undocumented &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;devrant.com&quot;&gt;devRant&lt;&#x2F;a&gt; auth&#x2F;write API. At the request of devRant&#x27;s creators, this API must not be documented due to the way logins work on the platform. That is besides the point. I have been working on a little project called &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;devrant.com&#x2F;collabs&#x2F;2163502&quot;&gt;devDNS&lt;&#x2F;a&gt; over the past few days that uses this undocumented API. Why must I be so bad at writing intros?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-devdns&quot;&gt;What is devDNS&lt;&#x2F;h2&gt;
&lt;p&gt;devDNS is a devRant bot written in python. It will serve any valid DNS query from any user on the platform. A query is just a comment in one of the following forms:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;@devDNS example.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;@devDNS MX example.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Of course, &lt;code&gt;MX&lt;&#x2F;code&gt; and &lt;code&gt;example.com&lt;&#x2F;code&gt; are to be replaced with the domain and entry of your choosing.&lt;&#x2F;p&gt;
&lt;p&gt;devDNS was inspired by &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;1111resolver&quot;&gt;@1111Resolver&lt;&#x2F;a&gt;, and the source is available on &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;devDNS&quot;&gt;GitHub&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;&#x2F;h2&gt;
&lt;p&gt;The Python script behind devDNS is very simple. devDNS does the following every 10 seconds:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Fetch all new notifs&lt;&#x2F;li&gt;
&lt;li&gt;Find only mentions&lt;&#x2F;li&gt;
&lt;li&gt;Spin off a thread for each mention that passes a basic parser (Is the message 2 or 3 words long)&lt;&#x2F;li&gt;
&lt;li&gt;In the thread, check if the message is a control message (allows me to view the status of the bot via devRant)&lt;&#x2F;li&gt;
&lt;li&gt;Check if the request matches a required pattern&lt;&#x2F;li&gt;
&lt;li&gt;Call &lt;code&gt;dnspython&lt;&#x2F;code&gt; with requested record and domain&lt;&#x2F;li&gt;
&lt;li&gt;Receive answer from a custom &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pi-hole.net&#x2F;&quot;&gt;PIHole&lt;&#x2F;a&gt; server with caching and super low latency&lt;&#x2F;li&gt;
&lt;li&gt;Send a comment with the results to the requester&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Thats it! Super simple, and only two days from concept to reality.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;where-is-this-hosted&quot;&gt;Where is this hosted?&lt;&#x2F;h2&gt;
&lt;p&gt;This program is hosted on a raspberry pi laying in my room running docker. I also have &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.portainer.io&#x2F;&quot;&gt;Portainer&lt;&#x2F;a&gt; set up so I can easily monitor the bot from my phone over my VPN.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>I had some fun with a router</title>
            <pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/pwnlink/</link>
            <guid>https://ewpratten.com/blog/pwnlink/</guid>
            <description>&lt;p&gt;I was playing around with some D-link routers today and remembered an &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;33520&quot;&gt;ExploitDB Entry&lt;&#x2F;a&gt; I read a while ago. Many D-link routers have a great feature that allows remote management and configuration queries. Interestingly, this cannot be disabled, and one of the pages contains a cleartext version of the admin password (yay!).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-to-get-yourself-an-admin-password&quot;&gt;How to get yourself an admin password&lt;&#x2F;h2&gt;
&lt;p&gt;On any supported router, make an HTTP request to &lt;code&gt;http:&#x2F;&#x2F;your.router.ip.addr&#x2F;tools_admin.asp&#x2F;&lt;&#x2F;code&gt;. This will return a pretty large XML file containing information about your router&#x27;s hardware and configuration. &lt;&#x2F;p&gt;
&lt;p&gt;Notice the fact that you did not have to log in. This is due to the fact that this file seems to be used by a remote management service of some sort. &lt;&#x2F;p&gt;
&lt;p&gt;The important thing to note here is that, when parsed with the regex pattern: &lt;code&gt;name=&amp;quot;user_password_tmp&amp;quot; value=&amp;quot;(.*)&amp;quot;&amp;gt;&lt;&#x2F;code&gt;, you get a single string. This string is the admin password of the device.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;supported-routers&quot;&gt;Supported routers&lt;&#x2F;h2&gt;
&lt;p&gt;This is supported by many D-link routers. The ones I know about are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DIR-835&lt;&#x2F;li&gt;
&lt;li&gt;DIR-855L&lt;&#x2F;li&gt;
&lt;li&gt;DGL-5500&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Some routers have this XML file, but it is restricted... By a user without a password. These are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;DHP-1565&lt;&#x2F;li&gt;
&lt;li&gt;DIR-652&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;pwnlink&quot;&gt;PWNlink&lt;&#x2F;h2&gt;
&lt;p&gt;Like everything I play with, I made a script to do this all for me (and spent a large amount of time adding colours to the text).&lt;&#x2F;p&gt;
&lt;p&gt;My script is called PWNlink (PWN + D-link), It automatically finds a router on your network by looking for a specific DNS entry created by many D-link routers, then checking your gateway. Next, PWNlink reads you router&#x27;s &lt;code&gt;hnap1&lt;&#x2F;code&gt; config to find it&#x27;s model number. If supported, the script will read and parse the appropriate configs to give you the admin credentials for your router. &lt;&#x2F;p&gt;
&lt;p&gt;PWNlink can be installed on any *nix computer that has both &lt;code&gt;python3.7&lt;&#x2F;code&gt; and &lt;code&gt;python3-pip&lt;&#x2F;code&gt; installed. To install PWNlink, run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;pip3 install pwnlink
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run the script without any arguments for automatic detection, or pass any IP address to use manual detection.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;disclamier-thingy&quot;&gt;Disclamier thingy&lt;&#x2F;h2&gt;
&lt;p&gt;I don&#x27;t see much point to these, but I should probably put one anyways.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Don&#x27;t be dumb with this script.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I have only used it on my own (or 5024&#x27;s) routers, and did not create PWNlink with any malicious intent.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Hunting snakes with a shotgun</title>
            <pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/python/</link>
            <guid>https://ewpratten.com/blog/python/</guid>
            <description>&lt;p&gt;A rather large number of people know me as &amp;quot;the guy who does weird things with python&amp;quot;. I would object to this title, but it is quite accurate. So, here are some of the things I like playing with in python. None of these are actually breaking the language, just little known facts and syntax. At some point I will share about actually breaking the language. For now, enjoy the weird things I have found over the past 6 years.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;type-hints&quot;&gt;Type hints&lt;&#x2F;h2&gt;
&lt;p&gt;A little known feature of python is called &amp;quot;type hinting&amp;quot; (PEP 484). This is actually quite common to see in standard libraries, and has it&#x27;s own special syntax:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Here is a regular function
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;meep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;a*b^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This function has no real reason to exsist, and is lacking any sort of documentation.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Let&amp;#39;s add a docstring to explain what it does
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;meep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot; This function returns the result of a times b squared &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;a*b^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Ok. The docstring explains the function, but is not too helpful 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# what are a and b? what does this return? 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# For all we know, a could actually be a string (in which case, this function would return a string)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Let&amp;#39;s fix that up with a type hint
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;meep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: int, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: int):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot; This function returns the result of a times b squared &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;a*b^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Thanks to the :int (called a type hint in case you didn&amp;#39;t notice that yet), we now know that this function expects two ints.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Now, to finish this up with a secondary type hint to specify the return type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;meep&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;: int, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;: int) -&amp;gt; int:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot; This function returns the result of a times b squared &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;a*b^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# There. Now we can clearly see that this function takes too ints, and returns one int. 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# If only this was a requirement in the language. So many headaches could be solved.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, keep in mind that this is called a type &lt;em&gt;hint&lt;&#x2F;em&gt;. The python compiler (yes.. Give me a second for that one) does not actually care if you obey the hint or not. Feel free to send incorrect data into a hinted function and see what you can break. Critical functions should both hint and check the data types being provided.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;type-declarations&quot;&gt;Type declarations&lt;&#x2F;h2&gt;
&lt;p&gt;Just like type hints for functions, python has hints for variables too.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# A regular variable. Must be declared with an initial value
&lt;&#x2F;span&gt;&lt;span&gt;my_state = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# my_state is None, as it has not been set, but needs to exist.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Let&amp;#39;s assume that my_state is to be a state:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    status = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;toggle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.status != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.status
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Finally, its time to set the state to something useful
&lt;&#x2F;span&gt;&lt;span&gt;my_state = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;my_state.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toggle&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Ok.. I hate this. Let&amp;#39;s start by using type declarations first
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Any variable can be un-initialized and just have a type. Like so:
&lt;&#x2F;span&gt;&lt;span&gt;my_state: State
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This works for anything
&lt;&#x2F;span&gt;&lt;span&gt;is_alive: bool
&lt;&#x2F;span&gt;&lt;span&gt;age: int
&lt;&#x2F;span&gt;&lt;span&gt;name: str
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Now, with this new knowledge, let&amp;#39;s rewrite State
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    status: bool
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;toggle&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: State) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.status != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.status
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# And initialize my_state with slightly different syntax
&lt;&#x2F;span&gt;&lt;span&gt;my_state = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I have not found much use for this yet. Hopefully there is something cool to use it for.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;one-line-functions&quot;&gt;One-line functions&lt;&#x2F;h2&gt;
&lt;p&gt;This is more common knowlage. A function can be declared in one line&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Here is an adder function
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;adder1&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;:int, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;:int) -&amp;gt; int:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;a+b
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Here is a one-line adder function
&lt;&#x2F;span&gt;&lt;span&gt;adder2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b &lt;&#x2F;span&gt;&lt;span&gt;: a+b
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# State from above can be compacted further:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;State&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    status: bool
&lt;&#x2F;span&gt;&lt;span&gt;    toggle = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;lambda &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.status != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.status
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ternary-operations&quot;&gt;Ternary operations&lt;&#x2F;h2&gt;
&lt;p&gt;On the trend of one-line code, We have the one-line if&#x2F;else, also known as a Ternary in more sensible languages.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Here is an if&#x2F;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span&gt;is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The world has ended&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;All is good&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Here is a smaller if&#x2F;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;The world has ended&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span&gt;is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;All is good&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;compiled-python&quot;&gt;Compiled python&lt;&#x2F;h2&gt;
&lt;p&gt;This one is interesting. Python, like Java, is compiled into bytecode. So yes, it technically is a compiled language. To see said bytecode, take a look at any &lt;code&gt;.pyc&lt;&#x2F;code&gt; file sitting in your &lt;code&gt;__pycache__&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;blog-formatting-experiments&quot;&gt;Blog formatting experiments&lt;&#x2F;h2&gt;
&lt;p&gt;I am still playing with post formats, and various types of content. This is more random than I usually prefer. Let me know your thoughts on the social media platform of your choosing.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>BashSmash</title>
            <pubDate>Wed, 26 Jun 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/bashsmash/</link>
            <guid>https://ewpratten.com/blog/bashsmash/</guid>
            <description>&lt;p&gt;I was watching this great &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.google.com&#x2F;url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=1&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=2ahUKEwiOhNze_4fjAhUiB50JHR12D8AQwqsBMAB6BAgJEAQ&amp;amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D6D1LnMj0Yt0&amp;amp;usg=AOvVaw2nOgft0SoPZujc9js9Vxhx&quot;&gt;Liveoverflow video&lt;&#x2F;a&gt; yesterday, and really liked the idea of building escape sequences with strings. So, I built a new tool, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;bashsmash&#x2F;&quot;&gt;BashSmash&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-goal&quot;&gt;The goal&lt;&#x2F;h2&gt;
&lt;p&gt;The goal of BashSmash is very similar to that described in Liveoverflow&#x27;s video. Do anything in bash without using any letters or numbers except &lt;code&gt;n&lt;&#x2F;code&gt; and &lt;code&gt;f&lt;&#x2F;code&gt; (he used &lt;code&gt;i&lt;&#x2F;code&gt; instead of &lt;code&gt;f&lt;&#x2F;code&gt;). This can both bypass shell injection filters, and generally mess with people.&lt;&#x2F;p&gt;
&lt;p&gt;Saying &amp;quot;Hey, you should run:&amp;quot;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__&lt;&#x2F;span&gt;&lt;span&gt;() {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;${#};}; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;(&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;(&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Instead of:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;span&gt; rm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -rf --no-preserve--root&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Can usually get you much farther with your goal of world domination.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-does-this-work&quot;&gt;How does this work?&lt;&#x2F;h2&gt;
&lt;p&gt;BashSmash abuses bash wildcards, octal escape codes, and a large number of backslashes to obfuscate any valid shell script.&lt;&#x2F;p&gt;
&lt;p&gt;Firstly, it is important to know that &lt;code&gt;printf&lt;&#x2F;code&gt; will gladly convert any octal to a string, and bash&#x27;s eval (&lt;code&gt;$()&lt;&#x2F;code&gt;) function will gladly run any string as a bash script. (See where this is going?)&lt;&#x2F;p&gt;
&lt;p&gt;Because of these tools, we know that the following is possible:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Printf-ing a string will print the string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This will return hello
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Printf-ing a sequence of octal escapes will also print a string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\150\145\154\154\157&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This will also return hello
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Eval-ing a printf of an octal escape sequence will build a string, then run it in bash
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\150\145\154\154\157&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This will warn that &amp;quot;hello&amp;quot; is not a valid command
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This has some issues. You may have noticed that letters are required to spell &lt;code&gt;printf&lt;&#x2F;code&gt;, and numbers are needed for the octal escapes. Let&#x27;s start by fixing the letters problem.&lt;&#x2F;p&gt;
&lt;p&gt;Bash allows wildcards. You may have run something like &lt;code&gt;cp .&#x2F;foo&#x2F;* .&#x2F;bar&lt;&#x2F;code&gt; before. This uses the wildcard &lt;code&gt;*&lt;&#x2F;code&gt;. The &lt;code&gt;*&lt;&#x2F;code&gt; wildcard will be auto-evaluated to expand into a list of all files in it&#x27;s place.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Let&amp;#39;s assume that .&#x2F;foo contains the following files:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#   john.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#   carl.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Running the following:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;foo&#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Will automatically expand to:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;foo&#x2F;john.txt .&#x2F;foo&#x2F;carl.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Now, lets assume that .&#x2F;baz contains a single file:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#   KillHumans.sh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Running:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;baz&#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Will execute KillHumans.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Neat, Right? To take this a step further, you can use the second wildcard, &lt;code&gt;?&lt;&#x2F;code&gt;, to specify the number of characters you want to look for. Running &lt;code&gt;.&#x2F;baz&#x2F;?&lt;&#x2F;code&gt; will not run &lt;code&gt;KillHumans.sh&lt;&#x2F;code&gt; because &lt;code&gt;KillHumans.sh&lt;&#x2F;code&gt; is not 1 char long. But &lt;code&gt;.&#x2F;baz&#x2F;?????????????&lt;&#x2F;code&gt; will. This is messy, but it works.&lt;&#x2F;p&gt;
&lt;p&gt;Now, back to our problem with &lt;code&gt;printf&lt;&#x2F;code&gt;. &lt;code&gt;printf&lt;&#x2F;code&gt; is located in &lt;code&gt;&#x2F;usr&#x2F;bin&#x2F;printf&lt;&#x2F;code&gt; on all *nix systems. This is handy as, firstly, this can be wildcarded, and secondly, the path contains 2 &lt;code&gt;n&lt;&#x2F;code&gt;&#x27;s and an &lt;code&gt;f&lt;&#x2F;code&gt; (the two letters we are allowed to use). So, instead of calling &lt;code&gt;printf&lt;&#x2F;code&gt;, we can call &lt;code&gt;&#x2F;???&#x2F;??n&#x2F;???n?f&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Now, we can call:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;??n&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\150\145\154\154\157&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# To print &amp;quot;hello&amp;quot;. Or:
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;(&#x2F;???&#x2F;??n&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;\150\145\154\154\157&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# To run &amp;quot;hello&amp;quot; as a program (still gives an error)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, our problem with letters is solved, but we are still using numbers.&lt;&#x2F;p&gt;
&lt;p&gt;Bash allows anyone to define functions. These functions can take arguments and call other programs. So, what if we have a function that can take any number of arguments, and return the number of arguments as a number? This will be helpful because an empty argument can be added with &lt;code&gt;&amp;quot;&amp;quot;&lt;&#x2F;code&gt; (not a number or letter), and this will replace the need for numbers in our code. On a side note, bash allows &lt;code&gt;__&lt;&#x2F;code&gt; as a function name, so that&#x27;s cool. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Our function needs to do the following:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#   - Take any number of arguments
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#   - Turn the number to a string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#   - Print the string so it can be evaluated back to a number with $()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# First, we start with an empty function, named __ (two underscores)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__&lt;&#x2F;span&gt;&lt;span&gt;() {};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Easy. Next, we use a built-in feature of bash to count the number of arguments passed
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__&lt;&#x2F;span&gt;&lt;span&gt;() { $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# With the ${#} feature in bash, giving this function 3 arguments will return a 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Next, we need to print this number to stdout 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This can be done with printf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# We still do not want to use any letters or numbers, so we must use our string of wildcards
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;??n&#x2F;???n?f
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# So, we just plug this into our function
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__&lt;&#x2F;span&gt;&lt;span&gt;() {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;??n&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;${#}};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Now, calling our function with three arguments
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Will print:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s put this together. First, we must tell bash that our &lt;code&gt;__&lt;&#x2F;code&gt; function exists. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# We do this by starting our new script with: 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__&lt;&#x2F;span&gt;&lt;span&gt;() {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;??n&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;${#}};
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Next, an eval to actually run our constructed string. Together it now looks like this:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__&lt;&#x2F;span&gt;&lt;span&gt;() {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;??n&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;${#}); $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;(&#x2F;???&#x2F;??n&#x2F;???n?f )
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Now, we construct a string using the __ function over and over again. &amp;quot;echo hello&amp;quot; looks like:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;__&lt;&#x2F;span&gt;&lt;span&gt;() {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;${#};}; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;(&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;(&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;???&#x2F;???&#x2F;???n?f &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\\\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;``&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;__ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &amp;quot;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Thats it! You do not actually have to worry about this, because BashSmash does it all for you automatically.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;how-do-i-use-the-script&quot;&gt;How do I use the script?&lt;&#x2F;h2&gt;
&lt;p&gt;To use BashSmash, simply make sure both &lt;code&gt;python3.7&lt;&#x2F;code&gt; and &lt;code&gt;python3-pip&lt;&#x2F;code&gt; are installed on your computer, then run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;pip3 install bashsmash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For more info, see the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;pypi.org&#x2F;project&#x2F;bashsmash&#x2F;&quot;&gt;PYPI Page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-do-you-have-a-desire-to-break-things-with-python&quot;&gt;Why do you have a desire to break things with python&lt;&#x2F;h2&gt;
&lt;p&gt;Because it is fun. Give it a try! &lt;&#x2F;p&gt;
&lt;p&gt;I will have a post here at some point about the weird things I do in my python code and why I do them.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>The language hunt: Part 2</title>
            <pubDate>Mon, 24 Jun 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/languagehunt2/</link>
            <guid>https://ewpratten.com/blog/languagehunt2/</guid>
            <description>&lt;p&gt;This is a very short post, just to explain the result of &lt;a href=&quot;&#x2F;blog&#x2F;2019&#x2F;04&#x2F;30&#x2F;frc-languages&quot;&gt;The language Hunt&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;our-choice&quot;&gt;Our choice&lt;&#x2F;h2&gt;
&lt;p&gt;For our upcoming 2020 season and for the forseeable future, we have chosen Java as our programming language for direct hardware interfacing, and Python for networking, vision, and other smaller tasks.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-does-this-mean-for-the-team&quot;&gt;What does this mean for the team?&lt;&#x2F;h2&gt;
&lt;p&gt;Not too much. Aside from learning new syntax, tools, and no longer worrying about linker errors, Java and C++ have no real difference. Most of the reason Java was chosen was based on support instead of functionality. Java is much better supported by FIRST, WPILib, and other vendors. Java is also taught in the school 5024 is based from. For a more detailed explanation of the benefits of each language, take a look at Chief Delphi. There are plenty of posts there explaining the choices of many teams and their reasoning.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;side-note&quot;&gt;Side note&lt;&#x2F;h2&gt;
&lt;p&gt;I am experimenting with various post formats (This being a short post). Let me know which you prefer via the social platform of your choice. &lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>I gave Google&#x27;s CTF a short try and learned a thing or two</title>
            <pubDate>Sun, 23 Jun 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/googlectf/</link>
            <guid>https://ewpratten.com/blog/googlectf/</guid>
            <description>&lt;p&gt;Honestly, I completely forgot that this was the weekend of Google&#x27;s online &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;g.co&#x2F;ctf&quot;&gt;CTF Qualifications&lt;&#x2F;a&gt; for 2019 and was late, unprepared, busy, and did not have a team to work with.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-this-event&quot;&gt;What is this event?&lt;&#x2F;h2&gt;
&lt;p&gt;Google hosts a (yearly?) event where hackers from around the world team up and attempt a variety of tasks like: exploiting machines over a network, reversing firmware, pulling passwords from tcp packets, hacking crypto stuff (something I suck at), breaking compilers. and much more. Generally, this event and others like it are really fun.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-i-learned&quot;&gt;What I learned&lt;&#x2F;h2&gt;
&lt;p&gt;Many questions I worked on involved extracting a key from a binary. I employed two vastly different tools for this job. First, a standard linux tool, &lt;code&gt;strings&lt;&#x2F;code&gt;. When passed a filename, it will extract and print all human-readable strings it can find to the terminal. The flag is usually in this dump. If not, I use the second tool. &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.nsa.gov&#x2F;resources&#x2F;everyone&#x2F;ghidra&#x2F;&quot;&gt;Ghidra&lt;&#x2F;a&gt;, an open-source reverse engineering tool designed by the NSA. I used this tool a fair amount during my quick attempt at GCTF.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;will-i-do-this-again&quot;&gt;Will I do this again?&lt;&#x2F;h2&gt;
&lt;p&gt;Yes! The CTF was very fun to try, and I will definitely give it a proper shot next time.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>What I have learned from 2 years of FRC programming</title>
            <pubDate>Fri, 21 Jun 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/robot-experiences/</link>
            <guid>https://ewpratten.com/blog/robot-experiences/</guid>
            <description>&lt;p&gt;Over the past two years (2018 &#x2F; 2019), I have been a member of my school&#x27;s &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.firstinspires.org&#x2F;robotics&#x2F;frc&quot;&gt;FRC&lt;&#x2F;a&gt; team, &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;frc5024.github.io&quot;&gt;Raider Robotics&lt;&#x2F;a&gt;. Specifically, a programmer.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-roles&quot;&gt;My roles&lt;&#x2F;h2&gt;
&lt;p&gt;In my first year, I joined the team as a programmer and had a fun time learning about embedded programming and development with hardware. Then, in my second year, I was promoted to programming co-lead along with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;slownie&quot;&gt;@slownie&lt;&#x2F;a&gt;. I much preferred my second season because I had a better understanding of the technology I was working with, and we got to play with some cool tools throughout the season.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-i-have-learned&quot;&gt;What I have learned&lt;&#x2F;h2&gt;
&lt;p&gt;Starting with our 2018 season, PowerUP. We learned early on that there is a practical limit to the number of programmers that 5024 can handle. That year, we had too many, and our situation was not helped by the fact that some members preferred scrolling through Instagram over writing code. This issue was almost entirely fixed by the introduction of a mandatory skill exam at the start of the season. Sam and I did not really care about the scores of the exam because, from reading the results, we could see who was actually motivated to join the team. Thanks to the test, we entered the season with seven excited programmers.&lt;&#x2F;p&gt;
&lt;p&gt;During the PowerUP season, I also learned the importance of student involvement. Most of the code from the season was written by mentors with the students just watching on a projecter. After talking with other team members, I learned that none of them through this was a good method of teaching, and many felt powerless. In the 2019 season, I completely reversed this. All students worked together on the codebase, and the mentors worked on other projects and provided input where needed.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;version-control&quot;&gt;Version Control&lt;&#x2F;h3&gt;
&lt;p&gt;During the 2018 season, code was shared around by USB. This lead to crazy conflicts, confusion over what was running on the robot, and general frustration during competitions. In 2019, I moved the team over to a &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&quot;&gt;GitHub&lt;&#x2F;a&gt; organization account and sent an email to support to get us unlimited private repos (thanks GitHub!). For the team members that where not comfortable in the terminal, I set them up with &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.gitkraken.com&#x2F;&quot;&gt;GitKracken PRO&lt;&#x2F;a&gt; accounts, and they enjoyed using the program. The rest of us stuck with GIT cli, or various plugins for VSCode.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;alpha-test&quot;&gt;Alpha test&lt;&#x2F;h3&gt;
&lt;p&gt;I got our team on board with the 2019 toolchain alpha test the week it was released in order to get everyone used to the new tools before the season (and help find bugs for the WPILib team). The new buildsystem, Gradle, worked great and I could even run it on the chromebook I was using for development at the time! To further assist the team, I set up a CI pipeline for automatic testing and code reviews of Pull Requests, and a doxygen + GitHub pages CD pipeline for our new documentation webpage.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;webdocs&quot;&gt;Webdocs&lt;&#x2F;h3&gt;
&lt;p&gt;A significant amount of my time was spent answering repetitive questions from the team. I enjoy helping people out, but explaining the same things over and over was starting to frustrate me. This was caused by a lack of documentation or bits of documentation spread over multiple websites. To solve this problem, I started the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;frc5024.github.io&#x2F;webdocs&#x2F;#&#x2F;&quot;&gt;Webdocs Page&lt;&#x2F;a&gt;. This website is designed to house a mix of team-specific notes, guides, low-level documentation, and documentation from all FRC vendors. This site was published after the season, so I will find out how usefull it really is during the 2020 season.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;command-base&quot;&gt;Command base&lt;&#x2F;h3&gt;
&lt;p&gt;&amp;quot;Command based programming is great. But...&amp;quot; is probably the best way to describe my suggested changes for 2020.&lt;&#x2F;p&gt;
&lt;p&gt;I have been learning from other teams, and from mentors about better ways to control our robot. During the offseason, I am playing with new ways to write robot code. Here are some of my changes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use a custom replacement for WPILib&#x27;s &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;first.wpi.edu&#x2F;FRC&#x2F;roborio&#x2F;release&#x2F;docs&#x2F;java&#x2F;edu&#x2F;wpi&#x2F;first&#x2F;wpilibj&#x2F;command&#x2F;Subsystem.html&quot;&gt;Subsystem&lt;&#x2F;a&gt; that buffers it&#x27;s inputs and outputs
&lt;ul&gt;
&lt;li&gt;This reduces load on our CAN and Ethernet networks&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Offload all camera and vision work to a Raspberry PI&lt;&#x2F;li&gt;
&lt;li&gt;Every subsystem must push telemetry data to NetworkTables for easy debugging and detailed logs&lt;&#x2F;li&gt;
&lt;li&gt;Use a custom logging system that buffers writes to stdout. This reduces network strain&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I am working on many other changes over on the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;frc5024&#x2F;MiniBot&quot;&gt;MiniBot&lt;&#x2F;a&gt; codebase.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-plans-for-2020&quot;&gt;My plans for 2020&lt;&#x2F;h2&gt;
&lt;p&gt;I have been re-selected to be the sole lead of the 5024 programming team for 2020. Here are my goals:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Switch the team from C++ to Java 
&lt;ul&gt;
&lt;li&gt;Easier for prototyping&lt;&#x2F;li&gt;
&lt;li&gt;Better memory management for high-level programmers&lt;&#x2F;li&gt;
&lt;li&gt;Better documentation from vendors&lt;&#x2F;li&gt;
&lt;li&gt;It is taught in our school&#x27;s compsci classes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Remove the skills exam in favour of weekly homework for the first 8 weeks&lt;&#x2F;li&gt;
&lt;li&gt;Provide writeups of lessons&lt;&#x2F;li&gt;
&lt;li&gt;Have mentors do &amp;quot;guest presentations&amp;quot;&lt;&#x2F;li&gt;
&lt;li&gt;Dedicate a day to robot driving lessons&lt;&#x2F;li&gt;
&lt;li&gt;Use a custom library with wrappers and tools built by me to provide easy interfaces for new programmers&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Graphing the relation between wheels and awards for FRC</title>
            <pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/graphing-w2a/</link>
            <guid>https://ewpratten.com/blog/graphing-w2a/</guid>
            <description>&lt;p&gt;I was scrolling through reddit the other day, and came across &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;r&#x2F;FRC&#x2F;comments&#x2F;byzv5q&#x2F;i_know_what_im_doing&#x2F;&quot;&gt;this great post&lt;&#x2F;a&gt; by u&#x2F;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.reddit.com&#x2F;user&#x2F;MasterQuacks&#x2F;&quot;&gt;MasterQuacks&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;wheels-to-awards&#x2F;w2ainspo.jpg&quot; alt=&quot;My insporation&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I thought to myself &amp;quot;ha. Thats funny&amp;quot;, and moved on. But that thought had stuck with me. &lt;&#x2F;p&gt;
&lt;p&gt;So here I am, bored on a sunday afternoon, staring at the matplotlib documentation. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;my-creation&quot;&gt;My creation&lt;&#x2F;h2&gt;
&lt;p&gt;In only a few lines of python, I have a program that will (badly) graph the number of awards per wheel for any team, or set of teams. &lt;&#x2F;p&gt;
&lt;p&gt;As always, feel free to tinker with the code. This one is not published anywhere, so if you want to share it, I would appreciate a mention.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;requests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;matplotlib.pyplot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;plt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Team&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wheels&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.id = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.wheels = wheels * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;### CONFIG ###
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;teams = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Team&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5024&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Team&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;254&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Team&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1114&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Team&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5406&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Team&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2056&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;year = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2019
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;##############
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i, team &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;enumerate&lt;&#x2F;span&gt;&lt;span&gt;(teams):
&lt;&#x2F;span&gt;&lt;span&gt;    award_data = requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;www.thebluealliance.com&#x2F;api&#x2F;v3&#x2F;team&#x2F;frc&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(team.id) + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;awards&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(year), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span&gt;={&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-TBA-Auth-Key&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mz0VWTNtXTDV8NNOz3dYg9fHOZw8UYek270gynLQ4v9veaaUJEPvJFCZRmte7AUN&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    awards_count = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(award_data)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    team.w2a = awards_count &#x2F; team.wheels
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(team.id, team.w2a)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span&gt;(i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, team.w2a, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tick_label&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(team.id))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Plot
&lt;&#x2F;span&gt;&lt;span&gt;x_lables = [team.id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;team &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;teams]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# plt.set_xticklabels(x_lables)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;xkcd&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Awards per wheel&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-result&quot;&gt;The result&lt;&#x2F;h2&gt;
&lt;p&gt;Here is the resulting image. From left, to right: 5024, 254, 1114, 5406, 2056&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;wheels-to-awards&#x2F;w2a.png&quot; alt=&quot;Thr result&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>GitHub&#x27;s CSS is boring. So I refreshed the design</title>
            <pubDate>Wed, 12 Jun 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/styiling-github/</link>
            <guid>https://ewpratten.com/blog/styiling-github/</guid>
            <description>&lt;p&gt;I have been using GitHub since 2017, and have been getting tired of GitHub&#x27;s theme. I didn&#x27;t need a huge change, just a small refresh. So, to solve this, I whipped out &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;addons.mozilla.org&#x2F;en-CA&#x2F;firefox&#x2F;addon&#x2F;styl-us&#x2F;&quot;&gt;Stylus&lt;&#x2F;a&gt; and made a nice little CSS file for it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-css&quot;&gt;The CSS&lt;&#x2F;h2&gt;
&lt;p&gt;Here is the CSS. Feel free to play with it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;css&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-css &quot;&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span&gt;@-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;moz-document url-prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;(&amp;quot;https:&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;github&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;com&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span&gt;.Header {
&lt;&#x2F;span&gt;&lt;span&gt;    background-color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#1a3652&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;repohead&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;experiment-repo-nav &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    background-color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#fff&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;reponav-item&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;selected &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    border-color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#fff #fff #4a79a8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;btn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;hover&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;btn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;hover,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;btn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;btn &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    background-color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#fafafa&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    background-image: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;linear-gradient&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;-180deg&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#fafafa&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#fafafa &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90%&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;btn-primary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;hover&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;btn-primary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;hover,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;btn-primary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;btn-primary &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    background-color: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#1aaa55&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    background-image: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;linear-gradient&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;-180deg&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#1aaa55&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;#1aaa55 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;90%&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;overall-summary &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;use-it-yourself&quot;&gt;Use it yourself&lt;&#x2F;h2&gt;
&lt;p&gt;I put this theme on userstyles.org. You can download and install it by going to &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;userstyles.org&#x2F;styles&#x2F;172679&#x2F;ewpratten-s-githubtheme&quot;&gt;my userstyles page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>The language hunt</title>
            <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/frc-languages/</link>
            <guid>https://ewpratten.com/blog/frc-languages/</guid>
            <description>&lt;p&gt;Our programming team is looking to switch languages in the 2020 season. Here is the what, why, and how.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;our-history&quot;&gt;Our history&lt;&#x2F;h2&gt;
&lt;p&gt;We started out as a java team back in 2014 because java was (and still is) the language being taught in our programming classes. Honestly, our code sucked, as many rookie team&#x27;s do. There where no fancy features, or sensor-assisted autonomous. Direct input into talons was our way to roll. &lt;&#x2F;p&gt;
&lt;p&gt;A few years later, we had a change in team organization and switched to C++. Up until the 2019 &#x2F; 2020 season, this was our language and we where getting pretty good at using it.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;&#x2F;h2&gt;
&lt;p&gt;We, as a team are looking to bring our programming and robots to the next level in 2020. Because of this, we ran into a problem. While C++ is an amazing language for embedded and robotics programming, some of it&#x27;s &amp;quot;features&amp;quot; where starting to act as a bottleneck to our design. Less time was being spent on polishing our new vision system or autonomous climb, and more on that crazy linker error that came out of nowhere.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s time for a change, but what do we change to?&lt;&#x2F;p&gt;
&lt;h2 id=&quot;part-2&quot;&gt;Part 2&lt;&#x2F;h2&gt;
&lt;p&gt;The followup can be found &lt;a href=&quot;&#x2F;frc&#x2F;2019&#x2F;06&#x2F;24&#x2F;LanguageHunt2.html&quot;&gt;HERE&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Robot reveal: HATCHField</title>
            <pubDate>Wed, 20 Feb 2019 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/hatchfield/</link>
            <guid>https://ewpratten.com/blog/hatchfield/</guid>
            <description>&lt;p&gt;My roles in this project included:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Assisting with mechanical design&lt;&#x2F;li&gt;
&lt;li&gt;Leading the software development efforts&lt;&#x2F;li&gt;
&lt;li&gt;Producing the reveal teaser video&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;reveal-teaser&quot;&gt;Reveal teaser&lt;&#x2F;h2&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;500&quot; src=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;embed&#x2F;jOMny7rGcmc&quot; title=&quot;Robot Reveal 2019&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;&#x2F;iframe&gt;</description>
        </item>
        <item>
            <title>Using a python script to create devRant posts based on the style and content of another user</title>
            <pubDate>Wed, 27 Jun 2018 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/becomeranter/</link>
            <guid>https://ewpratten.com/blog/becomeranter/</guid>
            <description>&lt;p&gt;Ok... The title is slightly wrong. There are actually 2 scripts.. Sorry about that.&lt;&#x2F;p&gt;
&lt;p&gt;This is a guide on installing and using the &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;BecomeRanter&quot;&gt;BecomeRanter&lt;&#x2F;a&gt; script.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-dependancies&quot;&gt;Getting dependancies&lt;&#x2F;h2&gt;
&lt;p&gt;The scripts use Google&#x27;s tensorflow library to do its &amp;quot;magic&amp;quot;. So first, we should install Tensorflow&#x27;s dependencies.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sudo apt install python3 python3-pip #change this command to fit your distro
&lt;&#x2F;span&gt;&lt;span&gt;pip3 install numpy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then install Tensorflow&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;pip3 install tensorflow #for cpu processing
&lt;&#x2F;span&gt;&lt;span&gt;pip3 install tensorflow-gpu #for gpu processing
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next up, install the rest of the stuff:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;pip3 install textgenrnn pandas keras
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;clone-the-repo&quot;&gt;Clone the repo&lt;&#x2F;h2&gt;
&lt;p&gt;This is pretty simple. just make sure you have &lt;code&gt;git&lt;&#x2F;code&gt; installed and run&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git clone https:&#x2F;&#x2F;github.com&#x2F;Ewpratten&#x2F;BecomeRanter.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;generate-some-rants-with-a-hdf5-file&quot;&gt;Generate some rants with a .hdf5 file&lt;&#x2F;h2&gt;
&lt;p&gt;As of the time of writing this, I have pre-generated some files for the two most popular ranters. These files can be found in &lt;code&gt;BecomeRanter&#x2F;Checkpoint\ Files&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Higher epoch numbers mean that they have had more time to train. The files with lower numbers are generally funnier.&lt;&#x2F;p&gt;
&lt;p&gt;To change the .hdf5 file you would like to use, open the file called &lt;code&gt;createsomerants.py&lt;&#x2F;code&gt; and change the variable called &lt;code&gt;input_file&lt;&#x2F;code&gt; to the path of your file. By default, the script generates from the &lt;code&gt;Linuxxx-epoch-90.hdf5&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;Next, save that file and run the following in your terminal:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;python3 createsomerants.py &amp;gt;&amp;gt; output.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It will not print the results out to the screen and put them in the file instead. &lt;&#x2F;p&gt;
&lt;p&gt;To stop the script, press CTRL + C&lt;&#x2F;p&gt;
&lt;h2 id=&quot;create-your-own-hdf5-file&quot;&gt;Create your own .hdf5 file&lt;&#x2F;h2&gt;
&lt;p&gt;If you want to make your own hdf5 file, you just have to use the other script in the repo.&lt;&#x2F;p&gt;
&lt;p&gt;By default, you can just put all your text to train on in the &lt;code&gt;input.txt&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;If you want to use a different file, or change the number of epochs, those variables can be found at the top of the &lt;code&gt;createhfd5frominput.py&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;To start training, run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;python3 createhfd5frominput.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A new hdf5 file will be generated in the same folder as the script&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>Festive Duality</title>
            <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/evan-pratten/festive-duality/</link>
            <guid>https://ewpratten.com/music/evan-pratten/festive-duality/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;1pfMWXU3tq3hzKTTQndwP0?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;200&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;&lt;em&gt;Festive Duality&lt;&#x2F;em&gt; is available on most platforms. Notably:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;1pfMWXU3tq3hzKTTQndwP0&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;festive-duality-single&#x2F;1611771385&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=NG8IzwkuFdU&amp;amp;list=OLAK5uy_lfII8GoSylsssdsa3KoVBnWHoBccA-kFw&quot;&gt;YouTube&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>X-MAS 02</title>
            <pubDate>Mon, 25 Dec 2017 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/xmas-02/</link>
            <guid>https://ewpratten.com/music/retrylife/xmas-02/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;2iCVucaAGKEBYk8tf4DFnR?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Available on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;2iCVucaAGKEBYk8tf4DFnR&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;x-mas-02&#x2F;1626865852&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>We lost a weather balloon in another country</title>
            <pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/blog/weatherballoon-lost/</link>
            <guid>https://ewpratten.com/blog/weatherballoon-lost/</guid>
            <description>&lt;p&gt;A news article was written about a project I was involved in. It&#x27;s even headed by a photo I took!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;smartcdn.gprod.postmedia.digital&#x2F;v1&#x2F;dynamic_resize&#x2F;sws_path&#x2F;suns-prod-images&#x2F;1298003385469_ORIGINAL.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;From the &lt;strong&gt;London Free Press&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;An appeal is going out to the Keystone state after a London high school class found out weather balloons can get away on you.&lt;&#x2F;p&gt;
&lt;p&gt;Theirs — part of a high-flying experiment they thought would travel about 100 kilometres, 150 km tops — drifted twice as far, crossing the Canada-U.S. border and coming down in a mountain valley in Pennsylvania, 300 kilometres away.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;lfpress.com&#x2F;2017&#x2F;11&#x2F;09&#x2F;beal-science-project-succeeds--maybe-too-much--as-weather-balloon-floats-into-us&quot;&gt;&lt;em&gt;Read the full article here&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Once found on the American side of the border, a corresponding article was written by the &lt;strong&gt;Potter Leader-Enterprise&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;At the school, principal Tracy Kio and fourth-grade science teacher Robert Raudenbush learned more about the balloon’s origins.&lt;&#x2F;p&gt;
&lt;p&gt;They had found that the balloon was part an experiment, launched more than a week ago from a football field in London, Ontario, Canada,  by H.B. Beal Secondary school teacher Dung Tiet and 10 eager ninth-graders.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.tiogapublishing.com&#x2F;potter_leader_enterprise&#x2F;news&#x2F;local&#x2F;around-the-great-lakes-in-two-days-canadian-balloon-makes-extraordinary-journey-to-port-allegany&#x2F;article_935ddffa-d11f-11e7-9783-03ac5a7e7efb.html&quot;&gt;&lt;em&gt;Read the full article here&lt;&#x2F;em&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-balloon-on-the-other-side&quot;&gt;The balloon on the other side&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;bloximages.chicago2.vip.townnews.com&#x2F;tiogapublishing.com&#x2F;content&#x2F;tncms&#x2F;assets&#x2F;v3&#x2F;editorial&#x2F;1&#x2F;38&#x2F;1384aff6-d120-11e7-bd7f-e7d82bd3ef3c&#x2F;5a1826bd8b199.image.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>H.B. Beal weather balloon launch photos</title>
            <pubDate>Tue, 07 Nov 2017 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/photography/weatherballoon/</link>
            <guid>https://ewpratten.com/photography/weatherballoon/</guid>
            <description>&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;weatherballoon&#x2F;927939789311107072-DOC0OKwVQAAYH6R.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;posts&#x2F;weatherballoon&#x2F;927942227749416960-DOC2hmHVwAI8aXW.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
        </item>
        <item>
            <title>A trip around Québec</title>
            <pubDate>Thu, 22 Jun 2017 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/photography/quebec-2017/</link>
            <guid>https://ewpratten.com/photography/quebec-2017/</guid>
            <description>&lt;p&gt;Back in 2017, I took a school-organized trip around Québec. My friends and I brought our cameras, loaded up on SD cards, and went all out with some pretty creative shots.&lt;&#x2F;p&gt;
&lt;p&gt;While I was mainly focused on shooting video, I did take a few hundred photos along the way, and later edited them all to fit a sort of rough grainy theme I was playing around with at the time.&lt;&#x2F;p&gt;
&lt;!-- ## From the streets --&gt;
&lt;a href=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170621_132531-01.jpeg&quot;&gt;
    &lt;img src=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170621_132531-01.jpeg&quot;  loading=&quot;lazy&quot;&gt;
&lt;&#x2F;a&gt;
&lt;br&gt;
&lt;a href=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170621_131126-01.jpeg&quot;&gt;
    &lt;img src=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170621_131126-01.jpeg&quot;  loading=&quot;lazy&quot;&gt;
&lt;&#x2F;a&gt;
&lt;br&gt;
&lt;a href=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170621_225558-01.jpeg&quot;&gt;
    &lt;img src=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170621_225558-01.jpeg&quot;  loading=&quot;lazy&quot;&gt;
&lt;&#x2F;a&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;p&gt;I am quite fond of this one, a super wide shot made from stitching a bunch of photos together in &lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Image_Composite_Editor%22&quot;&gt;Microsoft ICE&lt;&#x2F;a&gt;}}.&lt;&#x2F;p&gt;
&lt;a href=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170621_105853-01.jpeg&quot;&gt;
    &lt;img src=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170621_105853-01.jpeg&quot;  loading=&quot;lazy&quot;&gt;
&lt;&#x2F;a&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;a href=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170621_105921-01.jpeg&quot;&gt;
    &lt;img src=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170621_105921-01.jpeg&quot;  loading=&quot;lazy&quot;&gt;
&lt;&#x2F;a&gt;
&lt;br&gt;
&lt;a href=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170622_112655-01.jpeg&quot;&gt;
    &lt;img src=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170622_112655-01.jpeg&quot;  loading=&quot;lazy&quot;&gt;
&lt;&#x2F;a&gt;
&lt;br&gt;
&lt;hr&gt;
&lt;p&gt;I also took a bunch of neat waterfall photos:&lt;&#x2F;p&gt;
&lt;a href=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170622_152959-01.jpeg&quot;&gt;
    &lt;img src=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170622_152959-01.jpeg&quot;  loading=&quot;lazy&quot;&gt;
&lt;&#x2F;a&gt;
&lt;br&gt;
&lt;a href=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170622_153509-02.jpeg&quot;&gt;
    &lt;img src=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170622_153509-02.jpeg&quot;  loading=&quot;lazy&quot;&gt;
&lt;&#x2F;a&gt;
&lt;br&gt;
&lt;a href=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170622_153903-01.jpeg&quot;&gt;
    &lt;img src=&quot;&amp;#x2F;photos&amp;#x2F;quebec-2017&amp;#x2F;20170622_153903-01.jpeg&quot;  loading=&quot;lazy&quot;&gt;
&lt;&#x2F;a&gt;
&lt;br&gt;
</description>
        </item>
        <item>
            <title>The Eternal</title>
            <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/the-eternal/</link>
            <guid>https://ewpratten.com/music/retrylife/the-eternal/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;6d8XBDUs5attDs7UPQBUOq?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;200&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Available on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;6d8XBDUs5attDs7UPQBUOq&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;the-eternal-single&#x2F;1626874722&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Imagined (Theatrical Soundtrack)</title>
            <pubDate>Thu, 06 Apr 2017 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/imagined/</link>
            <guid>https://ewpratten.com/music/retrylife/imagined/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;6do7NZe30VeSO22Bp0sXxX?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
</description>
        </item>
        <item>
            <title>Lemons</title>
            <pubDate>Wed, 01 Mar 2017 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/lemons/</link>
            <guid>https://ewpratten.com/music/retrylife/lemons/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;4oTrOPTDjsk0YGQ2445DUV?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Available on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;4oTrOPTDjsk0YGQ2445DUV&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;lemons&#x2F;1626874978&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Radioactive</title>
            <pubDate>Sat, 04 Feb 2017 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/evan-pratten/radioactive/</link>
            <guid>https://ewpratten.com/music/evan-pratten/radioactive/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;44mayKI3HsGnNDr9A1yDgF?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;200&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;&lt;em&gt;Radioactive&lt;&#x2F;em&gt; is available on most platforms. Notably:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;44mayKI3HsGnNDr9A1yDgF&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;radioactive-single&#x2F;1626650101&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=sICgx2RJ2wc&amp;amp;list=OLAK5uy_neGXTCHrn_h76tejQeOf7VQlhVNpH0nQU&quot;&gt;YouTube&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Explosive Christmas</title>
            <pubDate>Sun, 25 Dec 2016 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/explosive-xmas/</link>
            <guid>https://ewpratten.com/music/retrylife/explosive-xmas/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;2skpFmpTQmTRcCoOQk76O6?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Available on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;2skpFmpTQmTRcCoOQk76O6&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;explosive-christmas&#x2F;1626866197&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Reborn</title>
            <pubDate>Mon, 31 Oct 2016 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/reborn/</link>
            <guid>https://ewpratten.com/music/retrylife/reborn/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;5Nza88pbyLWeuSm2IHbVgN?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Available on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;5Nza88pbyLWeuSm2IHbVgN&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;reborn-single&#x2F;1626641225&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Intergalactic Swirlz</title>
            <pubDate>Wed, 05 Oct 2016 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/intergalactic-swirlz/</link>
            <guid>https://ewpratten.com/music/retrylife/intergalactic-swirlz/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;6aXnm2sZLLEVR1ob1Vbgiz?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Available on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;6aXnm2sZLLEVR1ob1Vbgiz&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;intergalactic-swirlz&#x2F;1626871464&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Flare</title>
            <pubDate>Tue, 10 May 2016 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/flare/</link>
            <guid>https://ewpratten.com/music/retrylife/flare/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;5B3qcjQfxOvQGBBDdnbywk?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Available on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;5B3qcjQfxOvQGBBDdnbywk&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;flare-ep&#x2F;1626865525&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Project 39</title>
            <pubDate>Mon, 28 Dec 2015 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/project-39/</link>
            <guid>https://ewpratten.com/music/retrylife/project-39/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;4loaa0nWyDaxZWlZgHaIBQ?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
</description>
        </item>
        <item>
            <title>Gifted</title>
            <pubDate>Fri, 25 Dec 2015 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/gifted/</link>
            <guid>https://ewpratten.com/music/retrylife/gifted/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;7nXctp6NPvSeHcwpGfmvlP?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Available on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;7nXctp6NPvSeHcwpGfmvlP&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;gifted&#x2F;1626565104&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Silent</title>
            <pubDate>Thu, 24 Sep 2015 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/silent/</link>
            <guid>https://ewpratten.com/music/retrylife/silent/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;195fokmbfC9Hs62pOusDS3?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
</description>
        </item>
        <item>
            <title>Enlarging Elaphants</title>
            <pubDate>Mon, 01 Jun 2015 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/enlarging-elaphants/</link>
            <guid>https://ewpratten.com/music/retrylife/enlarging-elaphants/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;48Y20F41psQbkZzqW8S6HU?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
</description>
        </item>
        <item>
            <title>Bring the Onslaught</title>
            <pubDate>Sun, 24 May 2015 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/bring-the-onslaught/</link>
            <guid>https://ewpratten.com/music/retrylife/bring-the-onslaught/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;5hiVUR7IxKldHWZQch5B6A?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Available on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;5hiVUR7IxKldHWZQch5B6A&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;bring-the-onslaught-ep&#x2F;1626636189&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Insanitorium</title>
            <pubDate>Sat, 25 Apr 2015 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/insanitorium/</link>
            <guid>https://ewpratten.com/music/retrylife/insanitorium/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;4V94dN0MecmER02pwUc092?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Available on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;4V94dN0MecmER02pwUc092&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;insanitorium-ep&#x2F;1626865870&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Hypernova</title>
            <pubDate>Sun, 29 Mar 2015 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/hypernova/</link>
            <guid>https://ewpratten.com/music/retrylife/hypernova/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;35Nq5zIyBlwLnPuGGzcQcd?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Available on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;35Nq5zIyBlwLnPuGGzcQcd&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;hypernova-ep&#x2F;1626856194&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Hidden Forest</title>
            <pubDate>Fri, 27 Mar 2015 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/hidden-forest/</link>
            <guid>https://ewpratten.com/music/retrylife/hidden-forest/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;2qrNBI4HkvUhOPj9Z4Hw2N?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Available on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;2qrNBI4HkvUhOPj9Z4Hw2N&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;hidden-forest-ep&#x2F;1626650229&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Death Among Us</title>
            <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/death-among-us/</link>
            <guid>https://ewpratten.com/music/retrylife/death-among-us/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;55U8dXTlIt47CaudCOZRyT?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Available on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;55U8dXTlIt47CaudCOZRyT&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;death-among-us-ep&#x2F;1626570443&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>Memories From the Past</title>
            <pubDate>Mon, 31 Dec 2012 00:00:00 +0000</pubDate>
            <link>https://ewpratten.com/music/retrylife/memories/</link>
            <guid>https://ewpratten.com/music/retrylife/memories/</guid>
            <description>&lt;iframe src=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;embed&#x2F;album&#x2F;2myMAO4TeHCuxRLCRMN0Rq?utm_source=generator&amp;theme=0&quot; width=&quot;100%&quot; height=&quot;380&quot; frameBorder=&quot;0&quot; allowfullscreen=&quot;&quot; allow=&quot;autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture&quot;&gt;&lt;&#x2F;iframe&gt;
&lt;p&gt;Available on:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;open.spotify.com&#x2F;album&#x2F;2myMAO4TeHCuxRLCRMN0Rq&quot;&gt;Spotify&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a rel=&quot;noopener&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;music.apple.com&#x2F;us&#x2F;album&#x2F;memories-from-the-past-ep&#x2F;1626518874&quot;&gt;Apple Music&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
    </channel>
</rss>
